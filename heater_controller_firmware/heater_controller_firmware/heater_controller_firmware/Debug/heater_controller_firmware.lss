
heater_controller_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f0  00800100  00003c8c  00003d20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000298  008001f0  008001f0  00003e10  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003e10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003e40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000d48  00000000  00000000  00003e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00022014  00000000  00000000  00004bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000426a  00000000  00000000  00026bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006da3  00000000  00000000  0002ae46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002cb8  00000000  00000000  00031bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000089e9  00000000  00000000  000348a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00012337  00000000  00000000  0003d28d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e48  00000000  00000000  0004f5c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 11 03 	jmp	0x622	; 0x622 <__dtors_end>
       4:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__vector_1>
       8:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__vector_2>
       c:	0c 94 39 03 	jmp	0x672	; 0x672 <__bad_interrupt>
      10:	0c 94 39 03 	jmp	0x672	; 0x672 <__bad_interrupt>
      14:	0c 94 39 03 	jmp	0x672	; 0x672 <__bad_interrupt>
      18:	0c 94 39 03 	jmp	0x672	; 0x672 <__bad_interrupt>
      1c:	0c 94 39 03 	jmp	0x672	; 0x672 <__bad_interrupt>
      20:	0c 94 39 03 	jmp	0x672	; 0x672 <__bad_interrupt>
      24:	0c 94 39 03 	jmp	0x672	; 0x672 <__bad_interrupt>
      28:	0c 94 39 03 	jmp	0x672	; 0x672 <__bad_interrupt>
      2c:	0c 94 39 03 	jmp	0x672	; 0x672 <__bad_interrupt>
      30:	0c 94 39 03 	jmp	0x672	; 0x672 <__bad_interrupt>
      34:	0c 94 39 03 	jmp	0x672	; 0x672 <__bad_interrupt>
      38:	0c 94 39 03 	jmp	0x672	; 0x672 <__bad_interrupt>
      3c:	0c 94 39 03 	jmp	0x672	; 0x672 <__bad_interrupt>
      40:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__vector_16>
      44:	0c 94 39 03 	jmp	0x672	; 0x672 <__bad_interrupt>
      48:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__vector_18>
      4c:	0c 94 96 0b 	jmp	0x172c	; 0x172c <__vector_19>
      50:	0c 94 39 03 	jmp	0x672	; 0x672 <__bad_interrupt>
      54:	0c 94 39 03 	jmp	0x672	; 0x672 <__bad_interrupt>
      58:	0c 94 39 03 	jmp	0x672	; 0x672 <__bad_interrupt>
      5c:	0c 94 39 03 	jmp	0x672	; 0x672 <__bad_interrupt>
      60:	0c 94 39 03 	jmp	0x672	; 0x672 <__bad_interrupt>
      64:	0c 94 39 03 	jmp	0x672	; 0x672 <__bad_interrupt>
      68:	22 04       	cpc	r2, r2
      6a:	2f 04       	cpc	r2, r15
      6c:	4f 04       	cpc	r4, r15
      6e:	3c 04       	cpc	r3, r12
      70:	45 04       	cpc	r4, r5
      72:	4f 04       	cpc	r4, r15
      74:	5c 04       	cpc	r5, r12

00000076 <__trampolines_end>:
      76:	00 40       	sbci	r16, 0x00	; 0
      78:	7a 10       	cpse	r7, r10
      7a:	f3 5a       	subi	r31, 0xA3	; 163
      7c:	00 a0       	ldd	r0, Z+32	; 0x20
      7e:	72 4e       	sbci	r23, 0xE2	; 226
      80:	18 09       	sbc	r17, r8
      82:	00 10       	cpse	r0, r0
      84:	a5 d4       	rcall	.+2378   	; 0x9d0 <_Z14refreshDisplayv+0x22>
      86:	e8 00       	.word	0x00e8	; ????
      88:	00 e8       	ldi	r16, 0x80	; 128
      8a:	76 48       	sbci	r23, 0x86	; 134
      8c:	17 00       	.word	0x0017	; ????
      8e:	00 e4       	ldi	r16, 0x40	; 64
      90:	0b 54       	subi	r16, 0x4B	; 75
      92:	02 00       	.word	0x0002	; ????
      94:	00 ca       	rjmp	.-3072   	; 0xfffff496 <__eeprom_end+0xff7ef496>
      96:	9a 3b       	cpi	r25, 0xBA	; 186
      98:	00 00       	nop
      9a:	00 e1       	ldi	r16, 0x10	; 16
      9c:	f5 05       	cpc	r31, r5
      9e:	00 00       	nop
      a0:	80 96       	adiw	r24, 0x20	; 32
      a2:	98 00       	.word	0x0098	; ????
      a4:	00 00       	nop
      a6:	40 42       	sbci	r20, 0x20	; 32
      a8:	0f 00       	.word	0x000f	; ????
      aa:	00 00       	nop
      ac:	a0 86       	std	Z+8, r10	; 0x08
      ae:	01 00       	.word	0x0001	; ????
      b0:	00 00       	nop
      b2:	10 27       	eor	r17, r16
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	e8 03       	fmulsu	r22, r16
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	64 00       	.word	0x0064	; ????
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	0a 00       	.word	0x000a	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	01 00       	.word	0x0001	; ????
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	2c 76       	andi	r18, 0x6C	; 108
      d2:	d8 88       	ldd	r13, Y+16	; 0x10
      d4:	dc 67       	ori	r29, 0x7C	; 124
      d6:	4f 08       	sbc	r4, r15
      d8:	23 df       	rcall	.-442    	; 0xffffff20 <__eeprom_end+0xff7eff20>
      da:	c1 df       	rcall	.-126    	; 0x5e <__SREG__+0x1f>
      dc:	ae 59       	subi	r26, 0x9E	; 158
      de:	e1 b1       	in	r30, 0x01	; 1
      e0:	b7 96       	adiw	r30, 0x27	; 39
      e2:	e5 e3       	ldi	r30, 0x35	; 53
      e4:	e4 53       	subi	r30, 0x34	; 52
      e6:	c6 3a       	cpi	r28, 0xA6	; 166
      e8:	e6 51       	subi	r30, 0x16	; 22
      ea:	99 76       	andi	r25, 0x69	; 105
      ec:	96 e8       	ldi	r25, 0x86	; 134
      ee:	e6 c2       	rjmp	.+1484   	; 0x6bc <_ZN10debugger_t8drawFormEv+0x1c>
      f0:	84 26       	eor	r8, r20
      f2:	eb 89       	ldd	r30, Y+19	; 0x13
      f4:	8c 9b       	sbis	0x11, 4	; 17
      f6:	62 ed       	ldi	r22, 0xD2	; 210
      f8:	40 7c       	andi	r20, 0xC0	; 192
      fa:	6f fc       	.word	0xfc6f	; ????
      fc:	ef bc       	out	0x2f, r14	; 47
      fe:	9c 9f       	mul	r25, r28
     100:	40 f2       	brcs	.-112    	; 0x92 <__trampolines_end+0x1c>
     102:	ba a5       	ldd	r27, Y+42	; 0x2a
     104:	6f a5       	ldd	r22, Y+47	; 0x2f
     106:	f4 90       	lpm	r15, Z
     108:	05 5a       	subi	r16, 0xA5	; 165
     10a:	2a f7       	brpl	.-54     	; 0xd6 <__trampolines_end+0x60>
     10c:	5c 93       	st	X, r21
     10e:	6b 6c       	ori	r22, 0xCB	; 203
     110:	f9 67       	ori	r31, 0x79	; 121
     112:	6d c1       	rjmp	.+730    	; 0x3ee <u8g_font_babyr+0x1e2>
     114:	1b fc       	.word	0xfc1b	; ????
     116:	e0 e4       	ldi	r30, 0x40	; 64
     118:	0d 47       	sbci	r16, 0x7D	; 125
     11a:	fe f5       	brtc	.+126    	; 0x19a <digital_pin_to_port_PGM+0x2>
     11c:	20 e6       	ldi	r18, 0x60	; 96
     11e:	b5 00       	.word	0x00b5	; ????
     120:	d0 ed       	ldi	r29, 0xD0	; 208
     122:	90 2e       	mov	r9, r16
     124:	03 00       	.word	0x0003	; ????
     126:	94 35       	cpi	r25, 0x54	; 84
     128:	77 05       	cpc	r23, r7
     12a:	00 80       	ld	r0, Z
     12c:	84 1e       	adc	r8, r20
     12e:	08 00       	.word	0x0008	; ????
     130:	00 20       	and	r0, r0
     132:	4e 0a       	sbc	r4, r30
     134:	00 00       	nop
     136:	00 c8       	rjmp	.-4096   	; 0xfffff138 <__eeprom_end+0xff7ef138>
     138:	0c 33       	cpi	r16, 0x3C	; 60
     13a:	33 33       	cpi	r19, 0x33	; 51
     13c:	33 0f       	add	r19, r19
     13e:	98 6e       	ori	r25, 0xE8	; 232
     140:	12 83       	std	Z+2, r17	; 0x02
     142:	11 41       	sbci	r17, 0x11	; 17
     144:	ef 8d       	ldd	r30, Y+31	; 0x1f
     146:	21 14       	cp	r2, r1
     148:	89 3b       	cpi	r24, 0xB9	; 185
     14a:	e6 55       	subi	r30, 0x56	; 86
     14c:	16 cf       	rjmp	.-468    	; 0xffffff7a <__eeprom_end+0xff7eff7a>
     14e:	fe e6       	ldi	r31, 0x6E	; 110
     150:	db 18       	sub	r13, r11
     152:	d1 84       	ldd	r13, Z+9	; 0x09
     154:	4b 38       	cpi	r20, 0x8B	; 139
     156:	1b f7       	brvc	.-58     	; 0x11e <__trampolines_end+0xa8>
     158:	7c 1d       	adc	r23, r12
     15a:	90 1d       	adc	r25, r0
     15c:	a4 bb       	out	0x14, r26	; 20
     15e:	e4 24       	eor	r14, r4
     160:	20 32       	cpi	r18, 0x20	; 32
     162:	84 72       	andi	r24, 0x24	; 36
     164:	5e 22       	and	r5, r30
     166:	81 00       	.word	0x0081	; ????
     168:	c9 f1       	breq	.+114    	; 0x1dc <u8g_dev_ssd13xx_sleep_on+0x7>
     16a:	24 ec       	ldi	r18, 0xC4	; 196
     16c:	a1 e5       	ldi	r26, 0x51	; 81
     16e:	3d 27       	eor	r19, r29

00000170 <digital_pin_to_timer_PGM>:
     170:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     180:	00 00 00 00                                         ....

00000184 <digital_pin_to_bit_mask_PGM>:
     184:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     194:	04 08 10 20                                         ... 

00000198 <digital_pin_to_port_PGM>:
     198:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     1a8:	03 03 03 03                                         ....

000001ac <port_to_input_PGM>:
     1ac:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000001b6 <port_to_output_PGM>:
     1b6:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000001c0 <port_to_mode_PGM>:
     1c0:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000001ca <u8g_dev_ssd13xx_sleep_off>:
     1ca:	ff e0 ff d1 af ff 32 ff d0 ff fe                    ......2....

000001d5 <u8g_dev_ssd13xx_sleep_on>:
     1d5:	ff e0 ff d1 ae ff d0 ff fe                          .........

000001de <u8g_dev_ssd1306_128x64_data_start>:
     1de:	ff e0 ff d1 10 00 ff fe                             ........

000001e6 <u8g_dev_ssd1306_128x64_adafruit2_init_seq>:
     1e6:	ff d0 ff e0 ff c1 ff d1 ae d5 80 a8 3f d3 00 40     ............?..@
     1f6:	8d 14 20 00 a1 c8 da 12 81 cf d9 f1 db 40 2e a4     .. ..........@..
     206:	a6 af ff d0 ff fe                                   ......

0000020c <u8g_font_babyr>:
     20c:	00 0a 0a ff fe 05 01 6c 02 c8 20 7f fe 07 fe 06     .......l.. .....
     21c:	fe 00 00 00 02 00 00 01 06 06 03 01 00 80 80 80     ................
     22c:	80 00 80 03 03 03 04 00 04 a0 a0 a0 05 05 05 06     ................
     23c:	00 00 50 f8 50 f8 50 03 07 07 04 00 ff 40 60 80     ..P.P.P......@`.
     24c:	40 20 c0 40 05 05 05 06 00 00 c8 d0 20 58 98 05     @ .@........ X..
     25c:	06 06 06 00 00 40 a0 40 a0 90 68 01 03 03 02 00     .....@.@..h.....
     26c:	04 80 80 80 02 07 07 03 00 ff 40 80 80 80 80 80     ..........@.....
     27c:	40 02 07 07 03 00 ff 80 40 40 40 40 40 80 03 03     @.......@@@@@...
     28c:	03 04 00 03 a0 40 a0 03 03 03 05 01 01 40 e0 40     .....@.......@.@
     29c:	02 03 03 03 00 fe c0 40 80 03 01 01 04 00 02 e0     .......@........
     2ac:	01 01 01 02 00 00 80 03 06 06 04 00 ff 20 20 40     .............  @
     2bc:	40 80 80 03 05 05 04 00 00 40 a0 a0 a0 40 02 05     @........@...@..
     2cc:	05 03 00 00 40 c0 40 40 40 04 05 05 05 00 00 60     ....@.@@@......`
     2dc:	90 20 40 f0 04 05 05 05 00 00 e0 10 60 10 e0 04     . @.........`...
     2ec:	05 05 05 00 00 90 90 90 70 10 04 05 05 05 00 00     ........p.......
     2fc:	f0 80 e0 10 e0 04 05 05 05 00 00 60 80 e0 90 60     ...........`...`
     30c:	04 05 05 05 00 00 f0 10 20 40 80 04 05 05 05 00     ........ @......
     31c:	00 60 90 60 90 60 04 05 05 05 00 00 60 90 70 10     .`.`.`......`.p.
     32c:	60 01 03 03 03 01 00 80 00 80 02 05 05 03 00 fe     `...............
     33c:	40 00 40 40 80 04 05 05 05 00 00 10 60 80 60 10     @.@@........`.`.
     34c:	03 03 03 04 00 01 e0 00 e0 04 05 05 05 00 00 80     ................
     35c:	60 10 60 80 04 06 06 05 00 00 60 90 20 40 00 40     `.`.......`. @.@
     36c:	05 06 06 06 00 00 70 88 a8 b0 80 70 04 05 05 05     ......p....p....
     37c:	00 00 60 90 90 f0 90 04 05 05 05 00 00 e0 90 e0     ..`.............
     38c:	90 e0 04 05 05 05 00 00 60 90 80 90 60 04 05 05     ........`...`...
     39c:	05 00 00 e0 90 90 90 e0 04 05 05 05 00 00 f0 80     ................
     3ac:	e0 80 f0 04 05 05 05 00 00 f0 80 e0 80 80 04 05     ................
     3bc:	05 05 00 00 60 80 b0 90 60 04 05 05 05 00 00 90     ....`...`.......
     3cc:	90 f0 90 90 03 05 05 04 00 00 e0 40 40 40 e0 04     ...........@@@..
     3dc:	05 05 05 00 00 70 10 10 90 60 04 05 05 05 00 00     .....p...`......
     3ec:	90 90 90 e0 90 03 05 05 04 00 00 80 80 80 80 e0     ................
     3fc:	05 05 05 06 00 00 d8 a8 a8 a8 88 04 05 05 05 00     ................
     40c:	00 90 90 d0 b0 90 04 05 05 05 00 00 60 90 90 90     ............`...
     41c:	60 04 05 05 05 00 00 e0 90 90 e0 80 04 05 05 05     `...............
     42c:	00 00 60 90 90 50 e0 04 05 05 05 00 00 e0 90 90     ..`..P..........
     43c:	e0 90 03 05 05 04 00 00 60 80 40 20 c0 03 05 05     ........`.@ ....
     44c:	04 00 00 e0 40 40 40 40 04 05 05 05 00 00 90 90     ....@@@@........
     45c:	90 90 60 05 05 05 06 00 00 88 50 50 50 20 05 05     ..`.......PPP ..
     46c:	05 06 00 00 88 88 88 a8 50 04 05 05 05 00 00 90     ........P.......
     47c:	90 90 60 90 04 06 06 05 00 ff 90 90 90 70 10 60     ..`..........p.`
     48c:	04 05 05 05 00 00 f0 20 40 80 f0 02 07 07 03 00     ....... @.......
     49c:	ff c0 80 80 80 80 80 c0 03 06 06 04 00 ff 80 80     ................
     4ac:	40 40 20 20 02 07 07 03 00 ff c0 40 40 40 40 40     @@  .......@@@@@
     4bc:	c0 03 02 02 04 00 04 40 a0 04 01 01 05 00 ff f0     .......@........
     4cc:	02 02 02 03 00 05 80 40 04 04 04 05 00 00 60 90     .......@......`.
     4dc:	90 70 04 05 05 05 00 00 80 e0 90 90 60 03 04 04     .p..........`...
     4ec:	04 00 00 60 80 80 60 04 05 05 05 00 00 10 70 90     ...`..`.......p.
     4fc:	90 60 04 04 04 05 00 00 60 90 a0 70 04 05 05 05     .`......`..p....
     50c:	00 00 60 90 80 c0 80 04 06 06 05 00 fe 60 90 90     ..`..........`..
     51c:	70 10 60 04 05 05 05 00 00 80 e0 90 90 90 01 05     p.`.............
     52c:	05 02 00 00 80 00 80 80 80 03 07 07 03 ff fe 20     ............... 
     53c:	00 20 20 20 20 c0 03 05 05 04 00 00 80 a0 c0 a0     .    ...........
     54c:	a0 01 05 05 02 00 00 80 80 80 80 80 05 04 04 06     ................
     55c:	00 00 d0 a8 a8 88 04 04 04 05 00 00 e0 90 90 90     ................
     56c:	04 04 04 05 00 00 60 90 90 60 04 06 06 05 00 fe     ......`..`......
     57c:	60 90 90 e0 80 80 04 06 06 05 00 fe 60 90 90 70     `...........`..p
     58c:	10 10 04 04 04 05 00 00 e0 90 80 80 04 04 04 05     ................
     59c:	00 00 70 40 20 e0 03 05 05 04 00 00 40 e0 40 40     ..p@ .......@.@@
     5ac:	40 04 04 04 05 00 00 90 90 90 70 04 04 04 05 00     @.........p.....
     5bc:	00 90 90 90 60 05 04 04 06 00 00 88 a8 a8 50 04     ....`.........P.
     5cc:	04 04 05 00 00 90 90 60 90 04 06 06 05 00 fe 90     .......`........
     5dc:	90 90 70 10 60 04 04 04 05 00 00 f0 20 40 f0 03     ..p.`....... @..
     5ec:	07 07 04 00 ff 20 40 40 80 40 40 20 01 07 07 02     ..... @@.@@ ....
     5fc:	00 ff 80 80 80 80 80 80 80 03 07 07 04 00 ff 80     ................
     60c:	40 40 20 40 40 80 05 03 03 06 00 01 40 a8 10 ff     @@ @@.......@...

0000061c <__ctors_start>:
     61c:	26 07       	cpc	r18, r22
     61e:	c6 0b       	sbc	r28, r22

00000620 <__ctors_end>:
     620:	9d 07       	cpc	r25, r29

00000622 <__dtors_end>:
     622:	11 24       	eor	r1, r1
     624:	1f be       	out	0x3f, r1	; 63
     626:	cf ef       	ldi	r28, 0xFF	; 255
     628:	d8 e0       	ldi	r29, 0x08	; 8
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	cd bf       	out	0x3d, r28	; 61

0000062e <__do_copy_data>:
     62e:	11 e0       	ldi	r17, 0x01	; 1
     630:	a0 e0       	ldi	r26, 0x00	; 0
     632:	b1 e0       	ldi	r27, 0x01	; 1
     634:	ec e8       	ldi	r30, 0x8C	; 140
     636:	fc e3       	ldi	r31, 0x3C	; 60
     638:	02 c0       	rjmp	.+4      	; 0x63e <__do_copy_data+0x10>
     63a:	05 90       	lpm	r0, Z+
     63c:	0d 92       	st	X+, r0
     63e:	a0 3f       	cpi	r26, 0xF0	; 240
     640:	b1 07       	cpc	r27, r17
     642:	d9 f7       	brne	.-10     	; 0x63a <__do_copy_data+0xc>

00000644 <__do_clear_bss>:
     644:	24 e0       	ldi	r18, 0x04	; 4
     646:	a0 ef       	ldi	r26, 0xF0	; 240
     648:	b1 e0       	ldi	r27, 0x01	; 1
     64a:	01 c0       	rjmp	.+2      	; 0x64e <.do_clear_bss_start>

0000064c <.do_clear_bss_loop>:
     64c:	1d 92       	st	X+, r1

0000064e <.do_clear_bss_start>:
     64e:	a8 38       	cpi	r26, 0x88	; 136
     650:	b2 07       	cpc	r27, r18
     652:	e1 f7       	brne	.-8      	; 0x64c <.do_clear_bss_loop>

00000654 <__do_global_ctors>:
     654:	13 e0       	ldi	r17, 0x03	; 3
     656:	c0 e1       	ldi	r28, 0x10	; 16
     658:	d3 e0       	ldi	r29, 0x03	; 3
     65a:	04 c0       	rjmp	.+8      	; 0x664 <__do_global_ctors+0x10>
     65c:	21 97       	sbiw	r28, 0x01	; 1
     65e:	fe 01       	movw	r30, r28
     660:	0e 94 81 19 	call	0x3302	; 0x3302 <__tablejump2__>
     664:	ce 30       	cpi	r28, 0x0E	; 14
     666:	d1 07       	cpc	r29, r17
     668:	c9 f7       	brne	.-14     	; 0x65c <__do_global_ctors+0x8>
     66a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <main>
     66e:	0c 94 39 1e 	jmp	0x3c72	; 0x3c72 <__do_global_dtors>

00000672 <__bad_interrupt>:
     672:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000676 <_Z20doImpulse_button_ISRv>:
     break;
   }
   x++;
 }
 return returnValue;
}
     676:	80 e1       	ldi	r24, 0x10	; 16
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	0c 94 f1 15 	jmp	0x2be2	; 0x2be2 <_ZN6Button7processEv>

0000067e <_ZN6U8GLIB5writeEh>:
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	ec 01       	movw	r28, r24
     684:	26 2f       	mov	r18, r22
     686:	4c ad       	ldd	r20, Y+60	; 0x3c
     688:	6b ad       	ldd	r22, Y+59	; 0x3b
     68a:	04 96       	adiw	r24, 0x04	; 4
     68c:	0e 94 08 13 	call	0x2610	; 0x2610 <u8g_DrawGlyph>
     690:	9b ad       	ldd	r25, Y+59	; 0x3b
     692:	89 0f       	add	r24, r25
     694:	8b af       	std	Y+59, r24	; 0x3b
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	08 95       	ret

000006a0 <_ZN10debugger_t8drawFormEv>:
     6a0:	8f 92       	push	r8
     6a2:	9f 92       	push	r9
     6a4:	af 92       	push	r10
     6a6:	bf 92       	push	r11
     6a8:	cf 92       	push	r12
     6aa:	df 92       	push	r13
     6ac:	ef 92       	push	r14
     6ae:	ff 92       	push	r15
     6b0:	0f 93       	push	r16
     6b2:	1f 93       	push	r17
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	8c 01       	movw	r16, r24
     6ba:	69 e1       	ldi	r22, 0x19	; 25
     6bc:	71 e0       	ldi	r23, 0x01	; 1
     6be:	8b e5       	ldi	r24, 0x5B	; 91
     6c0:	93 e0       	ldi	r25, 0x03	; 3
     6c2:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <_ZN5Print5printEPKc>
     6c6:	48 01       	movw	r8, r16
     6c8:	8e e5       	ldi	r24, 0x5E	; 94
     6ca:	88 0e       	add	r8, r24
     6cc:	91 1c       	adc	r9, r1
     6ce:	e1 2c       	mov	r14, r1
     6d0:	f1 2c       	mov	r15, r1
     6d2:	87 e1       	ldi	r24, 0x17	; 23
     6d4:	a8 2e       	mov	r10, r24
     6d6:	b1 2c       	mov	r11, r1
     6d8:	f8 01       	movw	r30, r16
     6da:	80 81       	ld	r24, Z
     6dc:	91 81       	ldd	r25, Z+1	; 0x01
     6de:	e8 16       	cp	r14, r24
     6e0:	f9 06       	cpc	r15, r25
     6e2:	0c f0       	brlt	.+2      	; 0x6e6 <_ZN10debugger_t8drawFormEv+0x46>
     6e4:	45 c0       	rjmp	.+138    	; 0x770 <_ZN10debugger_t8drawFormEv+0xd0>
     6e6:	f4 01       	movw	r30, r8
     6e8:	c1 90       	ld	r12, Z+
     6ea:	d1 90       	ld	r13, Z+
     6ec:	4f 01       	movw	r8, r30
     6ee:	e6 01       	movw	r28, r12
     6f0:	09 90       	ld	r0, Y+
     6f2:	00 20       	and	r0, r0
     6f4:	e9 f7       	brne	.-6      	; 0x6f0 <_ZN10debugger_t8drawFormEv+0x50>
     6f6:	21 97       	sbiw	r28, 0x01	; 1
     6f8:	cc 19       	sub	r28, r12
     6fa:	dd 09       	sbc	r29, r13
     6fc:	69 e2       	ldi	r22, 0x29	; 41
     6fe:	71 e0       	ldi	r23, 0x01	; 1
     700:	8b e5       	ldi	r24, 0x5B	; 91
     702:	93 e0       	ldi	r25, 0x03	; 3
     704:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <_ZN5Print5printEPKc>
     708:	6b e2       	ldi	r22, 0x2B	; 43
     70a:	71 e0       	ldi	r23, 0x01	; 1
     70c:	8b e5       	ldi	r24, 0x5B	; 91
     70e:	93 e0       	ldi	r25, 0x03	; 3
     710:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <_ZN5Print5printEPKc>
     714:	b7 01       	movw	r22, r14
     716:	77 27       	eor	r23, r23
     718:	6f 5f       	subi	r22, 0xFF	; 255
     71a:	7f 4f       	sbci	r23, 0xFF	; 255
     71c:	4a e0       	ldi	r20, 0x0A	; 10
     71e:	50 e0       	ldi	r21, 0x00	; 0
     720:	8b e5       	ldi	r24, 0x5B	; 91
     722:	93 e0       	ldi	r25, 0x03	; 3
     724:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <_ZN5Print5printEii>
     728:	6d e2       	ldi	r22, 0x2D	; 45
     72a:	71 e0       	ldi	r23, 0x01	; 1
     72c:	8b e5       	ldi	r24, 0x5B	; 91
     72e:	93 e0       	ldi	r25, 0x03	; 3
     730:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <_ZN5Print5printEPKc>
     734:	b5 01       	movw	r22, r10
     736:	6c 1b       	sub	r22, r28
     738:	7d 0b       	sbc	r23, r29
     73a:	4a e0       	ldi	r20, 0x0A	; 10
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	8b e5       	ldi	r24, 0x5B	; 91
     740:	93 e0       	ldi	r25, 0x03	; 3
     742:	0e 94 b6 0c 	call	0x196c	; 0x196c <_ZN5Print5printEji>
     746:	67 e2       	ldi	r22, 0x27	; 39
     748:	71 e0       	ldi	r23, 0x01	; 1
     74a:	8b e5       	ldi	r24, 0x5B	; 91
     74c:	93 e0       	ldi	r25, 0x03	; 3
     74e:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <_ZN5Print5printEPKc>
     752:	b6 01       	movw	r22, r12
     754:	8b e5       	ldi	r24, 0x5B	; 91
     756:	93 e0       	ldi	r25, 0x03	; 3
     758:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <_ZN5Print5printEPKc>
     75c:	6f e2       	ldi	r22, 0x2F	; 47
     75e:	71 e0       	ldi	r23, 0x01	; 1
     760:	8b e5       	ldi	r24, 0x5B	; 91
     762:	93 e0       	ldi	r25, 0x03	; 3
     764:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <_ZN5Print5printEPKc>
     768:	ff ef       	ldi	r31, 0xFF	; 255
     76a:	ef 1a       	sub	r14, r31
     76c:	ff 0a       	sbc	r15, r31
     76e:	b4 cf       	rjmp	.-152    	; 0x6d8 <_ZN10debugger_t8drawFormEv+0x38>
     770:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <currentTime>
     774:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <currentTime+0x1>
     778:	a0 91 2d 02 	lds	r26, 0x022D	; 0x80022d <currentTime+0x2>
     77c:	b0 91 2e 02 	lds	r27, 0x022E	; 0x80022e <currentTime+0x3>
     780:	f8 01       	movw	r30, r16
     782:	86 83       	std	Z+6, r24	; 0x06
     784:	97 83       	std	Z+7, r25	; 0x07
     786:	a0 87       	std	Z+8, r26	; 0x08
     788:	b1 87       	std	Z+9, r27	; 0x09
     78a:	12 8a       	std	Z+18, r1	; 0x12
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	1f 91       	pop	r17
     792:	0f 91       	pop	r16
     794:	ff 90       	pop	r15
     796:	ef 90       	pop	r14
     798:	df 90       	pop	r13
     79a:	cf 90       	pop	r12
     79c:	bf 90       	pop	r11
     79e:	af 90       	pop	r10
     7a0:	9f 90       	pop	r9
     7a2:	8f 90       	pop	r8
     7a4:	08 95       	ret

000007a6 <_ZN10debugger_t14refreshDisplayEv>:
     7a6:	cf 92       	push	r12
     7a8:	df 92       	push	r13
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	8c 01       	movw	r16, r24
     7b8:	ec 01       	movw	r28, r24
     7ba:	6c 01       	movw	r12, r24
     7bc:	85 e4       	ldi	r24, 0x45	; 69
     7be:	c8 0e       	add	r12, r24
     7c0:	d1 1c       	adc	r13, r1
     7c2:	e1 2c       	mov	r14, r1
     7c4:	f1 2c       	mov	r15, r1
     7c6:	d8 01       	movw	r26, r16
     7c8:	8d 91       	ld	r24, X+
     7ca:	9c 91       	ld	r25, X
     7cc:	e8 16       	cp	r14, r24
     7ce:	f9 06       	cpc	r15, r25
     7d0:	0c f0       	brlt	.+2      	; 0x7d4 <_ZN10debugger_t14refreshDisplayEv+0x2e>
     7d2:	84 c0       	rjmp	.+264    	; 0x8dc <_ZN10debugger_t14refreshDisplayEv+0x136>
     7d4:	69 e2       	ldi	r22, 0x29	; 41
     7d6:	71 e0       	ldi	r23, 0x01	; 1
     7d8:	8b e5       	ldi	r24, 0x5B	; 91
     7da:	93 e0       	ldi	r25, 0x03	; 3
     7dc:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <_ZN5Print5printEPKc>
     7e0:	6b e2       	ldi	r22, 0x2B	; 43
     7e2:	71 e0       	ldi	r23, 0x01	; 1
     7e4:	8b e5       	ldi	r24, 0x5B	; 91
     7e6:	93 e0       	ldi	r25, 0x03	; 3
     7e8:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <_ZN5Print5printEPKc>
     7ec:	b7 01       	movw	r22, r14
     7ee:	77 27       	eor	r23, r23
     7f0:	6f 5f       	subi	r22, 0xFF	; 255
     7f2:	7f 4f       	sbci	r23, 0xFF	; 255
     7f4:	4a e0       	ldi	r20, 0x0A	; 10
     7f6:	50 e0       	ldi	r21, 0x00	; 0
     7f8:	8b e5       	ldi	r24, 0x5B	; 91
     7fa:	93 e0       	ldi	r25, 0x03	; 3
     7fc:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <_ZN5Print5printEii>
     800:	6d e2       	ldi	r22, 0x2D	; 45
     802:	71 e0       	ldi	r23, 0x01	; 1
     804:	8b e5       	ldi	r24, 0x5B	; 91
     806:	93 e0       	ldi	r25, 0x03	; 3
     808:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <_ZN5Print5printEPKc>
     80c:	4a e0       	ldi	r20, 0x0A	; 10
     80e:	50 e0       	ldi	r21, 0x00	; 0
     810:	6a e1       	ldi	r22, 0x1A	; 26
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	8b e5       	ldi	r24, 0x5B	; 91
     816:	93 e0       	ldi	r25, 0x03	; 3
     818:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <_ZN5Print5printEii>
     81c:	67 e2       	ldi	r22, 0x27	; 39
     81e:	71 e0       	ldi	r23, 0x01	; 1
     820:	8b e5       	ldi	r24, 0x5B	; 91
     822:	93 e0       	ldi	r25, 0x03	; 3
     824:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <_ZN5Print5printEPKc>
     828:	d6 01       	movw	r26, r12
     82a:	ed 91       	ld	r30, X+
     82c:	6d 01       	movw	r12, r26
     82e:	8e 2f       	mov	r24, r30
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	87 30       	cpi	r24, 0x07	; 7
     834:	91 05       	cpc	r25, r1
     836:	08 f0       	brcs	.+2      	; 0x83a <_ZN10debugger_t14refreshDisplayEv+0x94>
     838:	46 c0       	rjmp	.+140    	; 0x8c6 <_ZN10debugger_t14refreshDisplayEv+0x120>
     83a:	fc 01       	movw	r30, r24
     83c:	ec 5c       	subi	r30, 0xCC	; 204
     83e:	ff 4f       	sbci	r31, 0xFF	; 255
     840:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__tablejump2__>
     844:	eb 89       	ldd	r30, Y+19	; 0x13
     846:	fc 89       	ldd	r31, Y+20	; 0x14
     848:	40 81       	ld	r20, Z
     84a:	51 81       	ldd	r21, Z+1	; 0x01
     84c:	62 81       	ldd	r22, Z+2	; 0x02
     84e:	73 81       	ldd	r23, Z+3	; 0x03
     850:	2a e0       	ldi	r18, 0x0A	; 10
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	8b e5       	ldi	r24, 0x5B	; 91
     856:	93 e0       	ldi	r25, 0x03	; 3
     858:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_ZN5Print5printEli>
     85c:	34 c0       	rjmp	.+104    	; 0x8c6 <_ZN10debugger_t14refreshDisplayEv+0x120>
     85e:	eb 89       	ldd	r30, Y+19	; 0x13
     860:	fc 89       	ldd	r31, Y+20	; 0x14
     862:	40 81       	ld	r20, Z
     864:	51 81       	ldd	r21, Z+1	; 0x01
     866:	62 81       	ldd	r22, Z+2	; 0x02
     868:	73 81       	ldd	r23, Z+3	; 0x03
     86a:	2a e0       	ldi	r18, 0x0A	; 10
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	8b e5       	ldi	r24, 0x5B	; 91
     870:	93 e0       	ldi	r25, 0x03	; 3
     872:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN5Print5printEmi>
     876:	27 c0       	rjmp	.+78     	; 0x8c6 <_ZN10debugger_t14refreshDisplayEv+0x120>
     878:	eb 89       	ldd	r30, Y+19	; 0x13
     87a:	fc 89       	ldd	r31, Y+20	; 0x14
     87c:	60 81       	ld	r22, Z
     87e:	71 81       	ldd	r23, Z+1	; 0x01
     880:	8b e5       	ldi	r24, 0x5B	; 91
     882:	93 e0       	ldi	r25, 0x03	; 3
     884:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <_ZN5Print5printEPKc>
     888:	1e c0       	rjmp	.+60     	; 0x8c6 <_ZN10debugger_t14refreshDisplayEv+0x120>
     88a:	eb 89       	ldd	r30, Y+19	; 0x13
     88c:	fc 89       	ldd	r31, Y+20	; 0x14
     88e:	4a e0       	ldi	r20, 0x0A	; 10
     890:	50 e0       	ldi	r21, 0x00	; 0
     892:	60 81       	ld	r22, Z
     894:	8b e5       	ldi	r24, 0x5B	; 91
     896:	93 e0       	ldi	r25, 0x03	; 3
     898:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN5Print5printEhi>
     89c:	14 c0       	rjmp	.+40     	; 0x8c6 <_ZN10debugger_t14refreshDisplayEv+0x120>
     89e:	eb 89       	ldd	r30, Y+19	; 0x13
     8a0:	fc 89       	ldd	r31, Y+20	; 0x14
     8a2:	40 81       	ld	r20, Z
     8a4:	51 81       	ldd	r21, Z+1	; 0x01
     8a6:	62 81       	ldd	r22, Z+2	; 0x02
     8a8:	73 81       	ldd	r23, Z+3	; 0x03
     8aa:	22 e0       	ldi	r18, 0x02	; 2
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	8b e5       	ldi	r24, 0x5B	; 91
     8b0:	93 e0       	ldi	r25, 0x03	; 3
     8b2:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <_ZN5Print5printEdi>
     8b6:	07 c0       	rjmp	.+14     	; 0x8c6 <_ZN10debugger_t14refreshDisplayEv+0x120>
     8b8:	eb 89       	ldd	r30, Y+19	; 0x13
     8ba:	fc 89       	ldd	r31, Y+20	; 0x14
     8bc:	60 81       	ld	r22, Z
     8be:	8b e5       	ldi	r24, 0x5B	; 91
     8c0:	93 e0       	ldi	r25, 0x03	; 3
     8c2:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <_ZN5Print5printEc>
     8c6:	63 e3       	ldi	r22, 0x33	; 51
     8c8:	71 e0       	ldi	r23, 0x01	; 1
     8ca:	8b e5       	ldi	r24, 0x5B	; 91
     8cc:	93 e0       	ldi	r25, 0x03	; 3
     8ce:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <_ZN5Print5printEPKc>
     8d2:	bf ef       	ldi	r27, 0xFF	; 255
     8d4:	eb 1a       	sub	r14, r27
     8d6:	fb 0a       	sbc	r15, r27
     8d8:	22 96       	adiw	r28, 0x02	; 2
     8da:	75 cf       	rjmp	.-278    	; 0x7c6 <_ZN10debugger_t14refreshDisplayEv+0x20>
     8dc:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <currentTime>
     8e0:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <currentTime+0x1>
     8e4:	a0 91 2d 02 	lds	r26, 0x022D	; 0x80022d <currentTime+0x2>
     8e8:	b0 91 2e 02 	lds	r27, 0x022E	; 0x80022e <currentTime+0x3>
     8ec:	f8 01       	movw	r30, r16
     8ee:	82 83       	std	Z+2, r24	; 0x02
     8f0:	93 83       	std	Z+3, r25	; 0x03
     8f2:	a4 83       	std	Z+4, r26	; 0x04
     8f4:	b5 83       	std	Z+5, r27	; 0x05
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
     8fe:	ff 90       	pop	r15
     900:	ef 90       	pop	r14
     902:	df 90       	pop	r13
     904:	cf 90       	pop	r12
     906:	08 95       	ret

00000908 <_Z9doImpulsev>:
     908:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <millis>
     90c:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <lastPulseTime>
     910:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <lastPulseTime+0x1>
     914:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <lastPulseTime+0x2>
     918:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <lastPulseTime+0x3>
     91c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <pulseCounter>
     920:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <pulseCounter+0x1>
     924:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <pulseCounter+0x2>
     928:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <pulseCounter+0x3>
     92c:	01 96       	adiw	r24, 0x01	; 1
     92e:	a1 1d       	adc	r26, r1
     930:	b1 1d       	adc	r27, r1
     932:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <pulseCounter>
     936:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <pulseCounter+0x1>
     93a:	a0 93 0e 02 	sts	0x020E, r26	; 0x80020e <pulseCounter+0x2>
     93e:	b0 93 0f 02 	sts	0x020F, r27	; 0x80020f <pulseCounter+0x3>
     942:	08 95       	ret

00000944 <_Z17doImpulse_onPressR6Button>:
     944:	0c 94 84 04 	jmp	0x908	; 0x908 <_Z9doImpulsev>

00000948 <setup>:
     948:	26 e0       	ldi	r18, 0x06	; 6
     94a:	40 e0       	ldi	r20, 0x00	; 0
     94c:	52 ec       	ldi	r21, 0xC2	; 194
     94e:	61 e0       	ldi	r22, 0x01	; 1
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	8b e5       	ldi	r24, 0x5B	; 91
     954:	93 e0       	ldi	r25, 0x03	; 3
     956:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN14HardwareSerial5beginEmh>
     95a:	86 e7       	ldi	r24, 0x76	; 118
     95c:	92 e0       	ldi	r25, 0x02	; 2
     95e:	0e 94 82 08 	call	0x1104	; 0x1104 <_ZN19SmoothedAnalogInput4initEv>
     962:	8f e5       	ldi	r24, 0x5F	; 95
     964:	92 e0       	ldi	r25, 0x02	; 2
     966:	0e 94 82 08 	call	0x1104	; 0x1104 <_ZN19SmoothedAnalogInput4initEv>
     96a:	61 e0       	ldi	r22, 0x01	; 1
     96c:	83 e0       	ldi	r24, 0x03	; 3
     96e:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <pinMode>
     972:	62 ea       	ldi	r22, 0xA2	; 162
     974:	74 e0       	ldi	r23, 0x04	; 4
     976:	80 e1       	ldi	r24, 0x10	; 16
     978:	92 e0       	ldi	r25, 0x02	; 2
     97a:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <_ZN6Button12pressHandlerEPFvRS_E>
     97e:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <doImpulse_button>
     982:	82 30       	cpi	r24, 0x02	; 2
     984:	21 f0       	breq	.+8      	; 0x98e <setup+0x46>
     986:	83 30       	cpi	r24, 0x03	; 3
     988:	21 f0       	breq	.+8      	; 0x992 <setup+0x4a>
     98a:	8f ef       	ldi	r24, 0xFF	; 255
     98c:	03 c0       	rjmp	.+6      	; 0x994 <setup+0x4c>
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	01 c0       	rjmp	.+2      	; 0x994 <setup+0x4c>
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	41 e0       	ldi	r20, 0x01	; 1
     996:	50 e0       	ldi	r21, 0x00	; 0
     998:	6b e3       	ldi	r22, 0x3B	; 59
     99a:	73 e0       	ldi	r23, 0x03	; 3
     99c:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <attachInterrupt>
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <u8g+0x3d>
     9a6:	81 e2       	ldi	r24, 0x21	; 33
     9a8:	93 e0       	ldi	r25, 0x03	; 3
     9aa:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <u8g_Begin>

000009ae <_Z14refreshDisplayv>:
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	61 e0       	ldi	r22, 0x01	; 1
     9b6:	81 e2       	ldi	r24, 0x21	; 33
     9b8:	93 e0       	ldi	r25, 0x03	; 3
     9ba:	0e 94 b1 14 	call	0x2962	; 0x2962 <u8g_SetColorIndex>
     9be:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <u8g+0x3d>
     9c2:	81 11       	cpse	r24, r1
     9c4:	07 c0       	rjmp	.+14     	; 0x9d4 <_Z14refreshDisplayv+0x26>
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <u8g+0x3d>
     9cc:	81 e2       	ldi	r24, 0x21	; 33
     9ce:	93 e0       	ldi	r25, 0x03	; 3
     9d0:	0e 94 67 14 	call	0x28ce	; 0x28ce <u8g_Begin>
     9d4:	81 e2       	ldi	r24, 0x21	; 33
     9d6:	93 e0       	ldi	r25, 0x03	; 3
     9d8:	0e 94 8c 14 	call	0x2918	; 0x2918 <u8g_FirstPage>
     9dc:	6c e0       	ldi	r22, 0x0C	; 12
     9de:	72 e0       	ldi	r23, 0x02	; 2
     9e0:	81 e2       	ldi	r24, 0x21	; 33
     9e2:	93 e0       	ldi	r25, 0x03	; 3
     9e4:	0e 94 6f 13 	call	0x26de	; 0x26de <u8g_SetFont>
     9e8:	0f e2       	ldi	r16, 0x2F	; 47
     9ea:	12 e0       	ldi	r17, 0x02	; 2
     9ec:	c1 e0       	ldi	r28, 0x01	; 1
     9ee:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <u8g+0x1f>
     9f2:	c8 9f       	mul	r28, r24
     9f4:	80 2d       	mov	r24, r0
     9f6:	11 24       	eor	r1, r1
     9f8:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <u8g+0x3b>
     9fc:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <u8g+0x3c>
     a00:	b8 01       	movw	r22, r16
     a02:	8d e1       	ldi	r24, 0x1D	; 29
     a04:	93 e0       	ldi	r25, 0x03	; 3
     a06:	0e 94 42 0c 	call	0x1884	; 0x1884 <_ZN5Print5printERK6String>
     a0a:	cf 5f       	subi	r28, 0xFF	; 255
     a0c:	0a 5f       	subi	r16, 0xFA	; 250
     a0e:	1f 4f       	sbci	r17, 0xFF	; 255
     a10:	c9 30       	cpi	r28, 0x09	; 9
     a12:	69 f7       	brne	.-38     	; 0x9ee <_Z14refreshDisplayv+0x40>
     a14:	81 e2       	ldi	r24, 0x21	; 33
     a16:	93 e0       	ldi	r25, 0x03	; 3
     a18:	0e 94 91 14 	call	0x2922	; 0x2922 <u8g_NextPage>
     a1c:	81 11       	cpse	r24, r1
     a1e:	de cf       	rjmp	.-68     	; 0x9dc <_Z14refreshDisplayv+0x2e>
     a20:	cf 91       	pop	r28
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	08 95       	ret

00000a28 <loop>:
     a28:	cf 92       	push	r12
     a2a:	df 92       	push	r13
     a2c:	ef 92       	push	r14
     a2e:	ff 92       	push	r15
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	cd b7       	in	r28, 0x3d	; 61
     a3a:	de b7       	in	r29, 0x3e	; 62
     a3c:	2c 97       	sbiw	r28, 0x0c	; 12
     a3e:	0f b6       	in	r0, 0x3f	; 63
     a40:	f8 94       	cli
     a42:	de bf       	out	0x3e, r29	; 62
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	cd bf       	out	0x3d, r28	; 61
     a48:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <millis>
     a4c:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <_ZZ4loopE13currentMillis>
     a50:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <_ZZ4loopE13currentMillis+0x1>
     a54:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZZ4loopE13currentMillis+0x2>
     a58:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_ZZ4loopE13currentMillis+0x3>
     a5c:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <micros>
     a60:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <_ZZ4loopE13currentMicros>
     a64:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <_ZZ4loopE13currentMicros+0x1>
     a68:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <_ZZ4loopE13currentMicros+0x2>
     a6c:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <_ZZ4loopE13currentMicros+0x3>
     a70:	00 91 04 02 	lds	r16, 0x0204	; 0x800204 <_ZZ4loopE13currentMillis>
     a74:	10 91 05 02 	lds	r17, 0x0205	; 0x800205 <_ZZ4loopE13currentMillis+0x1>
     a78:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <_ZZ4loopE13currentMillis+0x2>
     a7c:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <_ZZ4loopE13currentMillis+0x3>
     a80:	c0 90 fc 01 	lds	r12, 0x01FC	; 0x8001fc <_ZZ4loopE10lastMillis>
     a84:	d0 90 fd 01 	lds	r13, 0x01FD	; 0x8001fd <_ZZ4loopE10lastMillis+0x1>
     a88:	e0 90 fe 01 	lds	r14, 0x01FE	; 0x8001fe <_ZZ4loopE10lastMillis+0x2>
     a8c:	f0 90 ff 01 	lds	r15, 0x01FF	; 0x8001ff <_ZZ4loopE10lastMillis+0x3>
     a90:	0c 19       	sub	r16, r12
     a92:	1d 09       	sbc	r17, r13
     a94:	2e 09       	sbc	r18, r14
     a96:	3f 09       	sbc	r19, r15
     a98:	00 93 f8 01 	sts	0x01F8, r16	; 0x8001f8 <_ZZ4loopE11deltaMillis>
     a9c:	10 93 f9 01 	sts	0x01F9, r17	; 0x8001f9 <_ZZ4loopE11deltaMillis+0x1>
     aa0:	20 93 fa 01 	sts	0x01FA, r18	; 0x8001fa <_ZZ4loopE11deltaMillis+0x2>
     aa4:	30 93 fb 01 	sts	0x01FB, r19	; 0x8001fb <_ZZ4loopE11deltaMillis+0x3>
     aa8:	00 91 f4 01 	lds	r16, 0x01F4	; 0x8001f4 <_ZZ4loopE10lastMicros>
     aac:	10 91 f5 01 	lds	r17, 0x01F5	; 0x8001f5 <_ZZ4loopE10lastMicros+0x1>
     ab0:	20 91 f6 01 	lds	r18, 0x01F6	; 0x8001f6 <_ZZ4loopE10lastMicros+0x2>
     ab4:	30 91 f7 01 	lds	r19, 0x01F7	; 0x8001f7 <_ZZ4loopE10lastMicros+0x3>
     ab8:	dc 01       	movw	r26, r24
     aba:	cb 01       	movw	r24, r22
     abc:	80 1b       	sub	r24, r16
     abe:	91 0b       	sbc	r25, r17
     ac0:	a2 0b       	sbc	r26, r18
     ac2:	b3 0b       	sbc	r27, r19
     ac4:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <__data_end>
     ac8:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <__data_end+0x1>
     acc:	a0 93 f2 01 	sts	0x01F2, r26	; 0x8001f2 <__data_end+0x2>
     ad0:	b0 93 f3 01 	sts	0x01F3, r27	; 0x8001f3 <__data_end+0x3>
     ad4:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <millis>
     ad8:	60 93 2b 02 	sts	0x022B, r22	; 0x80022b <currentTime>
     adc:	70 93 2c 02 	sts	0x022C, r23	; 0x80022c <currentTime+0x1>
     ae0:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <currentTime+0x2>
     ae4:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <currentTime+0x3>
     ae8:	00 91 8f 02 	lds	r16, 0x028F	; 0x80028f <Debugger+0x2>
     aec:	10 91 90 02 	lds	r17, 0x0290	; 0x800290 <Debugger+0x3>
     af0:	20 91 91 02 	lds	r18, 0x0291	; 0x800291 <Debugger+0x4>
     af4:	30 91 92 02 	lds	r19, 0x0292	; 0x800292 <Debugger+0x5>
     af8:	6b 01       	movw	r12, r22
     afa:	7c 01       	movw	r14, r24
     afc:	c0 1a       	sub	r12, r16
     afe:	d1 0a       	sbc	r13, r17
     b00:	e2 0a       	sbc	r14, r18
     b02:	f3 0a       	sbc	r15, r19
     b04:	00 91 97 02 	lds	r16, 0x0297	; 0x800297 <Debugger+0xa>
     b08:	10 91 98 02 	lds	r17, 0x0298	; 0x800298 <Debugger+0xb>
     b0c:	20 91 99 02 	lds	r18, 0x0299	; 0x800299 <Debugger+0xc>
     b10:	30 91 9a 02 	lds	r19, 0x029A	; 0x80029a <Debugger+0xd>
     b14:	c0 16       	cp	r12, r16
     b16:	d1 06       	cpc	r13, r17
     b18:	e2 06       	cpc	r14, r18
     b1a:	f3 06       	cpc	r15, r19
     b1c:	50 f1       	brcs	.+84     	; 0xb72 <loop+0x14a>
     b1e:	00 91 93 02 	lds	r16, 0x0293	; 0x800293 <Debugger+0x6>
     b22:	10 91 94 02 	lds	r17, 0x0294	; 0x800294 <Debugger+0x7>
     b26:	20 91 95 02 	lds	r18, 0x0295	; 0x800295 <Debugger+0x8>
     b2a:	30 91 96 02 	lds	r19, 0x0296	; 0x800296 <Debugger+0x9>
     b2e:	dc 01       	movw	r26, r24
     b30:	cb 01       	movw	r24, r22
     b32:	80 1b       	sub	r24, r16
     b34:	91 0b       	sbc	r25, r17
     b36:	a2 0b       	sbc	r26, r18
     b38:	b3 0b       	sbc	r27, r19
     b3a:	00 91 9b 02 	lds	r16, 0x029B	; 0x80029b <Debugger+0xe>
     b3e:	10 91 9c 02 	lds	r17, 0x029C	; 0x80029c <Debugger+0xf>
     b42:	20 91 9d 02 	lds	r18, 0x029D	; 0x80029d <Debugger+0x10>
     b46:	30 91 9e 02 	lds	r19, 0x029E	; 0x80029e <Debugger+0x11>
     b4a:	80 17       	cp	r24, r16
     b4c:	91 07       	cpc	r25, r17
     b4e:	a2 07       	cpc	r26, r18
     b50:	b3 07       	cpc	r27, r19
     b52:	18 f0       	brcs	.+6      	; 0xb5a <loop+0x132>
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <Debugger+0x12>
     b5a:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <Debugger+0x12>
     b5e:	88 23       	and	r24, r24
     b60:	21 f0       	breq	.+8      	; 0xb6a <loop+0x142>
     b62:	8d e8       	ldi	r24, 0x8D	; 141
     b64:	92 e0       	ldi	r25, 0x02	; 2
     b66:	0e 94 50 03 	call	0x6a0	; 0x6a0 <_ZN10debugger_t8drawFormEv>
     b6a:	8d e8       	ldi	r24, 0x8D	; 141
     b6c:	92 e0       	ldi	r25, 0x02	; 2
     b6e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_ZN10debugger_t14refreshDisplayEv>
     b72:	c0 90 04 02 	lds	r12, 0x0204	; 0x800204 <_ZZ4loopE13currentMillis>
     b76:	d0 90 05 02 	lds	r13, 0x0205	; 0x800205 <_ZZ4loopE13currentMillis+0x1>
     b7a:	e0 90 06 02 	lds	r14, 0x0206	; 0x800206 <_ZZ4loopE13currentMillis+0x2>
     b7e:	f0 90 07 02 	lds	r15, 0x0207	; 0x800207 <_ZZ4loopE13currentMillis+0x3>
     b82:	6a e3       	ldi	r22, 0x3A	; 58
     b84:	71 e0       	ldi	r23, 0x01	; 1
     b86:	ce 01       	movw	r24, r28
     b88:	07 96       	adiw	r24, 0x07	; 7
     b8a:	0e 94 57 10 	call	0x20ae	; 0x20ae <_ZN6StringC1EPKc>
     b8e:	be 01       	movw	r22, r28
     b90:	69 5f       	subi	r22, 0xF9	; 249
     b92:	7f 4f       	sbci	r23, 0xFF	; 255
     b94:	ce 01       	movw	r24, r28
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	0e 94 83 10 	call	0x2106	; 0x2106 <_ZN6StringC1ERKS_>
     b9c:	b7 01       	movw	r22, r14
     b9e:	a6 01       	movw	r20, r12
     ba0:	ce 01       	movw	r24, r28
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	0e 94 1c 11 	call	0x2238	; 0x2238 <_ZplRK15StringSumHelperm>
     ba8:	bc 01       	movw	r22, r24
     baa:	8f e2       	ldi	r24, 0x2F	; 47
     bac:	92 e0       	ldi	r25, 0x02	; 2
     bae:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN6StringaSERKS_>
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN6StringD1Ev>
     bba:	ce 01       	movw	r24, r28
     bbc:	07 96       	adiw	r24, 0x07	; 7
     bbe:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN6StringD1Ev>
     bc2:	c0 90 00 02 	lds	r12, 0x0200	; 0x800200 <_ZZ4loopE13currentMicros>
     bc6:	d0 90 01 02 	lds	r13, 0x0201	; 0x800201 <_ZZ4loopE13currentMicros+0x1>
     bca:	e0 90 02 02 	lds	r14, 0x0202	; 0x800202 <_ZZ4loopE13currentMicros+0x2>
     bce:	f0 90 03 02 	lds	r15, 0x0203	; 0x800203 <_ZZ4loopE13currentMicros+0x3>
     bd2:	6a e4       	ldi	r22, 0x4A	; 74
     bd4:	71 e0       	ldi	r23, 0x01	; 1
     bd6:	ce 01       	movw	r24, r28
     bd8:	07 96       	adiw	r24, 0x07	; 7
     bda:	0e 94 57 10 	call	0x20ae	; 0x20ae <_ZN6StringC1EPKc>
     bde:	be 01       	movw	r22, r28
     be0:	69 5f       	subi	r22, 0xF9	; 249
     be2:	7f 4f       	sbci	r23, 0xFF	; 255
     be4:	ce 01       	movw	r24, r28
     be6:	01 96       	adiw	r24, 0x01	; 1
     be8:	0e 94 83 10 	call	0x2106	; 0x2106 <_ZN6StringC1ERKS_>
     bec:	b7 01       	movw	r22, r14
     bee:	a6 01       	movw	r20, r12
     bf0:	ce 01       	movw	r24, r28
     bf2:	01 96       	adiw	r24, 0x01	; 1
     bf4:	0e 94 1c 11 	call	0x2238	; 0x2238 <_ZplRK15StringSumHelperm>
     bf8:	bc 01       	movw	r22, r24
     bfa:	85 e3       	ldi	r24, 0x35	; 53
     bfc:	92 e0       	ldi	r25, 0x02	; 2
     bfe:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN6StringaSERKS_>
     c02:	ce 01       	movw	r24, r28
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN6StringD1Ev>
     c0a:	ce 01       	movw	r24, r28
     c0c:	07 96       	adiw	r24, 0x07	; 7
     c0e:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN6StringD1Ev>
     c12:	c0 90 f8 01 	lds	r12, 0x01F8	; 0x8001f8 <_ZZ4loopE11deltaMillis>
     c16:	d0 90 f9 01 	lds	r13, 0x01F9	; 0x8001f9 <_ZZ4loopE11deltaMillis+0x1>
     c1a:	e0 90 fa 01 	lds	r14, 0x01FA	; 0x8001fa <_ZZ4loopE11deltaMillis+0x2>
     c1e:	f0 90 fb 01 	lds	r15, 0x01FB	; 0x8001fb <_ZZ4loopE11deltaMillis+0x3>
     c22:	6a e5       	ldi	r22, 0x5A	; 90
     c24:	71 e0       	ldi	r23, 0x01	; 1
     c26:	ce 01       	movw	r24, r28
     c28:	07 96       	adiw	r24, 0x07	; 7
     c2a:	0e 94 57 10 	call	0x20ae	; 0x20ae <_ZN6StringC1EPKc>
     c2e:	be 01       	movw	r22, r28
     c30:	69 5f       	subi	r22, 0xF9	; 249
     c32:	7f 4f       	sbci	r23, 0xFF	; 255
     c34:	ce 01       	movw	r24, r28
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	0e 94 83 10 	call	0x2106	; 0x2106 <_ZN6StringC1ERKS_>
     c3c:	b7 01       	movw	r22, r14
     c3e:	a6 01       	movw	r20, r12
     c40:	ce 01       	movw	r24, r28
     c42:	01 96       	adiw	r24, 0x01	; 1
     c44:	0e 94 1c 11 	call	0x2238	; 0x2238 <_ZplRK15StringSumHelperm>
     c48:	bc 01       	movw	r22, r24
     c4a:	8b e3       	ldi	r24, 0x3B	; 59
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN6StringaSERKS_>
     c52:	ce 01       	movw	r24, r28
     c54:	01 96       	adiw	r24, 0x01	; 1
     c56:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN6StringD1Ev>
     c5a:	ce 01       	movw	r24, r28
     c5c:	07 96       	adiw	r24, 0x07	; 7
     c5e:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN6StringD1Ev>
     c62:	c0 90 f0 01 	lds	r12, 0x01F0	; 0x8001f0 <__data_end>
     c66:	d0 90 f1 01 	lds	r13, 0x01F1	; 0x8001f1 <__data_end+0x1>
     c6a:	e0 90 f2 01 	lds	r14, 0x01F2	; 0x8001f2 <__data_end+0x2>
     c6e:	f0 90 f3 01 	lds	r15, 0x01F3	; 0x8001f3 <__data_end+0x3>
     c72:	68 e6       	ldi	r22, 0x68	; 104
     c74:	71 e0       	ldi	r23, 0x01	; 1
     c76:	ce 01       	movw	r24, r28
     c78:	07 96       	adiw	r24, 0x07	; 7
     c7a:	0e 94 57 10 	call	0x20ae	; 0x20ae <_ZN6StringC1EPKc>
     c7e:	be 01       	movw	r22, r28
     c80:	69 5f       	subi	r22, 0xF9	; 249
     c82:	7f 4f       	sbci	r23, 0xFF	; 255
     c84:	ce 01       	movw	r24, r28
     c86:	01 96       	adiw	r24, 0x01	; 1
     c88:	0e 94 83 10 	call	0x2106	; 0x2106 <_ZN6StringC1ERKS_>
     c8c:	b7 01       	movw	r22, r14
     c8e:	a6 01       	movw	r20, r12
     c90:	ce 01       	movw	r24, r28
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	0e 94 1c 11 	call	0x2238	; 0x2238 <_ZplRK15StringSumHelperm>
     c98:	bc 01       	movw	r22, r24
     c9a:	81 e4       	ldi	r24, 0x41	; 65
     c9c:	92 e0       	ldi	r25, 0x02	; 2
     c9e:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN6StringaSERKS_>
     ca2:	ce 01       	movw	r24, r28
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN6StringD1Ev>
     caa:	ce 01       	movw	r24, r28
     cac:	07 96       	adiw	r24, 0x07	; 7
     cae:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN6StringD1Ev>
     cb2:	86 e7       	ldi	r24, 0x76	; 118
     cb4:	92 e0       	ldi	r25, 0x02	; 2
     cb6:	0e 94 ad 08 	call	0x115a	; 0x115a <_ZN19SmoothedAnalogInput7rollingEv>
     cba:	6b 01       	movw	r12, r22
     cbc:	7c 01       	movw	r14, r24
     cbe:	66 e7       	ldi	r22, 0x76	; 118
     cc0:	71 e0       	ldi	r23, 0x01	; 1
     cc2:	ce 01       	movw	r24, r28
     cc4:	07 96       	adiw	r24, 0x07	; 7
     cc6:	0e 94 57 10 	call	0x20ae	; 0x20ae <_ZN6StringC1EPKc>
     cca:	be 01       	movw	r22, r28
     ccc:	69 5f       	subi	r22, 0xF9	; 249
     cce:	7f 4f       	sbci	r23, 0xFF	; 255
     cd0:	ce 01       	movw	r24, r28
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	0e 94 83 10 	call	0x2106	; 0x2106 <_ZN6StringC1ERKS_>
     cd8:	b7 01       	movw	r22, r14
     cda:	a6 01       	movw	r20, r12
     cdc:	ce 01       	movw	r24, r28
     cde:	01 96       	adiw	r24, 0x01	; 1
     ce0:	0e 94 2a 11 	call	0x2254	; 0x2254 <_ZplRK15StringSumHelperf>
     ce4:	bc 01       	movw	r22, r24
     ce6:	87 e4       	ldi	r24, 0x47	; 71
     ce8:	92 e0       	ldi	r25, 0x02	; 2
     cea:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN6StringaSERKS_>
     cee:	ce 01       	movw	r24, r28
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN6StringD1Ev>
     cf6:	ce 01       	movw	r24, r28
     cf8:	07 96       	adiw	r24, 0x07	; 7
     cfa:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN6StringD1Ev>
     cfe:	8f e5       	ldi	r24, 0x5F	; 95
     d00:	92 e0       	ldi	r25, 0x02	; 2
     d02:	0e 94 ad 08 	call	0x115a	; 0x115a <_ZN19SmoothedAnalogInput7rollingEv>
     d06:	6b 01       	movw	r12, r22
     d08:	7c 01       	movw	r14, r24
     d0a:	68 e8       	ldi	r22, 0x88	; 136
     d0c:	71 e0       	ldi	r23, 0x01	; 1
     d0e:	ce 01       	movw	r24, r28
     d10:	07 96       	adiw	r24, 0x07	; 7
     d12:	0e 94 57 10 	call	0x20ae	; 0x20ae <_ZN6StringC1EPKc>
     d16:	be 01       	movw	r22, r28
     d18:	69 5f       	subi	r22, 0xF9	; 249
     d1a:	7f 4f       	sbci	r23, 0xFF	; 255
     d1c:	ce 01       	movw	r24, r28
     d1e:	01 96       	adiw	r24, 0x01	; 1
     d20:	0e 94 83 10 	call	0x2106	; 0x2106 <_ZN6StringC1ERKS_>
     d24:	b7 01       	movw	r22, r14
     d26:	a6 01       	movw	r20, r12
     d28:	ce 01       	movw	r24, r28
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	0e 94 2a 11 	call	0x2254	; 0x2254 <_ZplRK15StringSumHelperf>
     d30:	bc 01       	movw	r22, r24
     d32:	8d e4       	ldi	r24, 0x4D	; 77
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN6StringaSERKS_>
     d3a:	ce 01       	movw	r24, r28
     d3c:	01 96       	adiw	r24, 0x01	; 1
     d3e:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN6StringD1Ev>
     d42:	ce 01       	movw	r24, r28
     d44:	07 96       	adiw	r24, 0x07	; 7
     d46:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN6StringD1Ev>
     d4a:	c0 90 0c 02 	lds	r12, 0x020C	; 0x80020c <pulseCounter>
     d4e:	d0 90 0d 02 	lds	r13, 0x020D	; 0x80020d <pulseCounter+0x1>
     d52:	e0 90 0e 02 	lds	r14, 0x020E	; 0x80020e <pulseCounter+0x2>
     d56:	f0 90 0f 02 	lds	r15, 0x020F	; 0x80020f <pulseCounter+0x3>
     d5a:	6f e9       	ldi	r22, 0x9F	; 159
     d5c:	71 e0       	ldi	r23, 0x01	; 1
     d5e:	ce 01       	movw	r24, r28
     d60:	07 96       	adiw	r24, 0x07	; 7
     d62:	0e 94 57 10 	call	0x20ae	; 0x20ae <_ZN6StringC1EPKc>
     d66:	be 01       	movw	r22, r28
     d68:	69 5f       	subi	r22, 0xF9	; 249
     d6a:	7f 4f       	sbci	r23, 0xFF	; 255
     d6c:	ce 01       	movw	r24, r28
     d6e:	01 96       	adiw	r24, 0x01	; 1
     d70:	0e 94 83 10 	call	0x2106	; 0x2106 <_ZN6StringC1ERKS_>
     d74:	b7 01       	movw	r22, r14
     d76:	a6 01       	movw	r20, r12
     d78:	ce 01       	movw	r24, r28
     d7a:	01 96       	adiw	r24, 0x01	; 1
     d7c:	0e 94 1c 11 	call	0x2238	; 0x2238 <_ZplRK15StringSumHelperm>
     d80:	bc 01       	movw	r22, r24
     d82:	83 e5       	ldi	r24, 0x53	; 83
     d84:	92 e0       	ldi	r25, 0x02	; 2
     d86:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN6StringaSERKS_>
     d8a:	ce 01       	movw	r24, r28
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN6StringD1Ev>
     d92:	ce 01       	movw	r24, r28
     d94:	07 96       	adiw	r24, 0x07	; 7
     d96:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN6StringD1Ev>
     d9a:	c0 90 08 02 	lds	r12, 0x0208	; 0x800208 <lastPulseTime>
     d9e:	d0 90 09 02 	lds	r13, 0x0209	; 0x800209 <lastPulseTime+0x1>
     da2:	e0 90 0a 02 	lds	r14, 0x020A	; 0x80020a <lastPulseTime+0x2>
     da6:	f0 90 0b 02 	lds	r15, 0x020B	; 0x80020b <lastPulseTime+0x3>
     daa:	6e ea       	ldi	r22, 0xAE	; 174
     dac:	71 e0       	ldi	r23, 0x01	; 1
     dae:	ce 01       	movw	r24, r28
     db0:	07 96       	adiw	r24, 0x07	; 7
     db2:	0e 94 57 10 	call	0x20ae	; 0x20ae <_ZN6StringC1EPKc>
     db6:	be 01       	movw	r22, r28
     db8:	69 5f       	subi	r22, 0xF9	; 249
     dba:	7f 4f       	sbci	r23, 0xFF	; 255
     dbc:	ce 01       	movw	r24, r28
     dbe:	01 96       	adiw	r24, 0x01	; 1
     dc0:	0e 94 83 10 	call	0x2106	; 0x2106 <_ZN6StringC1ERKS_>
     dc4:	b7 01       	movw	r22, r14
     dc6:	a6 01       	movw	r20, r12
     dc8:	ce 01       	movw	r24, r28
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	0e 94 1c 11 	call	0x2238	; 0x2238 <_ZplRK15StringSumHelperm>
     dd0:	bc 01       	movw	r22, r24
     dd2:	89 e5       	ldi	r24, 0x59	; 89
     dd4:	92 e0       	ldi	r25, 0x02	; 2
     dd6:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN6StringaSERKS_>
     dda:	ce 01       	movw	r24, r28
     ddc:	01 96       	adiw	r24, 0x01	; 1
     dde:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN6StringD1Ev>
     de2:	ce 01       	movw	r24, r28
     de4:	07 96       	adiw	r24, 0x07	; 7
     de6:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN6StringD1Ev>
     dea:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_Z14refreshDisplayv>
     dee:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_ZZ4loopE13currentMillis>
     df2:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <_ZZ4loopE13currentMillis+0x1>
     df6:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <_ZZ4loopE13currentMillis+0x2>
     dfa:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <_ZZ4loopE13currentMillis+0x3>
     dfe:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <_ZZ4loopE10lastMillis>
     e02:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <_ZZ4loopE10lastMillis+0x1>
     e06:	a0 93 fe 01 	sts	0x01FE, r26	; 0x8001fe <_ZZ4loopE10lastMillis+0x2>
     e0a:	b0 93 ff 01 	sts	0x01FF, r27	; 0x8001ff <_ZZ4loopE10lastMillis+0x3>
     e0e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZZ4loopE13currentMicros>
     e12:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZZ4loopE13currentMicros+0x1>
     e16:	a0 91 02 02 	lds	r26, 0x0202	; 0x800202 <_ZZ4loopE13currentMicros+0x2>
     e1a:	b0 91 03 02 	lds	r27, 0x0203	; 0x800203 <_ZZ4loopE13currentMicros+0x3>
     e1e:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <_ZZ4loopE10lastMicros>
     e22:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <_ZZ4loopE10lastMicros+0x1>
     e26:	a0 93 f6 01 	sts	0x01F6, r26	; 0x8001f6 <_ZZ4loopE10lastMicros+0x2>
     e2a:	b0 93 f7 01 	sts	0x01F7, r27	; 0x8001f7 <_ZZ4loopE10lastMicros+0x3>
     e2e:	2c 96       	adiw	r28, 0x0c	; 12
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	f8 94       	cli
     e34:	de bf       	out	0x3e, r29	; 62
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	cd bf       	out	0x3d, r28	; 61
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	1f 91       	pop	r17
     e40:	0f 91       	pop	r16
     e42:	ff 90       	pop	r15
     e44:	ef 90       	pop	r14
     e46:	df 90       	pop	r13
     e48:	cf 90       	pop	r12
     e4a:	08 95       	ret

00000e4c <_GLOBAL__sub_I_u8g>:
     e4c:	0f 93       	push	r16
     e4e:	1f 93       	push	r17
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     e54:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <u8g+0x3>
     e58:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <u8g+0x2>
    U8GLIB(u8g_dev_t *dev, uint8_t sck, uint8_t mosi, uint8_t cs, uint8_t a0, uint8_t reset) 
      { initSPI(dev, sck, mosi, cs, a0, reset); }
    U8GLIB(u8g_dev_t *dev, uint8_t cs, uint8_t a0, uint8_t reset) 
      { initHWSPI(dev, cs, a0, reset); }
    U8GLIB(u8g_dev_t *dev, uint8_t options) 
      { initI2C(dev, options); }
     e5c:	82 ec       	ldi	r24, 0xC2	; 194
     e5e:	91 e0       	ldi	r25, 0x01	; 1
     e60:	90 93 1e 03 	sts	0x031E, r25	; 0x80031e <u8g+0x1>
     e64:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <u8g>
     e68:	42 e1       	ldi	r20, 0x12	; 18
     e6a:	6b e0       	ldi	r22, 0x0B	; 11
     e6c:	71 e0       	ldi	r23, 0x01	; 1
     e6e:	8d e1       	ldi	r24, 0x1D	; 29
     e70:	93 e0       	ldi	r25, 0x03	; 3
     e72:	0e 94 38 11 	call	0x2270	; 0x2270 <_ZN6U8GLIB7initI2CEP10_u8g_dev_th>
      { }
    U8GLIB_SSD1306_128X64(uint8_t cs, uint8_t a0, uint8_t reset = U8G_PIN_NONE) 
      : U8GLIB(&u8g_dev_ssd1306_128x64_hw_spi, cs, a0, reset)
      { }
    U8GLIB_SSD1306_128X64(uint8_t options = U8G_I2C_OPT_NONE) 
      : U8GLIB(&u8g_dev_ssd1306_128x64_i2c, options)
     e76:	8a ec       	ldi	r24, 0xCA	; 202
     e78:	91 e0       	ldi	r25, 0x01	; 1
     e7a:	90 93 1e 03 	sts	0x031E, r25	; 0x80031e <u8g+0x1>
     e7e:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <u8g>
			 }
		};
				
		debugger_t()
		{
			numberOfWatchedItems = 0;
     e82:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <Debugger+0x1>
     e86:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <Debugger>
			timeOfLastDisplayRefresh = currentTime;
     e8a:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <currentTime>
     e8e:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <currentTime+0x1>
     e92:	a0 91 2d 02 	lds	r26, 0x022D	; 0x80022d <currentTime+0x2>
     e96:	b0 91 2e 02 	lds	r27, 0x022E	; 0x80022e <currentTime+0x3>
     e9a:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <Debugger+0x2>
     e9e:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <Debugger+0x3>
     ea2:	a0 93 91 02 	sts	0x0291, r26	; 0x800291 <Debugger+0x4>
     ea6:	b0 93 92 02 	sts	0x0292, r27	; 0x800292 <Debugger+0x5>
			displayRefreshInterval = 250;
     eaa:	8a ef       	ldi	r24, 0xFA	; 250
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	a0 e0       	ldi	r26, 0x00	; 0
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <Debugger+0xa>
     eb6:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <Debugger+0xb>
     eba:	a0 93 99 02 	sts	0x0299, r26	; 0x800299 <Debugger+0xc>
     ebe:	b0 93 9a 02 	sts	0x029A, r27	; 0x80029a <Debugger+0xd>
			formRedrawInterval = 5000;
     ec2:	88 e8       	ldi	r24, 0x88	; 136
     ec4:	93 e1       	ldi	r25, 0x13	; 19
     ec6:	a0 e0       	ldi	r26, 0x00	; 0
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <Debugger+0xe>
     ece:	90 93 9c 02 	sts	0x029C, r25	; 0x80029c <Debugger+0xf>
     ed2:	a0 93 9d 02 	sts	0x029D, r26	; 0x80029d <Debugger+0x10>
     ed6:	b0 93 9e 02 	sts	0x029E, r27	; 0x80029e <Debugger+0x11>
			formNeedsToBeRedrawn = true;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <Debugger+0x12>
const int pulseDuration_pin=A1;

//float throttleReading;
//float pulseDurationReading;

SmoothedAnalogInput throttleReading = 
     ee0:	2f e0       	ldi	r18, 0x0F	; 15
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	40 e0       	ldi	r20, 0x00	; 0
     ee6:	50 e0       	ldi	r21, 0x00	; 0
     ee8:	6e e0       	ldi	r22, 0x0E	; 14
     eea:	86 e7       	ldi	r24, 0x76	; 118
     eec:	92 e0       	ldi	r25, 0x02	; 2
     eee:	0e 94 b7 07 	call	0xf6e	; 0xf6e <_ZN19SmoothedAnalogInputC1Ehm>
	SmoothedAnalogInput(
		throttle_pin,	//pinNumber
		15				//bufferSize
	);

SmoothedAnalogInput pulseDurationReading =
     ef2:	2f e0       	ldi	r18, 0x0F	; 15
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	40 e0       	ldi	r20, 0x00	; 0
     ef8:	50 e0       	ldi	r21, 0x00	; 0
     efa:	6f e0       	ldi	r22, 0x0F	; 15
     efc:	8f e5       	ldi	r24, 0x5F	; 95
     efe:	92 e0       	ldi	r25, 0x02	; 2
     f00:	0e 94 b7 07 	call	0xf6e	; 0xf6e <_ZN19SmoothedAnalogInputC1Ehm>
     f04:	cf e2       	ldi	r28, 0x2F	; 47
     f06:	d2 e0       	ldi	r29, 0x02	; 2
     f08:	0f e5       	ldi	r16, 0x5F	; 95
     f0a:	12 e0       	ldi	r17, 0x02	; 2


const int numDisplayLines=8;
//const int displayLineLength=31;
//char displayLines[numDisplayLines][displayLineLength];
String displayLines[numDisplayLines];
     f0c:	60 ee       	ldi	r22, 0xE0	; 224
     f0e:	71 e0       	ldi	r23, 0x01	; 1
     f10:	ce 01       	movw	r24, r28
     f12:	0e 94 57 10 	call	0x20ae	; 0x20ae <_ZN6StringC1EPKc>
     f16:	26 96       	adiw	r28, 0x06	; 6
     f18:	0c 17       	cp	r16, r28
     f1a:	1d 07       	cpc	r17, r29
     f1c:	b9 f7       	brne	.-18     	; 0xf0c <_GLOBAL__sub_I_u8g+0xc0>
unsigned long currentTime=0;              //time in milliseconds //to be set at the beginning of each loop.
void refreshDisplay();

const int doImpulse_button_pin = 2;

Button doImpulse_button = 
     f1e:	04 e1       	ldi	r16, 0x14	; 20
     f20:	10 e0       	ldi	r17, 0x00	; 0
     f22:	21 e0       	ldi	r18, 0x01	; 1
     f24:	42 e0       	ldi	r20, 0x02	; 2
     f26:	62 e0       	ldi	r22, 0x02	; 2
     f28:	80 e1       	ldi	r24, 0x10	; 16
     f2a:	92 e0       	ldi	r25, 0x02	; 2
     f2c:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <_ZN6ButtonC1Ehhbi>
     break;
   }
   x++;
 }
 return returnValue;
}
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	08 95       	ret

00000f3a <_GLOBAL__sub_D_u8g>:
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	cf e5       	ldi	r28, 0x5F	; 95
     f40:	d2 e0       	ldi	r29, 0x02	; 2


const int numDisplayLines=8;
//const int displayLineLength=31;
//char displayLines[numDisplayLines][displayLineLength];
String displayLines[numDisplayLines];
     f42:	26 97       	sbiw	r28, 0x06	; 6
     f44:	ce 01       	movw	r24, r28
     f46:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN6StringD1Ev>
     f4a:	82 e0       	ldi	r24, 0x02	; 2
     f4c:	cf 32       	cpi	r28, 0x2F	; 47
     f4e:	d8 07       	cpc	r29, r24
     f50:	c1 f7       	brne	.-16     	; 0xf42 <_GLOBAL__sub_D_u8g+0x8>
        _store[i] = 0;
    }
}

template <class T> Average<T>::~Average() {
    free(_store);
     f52:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <pulseDurationReading+0x1>
     f56:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <pulseDurationReading+0x2>
     f5a:	0e 94 3f 1a 	call	0x347e	; 0x347e <free>
     f5e:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <throttleReading+0x1>
     f62:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <throttleReading+0x2>
     break;
   }
   x++;
 }
 return returnValue;
}
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	0c 94 3f 1a 	jmp	0x347e	; 0x347e <free>

00000f6e <_ZN19SmoothedAnalogInputC1Ehm>:
}

float SmoothedAnalogInput::value()
{
	return dataSet.mean();
}
     f6e:	cf 92       	push	r12
     f70:	df 92       	push	r13
     f72:	ef 92       	push	r14
     f74:	ff 92       	push	r15
     f76:	1f 93       	push	r17
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	ec 01       	movw	r28, r24
     f7e:	16 2f       	mov	r17, r22
     f80:	69 01       	movw	r12, r18
     f82:	7a 01       	movw	r14, r20
     f84:	2f 87       	std	Y+15, r18	; 0x0f
     f86:	38 8b       	std	Y+16, r19	; 0x10
     f88:	49 8b       	std	Y+17, r20	; 0x11
     f8a:	5a 8b       	std	Y+18, r21	; 0x12
     f8c:	1b 86       	std	Y+11, r1	; 0x0b
     f8e:	1c 86       	std	Y+12, r1	; 0x0c
     f90:	1d 86       	std	Y+13, r1	; 0x0d
     f92:	1e 86       	std	Y+14, r1	; 0x0e
     f94:	c9 01       	movw	r24, r18
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	0e 94 a7 19 	call	0x334e	; 0x334e <malloc>
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	9a 83       	std	Y+2, r25	; 0x02
     fa6:	1f 82       	std	Y+7, r1	; 0x07
     fa8:	18 86       	std	Y+8, r1	; 0x08
     faa:	19 86       	std	Y+9, r1	; 0x09
     fac:	1a 86       	std	Y+10, r1	; 0x0a
     fae:	1b 82       	std	Y+3, r1	; 0x03
     fb0:	1c 82       	std	Y+4, r1	; 0x04
     fb2:	1d 82       	std	Y+5, r1	; 0x05
     fb4:	1e 82       	std	Y+6, r1	; 0x06
     fb6:	fc 01       	movw	r30, r24
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	dc 01       	movw	r26, r24
     fbe:	c8 16       	cp	r12, r24
     fc0:	d9 06       	cpc	r13, r25
     fc2:	ea 06       	cpc	r14, r26
     fc4:	fb 06       	cpc	r15, r27
     fc6:	41 f0       	breq	.+16     	; 0xfd8 <_ZN19SmoothedAnalogInputC1Ehm+0x6a>
     fc8:	11 92       	st	Z+, r1
     fca:	11 92       	st	Z+, r1
     fcc:	11 92       	st	Z+, r1
     fce:	11 92       	st	Z+, r1
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	a1 1d       	adc	r26, r1
     fd4:	b1 1d       	adc	r27, r1
     fd6:	f3 cf       	rjmp	.-26     	; 0xfbe <_ZN19SmoothedAnalogInputC1Ehm+0x50>
     fd8:	18 83       	st	Y, r17
     fda:	cb 8a       	std	Y+19, r12	; 0x13
     fdc:	dc 8a       	std	Y+20, r13	; 0x14
     fde:	ed 8a       	std	Y+21, r14	; 0x15
     fe0:	fe 8a       	std	Y+22, r15	; 0x16
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	1f 91       	pop	r17
     fe8:	ff 90       	pop	r15
     fea:	ef 90       	pop	r14
     fec:	df 90       	pop	r13
     fee:	cf 90       	pop	r12
     ff0:	08 95       	ret

00000ff2 <_ZN19SmoothedAnalogInput7processEv>:

void SmoothedAnalogInput::process()
{
     ff2:	4f 92       	push	r4
     ff4:	5f 92       	push	r5
     ff6:	6f 92       	push	r6
     ff8:	7f 92       	push	r7
     ffa:	8f 92       	push	r8
     ffc:	9f 92       	push	r9
     ffe:	af 92       	push	r10
    1000:	bf 92       	push	r11
    1002:	cf 92       	push	r12
    1004:	df 92       	push	r13
    1006:	ef 92       	push	r14
    1008:	ff 92       	push	r15
    100a:	0f 93       	push	r16
    100c:	1f 93       	push	r17
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	ec 01       	movw	r28, r24
	dataSet.push(analogRead(pinNumber));
    1014:	88 81       	ld	r24, Y
    1016:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <analogRead>
    101a:	bc 01       	movw	r22, r24
    101c:	99 0f       	add	r25, r25
    101e:	88 0b       	sbc	r24, r24
    1020:	99 0b       	sbc	r25, r25
    1022:	0e 94 ad 09 	call	0x135a	; 0x135a <__floatsisf>
    1026:	2b 01       	movw	r4, r22
    1028:	3c 01       	movw	r6, r24
}

template <class T> void Average<T>::push(T entry) {
    if (_count < _size) {                                     // adding new values to array
    102a:	8b 85       	ldd	r24, Y+11	; 0x0b
    102c:	9c 85       	ldd	r25, Y+12	; 0x0c
    102e:	ad 85       	ldd	r26, Y+13	; 0x0d
    1030:	be 85       	ldd	r27, Y+14	; 0x0e
    1032:	8f 84       	ldd	r8, Y+15	; 0x0f
    1034:	98 88       	ldd	r9, Y+16	; 0x10
    1036:	a9 88       	ldd	r10, Y+17	; 0x11
    1038:	ba 88       	ldd	r11, Y+18	; 0x12
    103a:	09 81       	ldd	r16, Y+1	; 0x01
    103c:	1a 81       	ldd	r17, Y+2	; 0x02
    103e:	88 15       	cp	r24, r8
    1040:	99 05       	cpc	r25, r9
    1042:	aa 05       	cpc	r26, r10
    1044:	bb 05       	cpc	r27, r11
    1046:	40 f4       	brcc	.+16     	; 0x1058 <_ZN19SmoothedAnalogInput7processEv+0x66>
        _count++;                                             // count number of values in array
    1048:	01 96       	adiw	r24, 0x01	; 1
    104a:	a1 1d       	adc	r26, r1
    104c:	b1 1d       	adc	r27, r1
    104e:	8b 87       	std	Y+11, r24	; 0x0b
    1050:	9c 87       	std	Y+12, r25	; 0x0c
    1052:	ad 87       	std	Y+13, r26	; 0x0d
    1054:	be 87       	std	Y+14, r27	; 0x0e
    1056:	16 c0       	rjmp	.+44     	; 0x1084 <_ZN19SmoothedAnalogInput7processEv+0x92>
    }
    else {                                                    // overwriting old values
        _sum = _sum -_store[_position];                       // remove old value from _sum
    1058:	ef 81       	ldd	r30, Y+7	; 0x07
    105a:	f8 85       	ldd	r31, Y+8	; 0x08
    105c:	ee 0f       	add	r30, r30
    105e:	ff 1f       	adc	r31, r31
    1060:	ee 0f       	add	r30, r30
    1062:	ff 1f       	adc	r31, r31
    1064:	e0 0f       	add	r30, r16
    1066:	f1 1f       	adc	r31, r17
    1068:	20 81       	ld	r18, Z
    106a:	31 81       	ldd	r19, Z+1	; 0x01
    106c:	42 81       	ldd	r20, Z+2	; 0x02
    106e:	53 81       	ldd	r21, Z+3	; 0x03
    1070:	6b 81       	ldd	r22, Y+3	; 0x03
    1072:	7c 81       	ldd	r23, Y+4	; 0x04
    1074:	8d 81       	ldd	r24, Y+5	; 0x05
    1076:	9e 81       	ldd	r25, Y+6	; 0x06
    1078:	0e 94 cc 08 	call	0x1198	; 0x1198 <__subsf3>
    107c:	6b 83       	std	Y+3, r22	; 0x03
    107e:	7c 83       	std	Y+4, r23	; 0x04
    1080:	8d 83       	std	Y+5, r24	; 0x05
    1082:	9e 83       	std	Y+6, r25	; 0x06
    }
    _store[_position] = entry;                                // store new value in array
    1084:	cf 80       	ldd	r12, Y+7	; 0x07
    1086:	d8 84       	ldd	r13, Y+8	; 0x08
    1088:	e9 84       	ldd	r14, Y+9	; 0x09
    108a:	fa 84       	ldd	r15, Y+10	; 0x0a
    108c:	c6 01       	movw	r24, r12
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	f8 01       	movw	r30, r16
    1098:	e8 0f       	add	r30, r24
    109a:	f9 1f       	adc	r31, r25
    109c:	40 82       	st	Z, r4
    109e:	51 82       	std	Z+1, r5	; 0x01
    10a0:	62 82       	std	Z+2, r6	; 0x02
    10a2:	73 82       	std	Z+3, r7	; 0x03
    _sum += entry;                                            // add the new value to _sum
    10a4:	a3 01       	movw	r20, r6
    10a6:	92 01       	movw	r18, r4
    10a8:	6b 81       	ldd	r22, Y+3	; 0x03
    10aa:	7c 81       	ldd	r23, Y+4	; 0x04
    10ac:	8d 81       	ldd	r24, Y+5	; 0x05
    10ae:	9e 81       	ldd	r25, Y+6	; 0x06
    10b0:	0e 94 cd 08 	call	0x119a	; 0x119a <__addsf3>
    10b4:	6b 83       	std	Y+3, r22	; 0x03
    10b6:	7c 83       	std	Y+4, r23	; 0x04
    10b8:	8d 83       	std	Y+5, r24	; 0x05
    10ba:	9e 83       	std	Y+6, r25	; 0x06
    _position += 1;                                           // increment the position counter
    10bc:	8f ef       	ldi	r24, 0xFF	; 255
    10be:	c8 1a       	sub	r12, r24
    10c0:	d8 0a       	sbc	r13, r24
    10c2:	e8 0a       	sbc	r14, r24
    10c4:	f8 0a       	sbc	r15, r24
    if (_position >= _size) _position = 0;                    // loop the position counter
    10c6:	c8 14       	cp	r12, r8
    10c8:	d9 04       	cpc	r13, r9
    10ca:	ea 04       	cpc	r14, r10
    10cc:	fb 04       	cpc	r15, r11
    10ce:	28 f4       	brcc	.+10     	; 0x10da <_ZN19SmoothedAnalogInput7processEv+0xe8>
    else {                                                    // overwriting old values
        _sum = _sum -_store[_position];                       // remove old value from _sum
    }
    _store[_position] = entry;                                // store new value in array
    _sum += entry;                                            // add the new value to _sum
    _position += 1;                                           // increment the position counter
    10d0:	cf 82       	std	Y+7, r12	; 0x07
    10d2:	d8 86       	std	Y+8, r13	; 0x08
    10d4:	e9 86       	std	Y+9, r14	; 0x09
    10d6:	fa 86       	std	Y+10, r15	; 0x0a
    10d8:	04 c0       	rjmp	.+8      	; 0x10e2 <_ZN19SmoothedAnalogInput7processEv+0xf0>
    if (_position >= _size) _position = 0;                    // loop the position counter
    10da:	1f 82       	std	Y+7, r1	; 0x07
    10dc:	18 86       	std	Y+8, r1	; 0x08
    10de:	19 86       	std	Y+9, r1	; 0x09
    10e0:	1a 86       	std	Y+10, r1	; 0x0a
}
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	1f 91       	pop	r17
    10e8:	0f 91       	pop	r16
    10ea:	ff 90       	pop	r15
    10ec:	ef 90       	pop	r14
    10ee:	df 90       	pop	r13
    10f0:	cf 90       	pop	r12
    10f2:	bf 90       	pop	r11
    10f4:	af 90       	pop	r10
    10f6:	9f 90       	pop	r9
    10f8:	8f 90       	pop	r8
    10fa:	7f 90       	pop	r7
    10fc:	6f 90       	pop	r6
    10fe:	5f 90       	pop	r5
    1100:	4f 90       	pop	r4
    1102:	08 95       	ret

00001104 <_ZN19SmoothedAnalogInput4initEv>:
	this->pinNumber=pinNumber;
	this->bufferSize=bufferSize;
}

void SmoothedAnalogInput::init()
{
    1104:	cf 92       	push	r12
    1106:	df 92       	push	r13
    1108:	ef 92       	push	r14
    110a:	ff 92       	push	r15
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	ec 01       	movw	r28, r24
	pinMode(pinNumber, INPUT);
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	88 81       	ld	r24, Y
    1116:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <pinMode>
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	dc 01       	movw	r26, r24
    1120:	6c 01       	movw	r12, r24
    1122:	7d 01       	movw	r14, r26
    1124:	2f ef       	ldi	r18, 0xFF	; 255
    1126:	c2 1a       	sub	r12, r18
    1128:	d2 0a       	sbc	r13, r18
    112a:	e2 0a       	sbc	r14, r18
    112c:	f2 0a       	sbc	r15, r18
	for(int i=0;i<bufferSize;i++)
    112e:	4b 89       	ldd	r20, Y+19	; 0x13
    1130:	5c 89       	ldd	r21, Y+20	; 0x14
    1132:	6d 89       	ldd	r22, Y+21	; 0x15
    1134:	7e 89       	ldd	r23, Y+22	; 0x16
    1136:	84 17       	cp	r24, r20
    1138:	95 07       	cpc	r25, r21
    113a:	a6 07       	cpc	r26, r22
    113c:	b7 07       	cpc	r27, r23
    113e:	30 f4       	brcc	.+12     	; 0x114c <_ZN19SmoothedAnalogInput4initEv+0x48>
	{
		process();
    1140:	ce 01       	movw	r24, r28
    1142:	0e 94 f9 07 	call	0xff2	; 0xff2 <_ZN19SmoothedAnalogInput7processEv>
}

void SmoothedAnalogInput::init()
{
	pinMode(pinNumber, INPUT);
	for(int i=0;i<bufferSize;i++)
    1146:	d7 01       	movw	r26, r14
    1148:	c6 01       	movw	r24, r12
    114a:	ea cf       	rjmp	.-44     	; 0x1120 <_ZN19SmoothedAnalogInput4initEv+0x1c>
	{
		process();
	}
}
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	ff 90       	pop	r15
    1152:	ef 90       	pop	r14
    1154:	df 90       	pop	r13
    1156:	cf 90       	pop	r12
    1158:	08 95       	ret

0000115a <_ZN19SmoothedAnalogInput7rollingEv>:
{
	dataSet.push(analogRead(pinNumber));
}

float SmoothedAnalogInput::rolling()
{
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	ec 01       	movw	r28, r24
	process();
    1160:	0e 94 f9 07 	call	0xff2	; 0xff2 <_ZN19SmoothedAnalogInput7processEv>
    push(entry);
    return mean();
}

template <class T> float Average<T>::mean() {
    if (_count == 0) {
    1164:	6b 85       	ldd	r22, Y+11	; 0x0b
    1166:	7c 85       	ldd	r23, Y+12	; 0x0c
    1168:	8d 85       	ldd	r24, Y+13	; 0x0d
    116a:	9e 85       	ldd	r25, Y+14	; 0x0e
    116c:	61 15       	cp	r22, r1
    116e:	71 05       	cpc	r23, r1
    1170:	81 05       	cpc	r24, r1
    1172:	91 05       	cpc	r25, r1
    1174:	59 f0       	breq	.+22     	; 0x118c <_ZN19SmoothedAnalogInput7rollingEv+0x32>
        return 0;
    }
    return (float(_sum) / (float)_count);                     // mean calculation based on _sum
    1176:	0e 94 ab 09 	call	0x1356	; 0x1356 <__floatunsisf>
    117a:	9b 01       	movw	r18, r22
    117c:	ac 01       	movw	r20, r24
    117e:	6b 81       	ldd	r22, Y+3	; 0x03
    1180:	7c 81       	ldd	r23, Y+4	; 0x04
    1182:	8d 81       	ldd	r24, Y+5	; 0x05
    1184:	9e 81       	ldd	r25, Y+6	; 0x06
    1186:	0e 94 39 09 	call	0x1272	; 0x1272 <__divsf3>
    118a:	03 c0       	rjmp	.+6      	; 0x1192 <_ZN19SmoothedAnalogInput7rollingEv+0x38>
    return mean();
}

template <class T> float Average<T>::mean() {
    if (_count == 0) {
        return 0;
    118c:	60 e0       	ldi	r22, 0x00	; 0
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	cb 01       	movw	r24, r22
	return value();
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	08 95       	ret

00001198 <__subsf3>:
    1198:	50 58       	subi	r21, 0x80	; 128

0000119a <__addsf3>:
    119a:	bb 27       	eor	r27, r27
    119c:	aa 27       	eor	r26, r26
    119e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__addsf3x>
    11a2:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__fp_round>
    11a6:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__fp_pscA>
    11aa:	38 f0       	brcs	.+14     	; 0x11ba <__addsf3+0x20>
    11ac:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fp_pscB>
    11b0:	20 f0       	brcs	.+8      	; 0x11ba <__addsf3+0x20>
    11b2:	39 f4       	brne	.+14     	; 0x11c2 <__addsf3+0x28>
    11b4:	9f 3f       	cpi	r25, 0xFF	; 255
    11b6:	19 f4       	brne	.+6      	; 0x11be <__addsf3+0x24>
    11b8:	26 f4       	brtc	.+8      	; 0x11c2 <__addsf3+0x28>
    11ba:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_nan>
    11be:	0e f4       	brtc	.+2      	; 0x11c2 <__addsf3+0x28>
    11c0:	e0 95       	com	r30
    11c2:	e7 fb       	bst	r30, 7
    11c4:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__fp_inf>

000011c8 <__addsf3x>:
    11c8:	e9 2f       	mov	r30, r25
    11ca:	0e 94 10 0a 	call	0x1420	; 0x1420 <__fp_split3>
    11ce:	58 f3       	brcs	.-42     	; 0x11a6 <__addsf3+0xc>
    11d0:	ba 17       	cp	r27, r26
    11d2:	62 07       	cpc	r22, r18
    11d4:	73 07       	cpc	r23, r19
    11d6:	84 07       	cpc	r24, r20
    11d8:	95 07       	cpc	r25, r21
    11da:	20 f0       	brcs	.+8      	; 0x11e4 <__addsf3x+0x1c>
    11dc:	79 f4       	brne	.+30     	; 0x11fc <__addsf3x+0x34>
    11de:	a6 f5       	brtc	.+104    	; 0x1248 <__addsf3x+0x80>
    11e0:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__fp_zero>
    11e4:	0e f4       	brtc	.+2      	; 0x11e8 <__addsf3x+0x20>
    11e6:	e0 95       	com	r30
    11e8:	0b 2e       	mov	r0, r27
    11ea:	ba 2f       	mov	r27, r26
    11ec:	a0 2d       	mov	r26, r0
    11ee:	0b 01       	movw	r0, r22
    11f0:	b9 01       	movw	r22, r18
    11f2:	90 01       	movw	r18, r0
    11f4:	0c 01       	movw	r0, r24
    11f6:	ca 01       	movw	r24, r20
    11f8:	a0 01       	movw	r20, r0
    11fa:	11 24       	eor	r1, r1
    11fc:	ff 27       	eor	r31, r31
    11fe:	59 1b       	sub	r21, r25
    1200:	99 f0       	breq	.+38     	; 0x1228 <__addsf3x+0x60>
    1202:	59 3f       	cpi	r21, 0xF9	; 249
    1204:	50 f4       	brcc	.+20     	; 0x121a <__addsf3x+0x52>
    1206:	50 3e       	cpi	r21, 0xE0	; 224
    1208:	68 f1       	brcs	.+90     	; 0x1264 <__addsf3x+0x9c>
    120a:	1a 16       	cp	r1, r26
    120c:	f0 40       	sbci	r31, 0x00	; 0
    120e:	a2 2f       	mov	r26, r18
    1210:	23 2f       	mov	r18, r19
    1212:	34 2f       	mov	r19, r20
    1214:	44 27       	eor	r20, r20
    1216:	58 5f       	subi	r21, 0xF8	; 248
    1218:	f3 cf       	rjmp	.-26     	; 0x1200 <__addsf3x+0x38>
    121a:	46 95       	lsr	r20
    121c:	37 95       	ror	r19
    121e:	27 95       	ror	r18
    1220:	a7 95       	ror	r26
    1222:	f0 40       	sbci	r31, 0x00	; 0
    1224:	53 95       	inc	r21
    1226:	c9 f7       	brne	.-14     	; 0x121a <__addsf3x+0x52>
    1228:	7e f4       	brtc	.+30     	; 0x1248 <__addsf3x+0x80>
    122a:	1f 16       	cp	r1, r31
    122c:	ba 0b       	sbc	r27, r26
    122e:	62 0b       	sbc	r22, r18
    1230:	73 0b       	sbc	r23, r19
    1232:	84 0b       	sbc	r24, r20
    1234:	ba f0       	brmi	.+46     	; 0x1264 <__addsf3x+0x9c>
    1236:	91 50       	subi	r25, 0x01	; 1
    1238:	a1 f0       	breq	.+40     	; 0x1262 <__addsf3x+0x9a>
    123a:	ff 0f       	add	r31, r31
    123c:	bb 1f       	adc	r27, r27
    123e:	66 1f       	adc	r22, r22
    1240:	77 1f       	adc	r23, r23
    1242:	88 1f       	adc	r24, r24
    1244:	c2 f7       	brpl	.-16     	; 0x1236 <__addsf3x+0x6e>
    1246:	0e c0       	rjmp	.+28     	; 0x1264 <__addsf3x+0x9c>
    1248:	ba 0f       	add	r27, r26
    124a:	62 1f       	adc	r22, r18
    124c:	73 1f       	adc	r23, r19
    124e:	84 1f       	adc	r24, r20
    1250:	48 f4       	brcc	.+18     	; 0x1264 <__addsf3x+0x9c>
    1252:	87 95       	ror	r24
    1254:	77 95       	ror	r23
    1256:	67 95       	ror	r22
    1258:	b7 95       	ror	r27
    125a:	f7 95       	ror	r31
    125c:	9e 3f       	cpi	r25, 0xFE	; 254
    125e:	08 f0       	brcs	.+2      	; 0x1262 <__addsf3x+0x9a>
    1260:	b0 cf       	rjmp	.-160    	; 0x11c2 <__addsf3+0x28>
    1262:	93 95       	inc	r25
    1264:	88 0f       	add	r24, r24
    1266:	08 f0       	brcs	.+2      	; 0x126a <__addsf3x+0xa2>
    1268:	99 27       	eor	r25, r25
    126a:	ee 0f       	add	r30, r30
    126c:	97 95       	ror	r25
    126e:	87 95       	ror	r24
    1270:	08 95       	ret

00001272 <__divsf3>:
    1272:	0e 94 4d 09 	call	0x129a	; 0x129a <__divsf3x>
    1276:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__fp_round>
    127a:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fp_pscB>
    127e:	58 f0       	brcs	.+22     	; 0x1296 <__divsf3+0x24>
    1280:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__fp_pscA>
    1284:	40 f0       	brcs	.+16     	; 0x1296 <__divsf3+0x24>
    1286:	29 f4       	brne	.+10     	; 0x1292 <__divsf3+0x20>
    1288:	5f 3f       	cpi	r21, 0xFF	; 255
    128a:	29 f0       	breq	.+10     	; 0x1296 <__divsf3+0x24>
    128c:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__fp_inf>
    1290:	51 11       	cpse	r21, r1
    1292:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__fp_szero>
    1296:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_nan>

0000129a <__divsf3x>:
    129a:	0e 94 10 0a 	call	0x1420	; 0x1420 <__fp_split3>
    129e:	68 f3       	brcs	.-38     	; 0x127a <__divsf3+0x8>

000012a0 <__divsf3_pse>:
    12a0:	99 23       	and	r25, r25
    12a2:	b1 f3       	breq	.-20     	; 0x1290 <__divsf3+0x1e>
    12a4:	55 23       	and	r21, r21
    12a6:	91 f3       	breq	.-28     	; 0x128c <__divsf3+0x1a>
    12a8:	95 1b       	sub	r25, r21
    12aa:	55 0b       	sbc	r21, r21
    12ac:	bb 27       	eor	r27, r27
    12ae:	aa 27       	eor	r26, r26
    12b0:	62 17       	cp	r22, r18
    12b2:	73 07       	cpc	r23, r19
    12b4:	84 07       	cpc	r24, r20
    12b6:	38 f0       	brcs	.+14     	; 0x12c6 <__divsf3_pse+0x26>
    12b8:	9f 5f       	subi	r25, 0xFF	; 255
    12ba:	5f 4f       	sbci	r21, 0xFF	; 255
    12bc:	22 0f       	add	r18, r18
    12be:	33 1f       	adc	r19, r19
    12c0:	44 1f       	adc	r20, r20
    12c2:	aa 1f       	adc	r26, r26
    12c4:	a9 f3       	breq	.-22     	; 0x12b0 <__divsf3_pse+0x10>
    12c6:	35 d0       	rcall	.+106    	; 0x1332 <__divsf3_pse+0x92>
    12c8:	0e 2e       	mov	r0, r30
    12ca:	3a f0       	brmi	.+14     	; 0x12da <__divsf3_pse+0x3a>
    12cc:	e0 e8       	ldi	r30, 0x80	; 128
    12ce:	32 d0       	rcall	.+100    	; 0x1334 <__divsf3_pse+0x94>
    12d0:	91 50       	subi	r25, 0x01	; 1
    12d2:	50 40       	sbci	r21, 0x00	; 0
    12d4:	e6 95       	lsr	r30
    12d6:	00 1c       	adc	r0, r0
    12d8:	ca f7       	brpl	.-14     	; 0x12cc <__divsf3_pse+0x2c>
    12da:	2b d0       	rcall	.+86     	; 0x1332 <__divsf3_pse+0x92>
    12dc:	fe 2f       	mov	r31, r30
    12de:	29 d0       	rcall	.+82     	; 0x1332 <__divsf3_pse+0x92>
    12e0:	66 0f       	add	r22, r22
    12e2:	77 1f       	adc	r23, r23
    12e4:	88 1f       	adc	r24, r24
    12e6:	bb 1f       	adc	r27, r27
    12e8:	26 17       	cp	r18, r22
    12ea:	37 07       	cpc	r19, r23
    12ec:	48 07       	cpc	r20, r24
    12ee:	ab 07       	cpc	r26, r27
    12f0:	b0 e8       	ldi	r27, 0x80	; 128
    12f2:	09 f0       	breq	.+2      	; 0x12f6 <__divsf3_pse+0x56>
    12f4:	bb 0b       	sbc	r27, r27
    12f6:	80 2d       	mov	r24, r0
    12f8:	bf 01       	movw	r22, r30
    12fa:	ff 27       	eor	r31, r31
    12fc:	93 58       	subi	r25, 0x83	; 131
    12fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1300:	3a f0       	brmi	.+14     	; 0x1310 <__divsf3_pse+0x70>
    1302:	9e 3f       	cpi	r25, 0xFE	; 254
    1304:	51 05       	cpc	r21, r1
    1306:	78 f0       	brcs	.+30     	; 0x1326 <__divsf3_pse+0x86>
    1308:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__fp_inf>
    130c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__fp_szero>
    1310:	5f 3f       	cpi	r21, 0xFF	; 255
    1312:	e4 f3       	brlt	.-8      	; 0x130c <__divsf3_pse+0x6c>
    1314:	98 3e       	cpi	r25, 0xE8	; 232
    1316:	d4 f3       	brlt	.-12     	; 0x130c <__divsf3_pse+0x6c>
    1318:	86 95       	lsr	r24
    131a:	77 95       	ror	r23
    131c:	67 95       	ror	r22
    131e:	b7 95       	ror	r27
    1320:	f7 95       	ror	r31
    1322:	9f 5f       	subi	r25, 0xFF	; 255
    1324:	c9 f7       	brne	.-14     	; 0x1318 <__divsf3_pse+0x78>
    1326:	88 0f       	add	r24, r24
    1328:	91 1d       	adc	r25, r1
    132a:	96 95       	lsr	r25
    132c:	87 95       	ror	r24
    132e:	97 f9       	bld	r25, 7
    1330:	08 95       	ret
    1332:	e1 e0       	ldi	r30, 0x01	; 1
    1334:	66 0f       	add	r22, r22
    1336:	77 1f       	adc	r23, r23
    1338:	88 1f       	adc	r24, r24
    133a:	bb 1f       	adc	r27, r27
    133c:	62 17       	cp	r22, r18
    133e:	73 07       	cpc	r23, r19
    1340:	84 07       	cpc	r24, r20
    1342:	ba 07       	cpc	r27, r26
    1344:	20 f0       	brcs	.+8      	; 0x134e <__divsf3_pse+0xae>
    1346:	62 1b       	sub	r22, r18
    1348:	73 0b       	sbc	r23, r19
    134a:	84 0b       	sbc	r24, r20
    134c:	ba 0b       	sbc	r27, r26
    134e:	ee 1f       	adc	r30, r30
    1350:	88 f7       	brcc	.-30     	; 0x1334 <__divsf3_pse+0x94>
    1352:	e0 95       	com	r30
    1354:	08 95       	ret

00001356 <__floatunsisf>:
    1356:	e8 94       	clt
    1358:	09 c0       	rjmp	.+18     	; 0x136c <__floatsisf+0x12>

0000135a <__floatsisf>:
    135a:	97 fb       	bst	r25, 7
    135c:	3e f4       	brtc	.+14     	; 0x136c <__floatsisf+0x12>
    135e:	90 95       	com	r25
    1360:	80 95       	com	r24
    1362:	70 95       	com	r23
    1364:	61 95       	neg	r22
    1366:	7f 4f       	sbci	r23, 0xFF	; 255
    1368:	8f 4f       	sbci	r24, 0xFF	; 255
    136a:	9f 4f       	sbci	r25, 0xFF	; 255
    136c:	99 23       	and	r25, r25
    136e:	a9 f0       	breq	.+42     	; 0x139a <__floatsisf+0x40>
    1370:	f9 2f       	mov	r31, r25
    1372:	96 e9       	ldi	r25, 0x96	; 150
    1374:	bb 27       	eor	r27, r27
    1376:	93 95       	inc	r25
    1378:	f6 95       	lsr	r31
    137a:	87 95       	ror	r24
    137c:	77 95       	ror	r23
    137e:	67 95       	ror	r22
    1380:	b7 95       	ror	r27
    1382:	f1 11       	cpse	r31, r1
    1384:	f8 cf       	rjmp	.-16     	; 0x1376 <__floatsisf+0x1c>
    1386:	fa f4       	brpl	.+62     	; 0x13c6 <__floatsisf+0x6c>
    1388:	bb 0f       	add	r27, r27
    138a:	11 f4       	brne	.+4      	; 0x1390 <__floatsisf+0x36>
    138c:	60 ff       	sbrs	r22, 0
    138e:	1b c0       	rjmp	.+54     	; 0x13c6 <__floatsisf+0x6c>
    1390:	6f 5f       	subi	r22, 0xFF	; 255
    1392:	7f 4f       	sbci	r23, 0xFF	; 255
    1394:	8f 4f       	sbci	r24, 0xFF	; 255
    1396:	9f 4f       	sbci	r25, 0xFF	; 255
    1398:	16 c0       	rjmp	.+44     	; 0x13c6 <__floatsisf+0x6c>
    139a:	88 23       	and	r24, r24
    139c:	11 f0       	breq	.+4      	; 0x13a2 <__floatsisf+0x48>
    139e:	96 e9       	ldi	r25, 0x96	; 150
    13a0:	11 c0       	rjmp	.+34     	; 0x13c4 <__floatsisf+0x6a>
    13a2:	77 23       	and	r23, r23
    13a4:	21 f0       	breq	.+8      	; 0x13ae <__floatsisf+0x54>
    13a6:	9e e8       	ldi	r25, 0x8E	; 142
    13a8:	87 2f       	mov	r24, r23
    13aa:	76 2f       	mov	r23, r22
    13ac:	05 c0       	rjmp	.+10     	; 0x13b8 <__floatsisf+0x5e>
    13ae:	66 23       	and	r22, r22
    13b0:	71 f0       	breq	.+28     	; 0x13ce <__floatsisf+0x74>
    13b2:	96 e8       	ldi	r25, 0x86	; 134
    13b4:	86 2f       	mov	r24, r22
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	2a f0       	brmi	.+10     	; 0x13c6 <__floatsisf+0x6c>
    13bc:	9a 95       	dec	r25
    13be:	66 0f       	add	r22, r22
    13c0:	77 1f       	adc	r23, r23
    13c2:	88 1f       	adc	r24, r24
    13c4:	da f7       	brpl	.-10     	; 0x13bc <__floatsisf+0x62>
    13c6:	88 0f       	add	r24, r24
    13c8:	96 95       	lsr	r25
    13ca:	87 95       	ror	r24
    13cc:	97 f9       	bld	r25, 7
    13ce:	08 95       	ret

000013d0 <__fp_inf>:
    13d0:	97 f9       	bld	r25, 7
    13d2:	9f 67       	ori	r25, 0x7F	; 127
    13d4:	80 e8       	ldi	r24, 0x80	; 128
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	60 e0       	ldi	r22, 0x00	; 0
    13da:	08 95       	ret

000013dc <__fp_nan>:
    13dc:	9f ef       	ldi	r25, 0xFF	; 255
    13de:	80 ec       	ldi	r24, 0xC0	; 192
    13e0:	08 95       	ret

000013e2 <__fp_pscA>:
    13e2:	00 24       	eor	r0, r0
    13e4:	0a 94       	dec	r0
    13e6:	16 16       	cp	r1, r22
    13e8:	17 06       	cpc	r1, r23
    13ea:	18 06       	cpc	r1, r24
    13ec:	09 06       	cpc	r0, r25
    13ee:	08 95       	ret

000013f0 <__fp_pscB>:
    13f0:	00 24       	eor	r0, r0
    13f2:	0a 94       	dec	r0
    13f4:	12 16       	cp	r1, r18
    13f6:	13 06       	cpc	r1, r19
    13f8:	14 06       	cpc	r1, r20
    13fa:	05 06       	cpc	r0, r21
    13fc:	08 95       	ret

000013fe <__fp_round>:
    13fe:	09 2e       	mov	r0, r25
    1400:	03 94       	inc	r0
    1402:	00 0c       	add	r0, r0
    1404:	11 f4       	brne	.+4      	; 0x140a <__fp_round+0xc>
    1406:	88 23       	and	r24, r24
    1408:	52 f0       	brmi	.+20     	; 0x141e <__fp_round+0x20>
    140a:	bb 0f       	add	r27, r27
    140c:	40 f4       	brcc	.+16     	; 0x141e <__fp_round+0x20>
    140e:	bf 2b       	or	r27, r31
    1410:	11 f4       	brne	.+4      	; 0x1416 <__fp_round+0x18>
    1412:	60 ff       	sbrs	r22, 0
    1414:	04 c0       	rjmp	.+8      	; 0x141e <__fp_round+0x20>
    1416:	6f 5f       	subi	r22, 0xFF	; 255
    1418:	7f 4f       	sbci	r23, 0xFF	; 255
    141a:	8f 4f       	sbci	r24, 0xFF	; 255
    141c:	9f 4f       	sbci	r25, 0xFF	; 255
    141e:	08 95       	ret

00001420 <__fp_split3>:
    1420:	57 fd       	sbrc	r21, 7
    1422:	90 58       	subi	r25, 0x80	; 128
    1424:	44 0f       	add	r20, r20
    1426:	55 1f       	adc	r21, r21
    1428:	59 f0       	breq	.+22     	; 0x1440 <__fp_splitA+0x10>
    142a:	5f 3f       	cpi	r21, 0xFF	; 255
    142c:	71 f0       	breq	.+28     	; 0x144a <__fp_splitA+0x1a>
    142e:	47 95       	ror	r20

00001430 <__fp_splitA>:
    1430:	88 0f       	add	r24, r24
    1432:	97 fb       	bst	r25, 7
    1434:	99 1f       	adc	r25, r25
    1436:	61 f0       	breq	.+24     	; 0x1450 <__fp_splitA+0x20>
    1438:	9f 3f       	cpi	r25, 0xFF	; 255
    143a:	79 f0       	breq	.+30     	; 0x145a <__fp_splitA+0x2a>
    143c:	87 95       	ror	r24
    143e:	08 95       	ret
    1440:	12 16       	cp	r1, r18
    1442:	13 06       	cpc	r1, r19
    1444:	14 06       	cpc	r1, r20
    1446:	55 1f       	adc	r21, r21
    1448:	f2 cf       	rjmp	.-28     	; 0x142e <__fp_split3+0xe>
    144a:	46 95       	lsr	r20
    144c:	f1 df       	rcall	.-30     	; 0x1430 <__fp_splitA>
    144e:	08 c0       	rjmp	.+16     	; 0x1460 <__fp_splitA+0x30>
    1450:	16 16       	cp	r1, r22
    1452:	17 06       	cpc	r1, r23
    1454:	18 06       	cpc	r1, r24
    1456:	99 1f       	adc	r25, r25
    1458:	f1 cf       	rjmp	.-30     	; 0x143c <__fp_splitA+0xc>
    145a:	86 95       	lsr	r24
    145c:	71 05       	cpc	r23, r1
    145e:	61 05       	cpc	r22, r1
    1460:	08 94       	sec
    1462:	08 95       	ret

00001464 <__fp_zero>:
    1464:	e8 94       	clt

00001466 <__fp_szero>:
    1466:	bb 27       	eor	r27, r27
    1468:	66 27       	eor	r22, r22
    146a:	77 27       	eor	r23, r23
    146c:	cb 01       	movw	r24, r22
    146e:	97 f9       	bld	r25, 7
    1470:	08 95       	ret

00001472 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1472:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1474:	91 8d       	ldd	r25, Z+25	; 0x19
    1476:	22 8d       	ldd	r18, Z+26	; 0x1a
    1478:	89 2f       	mov	r24, r25
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	80 5c       	subi	r24, 0xC0	; 192
    147e:	9f 4f       	sbci	r25, 0xFF	; 255
    1480:	82 1b       	sub	r24, r18
    1482:	91 09       	sbc	r25, r1
}
    1484:	8f 73       	andi	r24, 0x3F	; 63
    1486:	99 27       	eor	r25, r25
    1488:	08 95       	ret

0000148a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    148a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    148c:	91 8d       	ldd	r25, Z+25	; 0x19
    148e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1490:	98 17       	cp	r25, r24
    1492:	31 f0       	breq	.+12     	; 0x14a0 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1494:	82 8d       	ldd	r24, Z+26	; 0x1a
    1496:	e8 0f       	add	r30, r24
    1498:	f1 1d       	adc	r31, r1
    149a:	85 8d       	ldd	r24, Z+29	; 0x1d
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    14a0:	8f ef       	ldi	r24, 0xFF	; 255
    14a2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    14a4:	08 95       	ret

000014a6 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    14a6:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    14a8:	91 8d       	ldd	r25, Z+25	; 0x19
    14aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    14ac:	98 17       	cp	r25, r24
    14ae:	61 f0       	breq	.+24     	; 0x14c8 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    14b0:	82 8d       	ldd	r24, Z+26	; 0x1a
    14b2:	df 01       	movw	r26, r30
    14b4:	a8 0f       	add	r26, r24
    14b6:	b1 1d       	adc	r27, r1
    14b8:	5d 96       	adiw	r26, 0x1d	; 29
    14ba:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    14bc:	92 8d       	ldd	r25, Z+26	; 0x1a
    14be:	9f 5f       	subi	r25, 0xFF	; 255
    14c0:	9f 73       	andi	r25, 0x3F	; 63
    14c2:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    14c8:	8f ef       	ldi	r24, 0xFF	; 255
    14ca:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    14cc:	08 95       	ret

000014ce <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    14ce:	8c eb       	ldi	r24, 0xBC	; 188
    14d0:	9b e0       	ldi	r25, 0x0B	; 11
    14d2:	89 2b       	or	r24, r25
    14d4:	49 f0       	breq	.+18     	; 0x14e8 <_Z14serialEventRunv+0x1a>
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	89 2b       	or	r24, r25
    14dc:	29 f0       	breq	.+10     	; 0x14e8 <_Z14serialEventRunv+0x1a>
    14de:	0e 94 bc 0b 	call	0x1778	; 0x1778 <_Z17Serial0_availablev>
    14e2:	81 11       	cpse	r24, r1
    14e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    14e8:	08 95       	ret

000014ea <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    14ea:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    14ec:	84 8d       	ldd	r24, Z+28	; 0x1c
    14ee:	df 01       	movw	r26, r30
    14f0:	a8 0f       	add	r26, r24
    14f2:	b1 1d       	adc	r27, r1
    14f4:	a3 5a       	subi	r26, 0xA3	; 163
    14f6:	bf 4f       	sbci	r27, 0xFF	; 255
    14f8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    14fa:	84 8d       	ldd	r24, Z+28	; 0x1c
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	01 96       	adiw	r24, 0x01	; 1
    1500:	8f 73       	andi	r24, 0x3F	; 63
    1502:	99 27       	eor	r25, r25
    1504:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1506:	a6 89       	ldd	r26, Z+22	; 0x16
    1508:	b7 89       	ldd	r27, Z+23	; 0x17
    150a:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    150c:	a0 89       	ldd	r26, Z+16	; 0x10
    150e:	b1 89       	ldd	r27, Z+17	; 0x11
    1510:	8c 91       	ld	r24, X
    1512:	80 64       	ori	r24, 0x40	; 64
    1514:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1516:	93 8d       	ldd	r25, Z+27	; 0x1b
    1518:	84 8d       	ldd	r24, Z+28	; 0x1c
    151a:	98 13       	cpse	r25, r24
    151c:	06 c0       	rjmp	.+12     	; 0x152a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    151e:	02 88       	ldd	r0, Z+18	; 0x12
    1520:	f3 89       	ldd	r31, Z+19	; 0x13
    1522:	e0 2d       	mov	r30, r0
    1524:	80 81       	ld	r24, Z
    1526:	8f 7d       	andi	r24, 0xDF	; 223
    1528:	80 83       	st	Z, r24
    152a:	08 95       	ret

0000152c <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    152c:	ef 92       	push	r14
    152e:	ff 92       	push	r15
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	ec 01       	movw	r28, r24
  _written = true;
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    153e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1540:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1542:	98 13       	cpse	r25, r24
    1544:	05 c0       	rjmp	.+10     	; 0x1550 <_ZN14HardwareSerial5writeEh+0x24>
    1546:	e8 89       	ldd	r30, Y+16	; 0x10
    1548:	f9 89       	ldd	r31, Y+17	; 0x11
    154a:	80 81       	ld	r24, Z
    154c:	85 fd       	sbrc	r24, 5
    154e:	24 c0       	rjmp	.+72     	; 0x1598 <_ZN14HardwareSerial5writeEh+0x6c>
    1550:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1552:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1554:	10 e0       	ldi	r17, 0x00	; 0
    1556:	0f 5f       	subi	r16, 0xFF	; 255
    1558:	1f 4f       	sbci	r17, 0xFF	; 255
    155a:	0f 73       	andi	r16, 0x3F	; 63
    155c:	11 27       	eor	r17, r17
    155e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1560:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1562:	e8 12       	cpse	r14, r24
    1564:	0c c0       	rjmp	.+24     	; 0x157e <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	07 fc       	sbrc	r0, 7
    156a:	fa cf       	rjmp	.-12     	; 0x1560 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    156c:	e8 89       	ldd	r30, Y+16	; 0x10
    156e:	f9 89       	ldd	r31, Y+17	; 0x11
    1570:	80 81       	ld	r24, Z
    1572:	85 ff       	sbrs	r24, 5
    1574:	f5 cf       	rjmp	.-22     	; 0x1560 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1576:	ce 01       	movw	r24, r28
    1578:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    157c:	f1 cf       	rjmp	.-30     	; 0x1560 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    157e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1580:	fe 01       	movw	r30, r28
    1582:	e8 0f       	add	r30, r24
    1584:	f1 1d       	adc	r31, r1
    1586:	e3 5a       	subi	r30, 0xA3	; 163
    1588:	ff 4f       	sbci	r31, 0xFF	; 255
    158a:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    158c:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    158e:	ea 89       	ldd	r30, Y+18	; 0x12
    1590:	fb 89       	ldd	r31, Y+19	; 0x13
    1592:	80 81       	ld	r24, Z
    1594:	80 62       	ori	r24, 0x20	; 32
    1596:	07 c0       	rjmp	.+14     	; 0x15a6 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1598:	ee 89       	ldd	r30, Y+22	; 0x16
    159a:	ff 89       	ldd	r31, Y+23	; 0x17
    159c:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    159e:	e8 89       	ldd	r30, Y+16	; 0x10
    15a0:	f9 89       	ldd	r31, Y+17	; 0x11
    15a2:	80 81       	ld	r24, Z
    15a4:	80 64       	ori	r24, 0x40	; 64
    15a6:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	1f 91       	pop	r17
    15b2:	0f 91       	pop	r16
    15b4:	ff 90       	pop	r15
    15b6:	ef 90       	pop	r14
    15b8:	08 95       	ret

000015ba <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    15c0:	88 8d       	ldd	r24, Y+24	; 0x18
    15c2:	88 23       	and	r24, r24
    15c4:	c9 f0       	breq	.+50     	; 0x15f8 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    15c6:	ea 89       	ldd	r30, Y+18	; 0x12
    15c8:	fb 89       	ldd	r31, Y+19	; 0x13
    15ca:	80 81       	ld	r24, Z
    15cc:	85 fd       	sbrc	r24, 5
    15ce:	05 c0       	rjmp	.+10     	; 0x15da <_ZN14HardwareSerial5flushEv+0x20>
    15d0:	a8 89       	ldd	r26, Y+16	; 0x10
    15d2:	b9 89       	ldd	r27, Y+17	; 0x11
    15d4:	8c 91       	ld	r24, X
    15d6:	86 fd       	sbrc	r24, 6
    15d8:	0f c0       	rjmp	.+30     	; 0x15f8 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	07 fc       	sbrc	r0, 7
    15de:	f5 cf       	rjmp	.-22     	; 0x15ca <_ZN14HardwareSerial5flushEv+0x10>
    15e0:	80 81       	ld	r24, Z
    15e2:	85 ff       	sbrs	r24, 5
    15e4:	f2 cf       	rjmp	.-28     	; 0x15ca <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    15e6:	a8 89       	ldd	r26, Y+16	; 0x10
    15e8:	b9 89       	ldd	r27, Y+17	; 0x11
    15ea:	8c 91       	ld	r24, X
    15ec:	85 ff       	sbrs	r24, 5
    15ee:	ed cf       	rjmp	.-38     	; 0x15ca <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    15f0:	ce 01       	movw	r24, r28
    15f2:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    15f6:	e7 cf       	rjmp	.-50     	; 0x15c6 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	08 95       	ret

000015fe <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    15fe:	cf 92       	push	r12
    1600:	df 92       	push	r13
    1602:	ef 92       	push	r14
    1604:	ff 92       	push	r15
    1606:	1f 93       	push	r17
    1608:	cf 93       	push	r28
    160a:	df 93       	push	r29
    160c:	ec 01       	movw	r28, r24
    160e:	6a 01       	movw	r12, r20
    1610:	7b 01       	movw	r14, r22
    1612:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1614:	e8 89       	ldd	r30, Y+16	; 0x10
    1616:	f9 89       	ldd	r31, Y+17	; 0x11
    1618:	82 e0       	ldi	r24, 0x02	; 2
    161a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    161c:	41 15       	cp	r20, r1
    161e:	51 4e       	sbci	r21, 0xE1	; 225
    1620:	61 05       	cpc	r22, r1
    1622:	71 05       	cpc	r23, r1
    1624:	b1 f0       	breq	.+44     	; 0x1652 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1626:	60 e0       	ldi	r22, 0x00	; 0
    1628:	79 e0       	ldi	r23, 0x09	; 9
    162a:	8d e3       	ldi	r24, 0x3D	; 61
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	a7 01       	movw	r20, r14
    1630:	96 01       	movw	r18, r12
    1632:	0e 94 5f 19 	call	0x32be	; 0x32be <__udivmodsi4>
    1636:	da 01       	movw	r26, r20
    1638:	c9 01       	movw	r24, r18
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	a1 09       	sbc	r26, r1
    163e:	b1 09       	sbc	r27, r1
    1640:	b6 95       	lsr	r27
    1642:	a7 95       	ror	r26
    1644:	97 95       	ror	r25
    1646:	87 95       	ror	r24
    1648:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    164a:	21 15       	cp	r18, r1
    164c:	80 e1       	ldi	r24, 0x10	; 16
    164e:	38 07       	cpc	r19, r24
    1650:	a8 f0       	brcs	.+42     	; 0x167c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1652:	e8 89       	ldd	r30, Y+16	; 0x10
    1654:	f9 89       	ldd	r31, Y+17	; 0x11
    1656:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1658:	60 e8       	ldi	r22, 0x80	; 128
    165a:	74 e8       	ldi	r23, 0x84	; 132
    165c:	8e e1       	ldi	r24, 0x1E	; 30
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	a7 01       	movw	r20, r14
    1662:	96 01       	movw	r18, r12
    1664:	0e 94 5f 19 	call	0x32be	; 0x32be <__udivmodsi4>
    1668:	da 01       	movw	r26, r20
    166a:	c9 01       	movw	r24, r18
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	a1 09       	sbc	r26, r1
    1670:	b1 09       	sbc	r27, r1
    1672:	b6 95       	lsr	r27
    1674:	a7 95       	ror	r26
    1676:	97 95       	ror	r25
    1678:	87 95       	ror	r24
    167a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    167c:	ec 85       	ldd	r30, Y+12	; 0x0c
    167e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1680:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1682:	ee 85       	ldd	r30, Y+14	; 0x0e
    1684:	ff 85       	ldd	r31, Y+15	; 0x0f
    1686:	20 83       	st	Z, r18

  _written = false;
    1688:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    168a:	ec 89       	ldd	r30, Y+20	; 0x14
    168c:	fd 89       	ldd	r31, Y+21	; 0x15
    168e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1690:	ea 89       	ldd	r30, Y+18	; 0x12
    1692:	fb 89       	ldd	r31, Y+19	; 0x13
    1694:	80 81       	ld	r24, Z
    1696:	80 61       	ori	r24, 0x10	; 16
    1698:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    169a:	ea 89       	ldd	r30, Y+18	; 0x12
    169c:	fb 89       	ldd	r31, Y+19	; 0x13
    169e:	80 81       	ld	r24, Z
    16a0:	88 60       	ori	r24, 0x08	; 8
    16a2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    16a4:	ea 89       	ldd	r30, Y+18	; 0x12
    16a6:	fb 89       	ldd	r31, Y+19	; 0x13
    16a8:	80 81       	ld	r24, Z
    16aa:	80 68       	ori	r24, 0x80	; 128
    16ac:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    16ae:	ea 89       	ldd	r30, Y+18	; 0x12
    16b0:	fb 89       	ldd	r31, Y+19	; 0x13
    16b2:	80 81       	ld	r24, Z
    16b4:	8f 7d       	andi	r24, 0xDF	; 223
    16b6:	80 83       	st	Z, r24
}
    16b8:	df 91       	pop	r29
    16ba:	cf 91       	pop	r28
    16bc:	1f 91       	pop	r17
    16be:	ff 90       	pop	r15
    16c0:	ef 90       	pop	r14
    16c2:	df 90       	pop	r13
    16c4:	cf 90       	pop	r12
    16c6:	08 95       	ret

000016c8 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    16c8:	1f 92       	push	r1
    16ca:	0f 92       	push	r0
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	0f 92       	push	r0
    16d0:	11 24       	eor	r1, r1
    16d2:	2f 93       	push	r18
    16d4:	8f 93       	push	r24
    16d6:	9f 93       	push	r25
    16d8:	ef 93       	push	r30
    16da:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    16dc:	e0 91 6b 03 	lds	r30, 0x036B	; 0x80036b <Serial+0x10>
    16e0:	f0 91 6c 03 	lds	r31, 0x036C	; 0x80036c <Serial+0x11>
    16e4:	80 81       	ld	r24, Z
    16e6:	e0 91 71 03 	lds	r30, 0x0371	; 0x800371 <Serial+0x16>
    16ea:	f0 91 72 03 	lds	r31, 0x0372	; 0x800372 <Serial+0x17>
    16ee:	82 fd       	sbrc	r24, 2
    16f0:	12 c0       	rjmp	.+36     	; 0x1716 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    16f2:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    16f4:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <Serial+0x19>
    16f8:	8f 5f       	subi	r24, 0xFF	; 255
    16fa:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    16fc:	20 91 75 03 	lds	r18, 0x0375	; 0x800375 <Serial+0x1a>
    1700:	82 17       	cp	r24, r18
    1702:	51 f0       	breq	.+20     	; 0x1718 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1704:	e0 91 74 03 	lds	r30, 0x0374	; 0x800374 <Serial+0x19>
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	e5 5a       	subi	r30, 0xA5	; 165
    170c:	fc 4f       	sbci	r31, 0xFC	; 252
    170e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1710:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <Serial+0x19>
    1714:	01 c0       	rjmp	.+2      	; 0x1718 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1716:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1718:	ff 91       	pop	r31
    171a:	ef 91       	pop	r30
    171c:	9f 91       	pop	r25
    171e:	8f 91       	pop	r24
    1720:	2f 91       	pop	r18
    1722:	0f 90       	pop	r0
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	0f 90       	pop	r0
    1728:	1f 90       	pop	r1
    172a:	18 95       	reti

0000172c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    172c:	1f 92       	push	r1
    172e:	0f 92       	push	r0
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	0f 92       	push	r0
    1734:	11 24       	eor	r1, r1
    1736:	2f 93       	push	r18
    1738:	3f 93       	push	r19
    173a:	4f 93       	push	r20
    173c:	5f 93       	push	r21
    173e:	6f 93       	push	r22
    1740:	7f 93       	push	r23
    1742:	8f 93       	push	r24
    1744:	9f 93       	push	r25
    1746:	af 93       	push	r26
    1748:	bf 93       	push	r27
    174a:	ef 93       	push	r30
    174c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    174e:	8b e5       	ldi	r24, 0x5B	; 91
    1750:	93 e0       	ldi	r25, 0x03	; 3
    1752:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1756:	ff 91       	pop	r31
    1758:	ef 91       	pop	r30
    175a:	bf 91       	pop	r27
    175c:	af 91       	pop	r26
    175e:	9f 91       	pop	r25
    1760:	8f 91       	pop	r24
    1762:	7f 91       	pop	r23
    1764:	6f 91       	pop	r22
    1766:	5f 91       	pop	r21
    1768:	4f 91       	pop	r20
    176a:	3f 91       	pop	r19
    176c:	2f 91       	pop	r18
    176e:	0f 90       	pop	r0
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	0f 90       	pop	r0
    1774:	1f 90       	pop	r1
    1776:	18 95       	reti

00001778 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1778:	8b e5       	ldi	r24, 0x5B	; 91
    177a:	93 e0       	ldi	r25, 0x03	; 3
    177c:	0e 94 39 0a 	call	0x1472	; 0x1472 <_ZN14HardwareSerial9availableEv>
    1780:	21 e0       	ldi	r18, 0x01	; 1
    1782:	89 2b       	or	r24, r25
    1784:	09 f4       	brne	.+2      	; 0x1788 <_Z17Serial0_availablev+0x10>
    1786:	20 e0       	ldi	r18, 0x00	; 0
}
    1788:	82 2f       	mov	r24, r18
    178a:	08 95       	ret

0000178c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    178c:	eb e5       	ldi	r30, 0x5B	; 91
    178e:	f3 e0       	ldi	r31, 0x03	; 3
    1790:	13 82       	std	Z+3, r1	; 0x03
    1792:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1794:	88 ee       	ldi	r24, 0xE8	; 232
    1796:	93 e0       	ldi	r25, 0x03	; 3
    1798:	a0 e0       	ldi	r26, 0x00	; 0
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	84 83       	std	Z+4, r24	; 0x04
    179e:	95 83       	std	Z+5, r25	; 0x05
    17a0:	a6 83       	std	Z+6, r26	; 0x06
    17a2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    17a4:	82 ed       	ldi	r24, 0xD2	; 210
    17a6:	91 e0       	ldi	r25, 0x01	; 1
    17a8:	91 83       	std	Z+1, r25	; 0x01
    17aa:	80 83       	st	Z, r24
    17ac:	85 ec       	ldi	r24, 0xC5	; 197
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	95 87       	std	Z+13, r25	; 0x0d
    17b2:	84 87       	std	Z+12, r24	; 0x0c
    17b4:	84 ec       	ldi	r24, 0xC4	; 196
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	97 87       	std	Z+15, r25	; 0x0f
    17ba:	86 87       	std	Z+14, r24	; 0x0e
    17bc:	80 ec       	ldi	r24, 0xC0	; 192
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	91 8b       	std	Z+17, r25	; 0x11
    17c2:	80 8b       	std	Z+16, r24	; 0x10
    17c4:	81 ec       	ldi	r24, 0xC1	; 193
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	93 8b       	std	Z+19, r25	; 0x13
    17ca:	82 8b       	std	Z+18, r24	; 0x12
    17cc:	82 ec       	ldi	r24, 0xC2	; 194
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	95 8b       	std	Z+21, r25	; 0x15
    17d2:	84 8b       	std	Z+20, r24	; 0x14
    17d4:	86 ec       	ldi	r24, 0xC6	; 198
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	97 8b       	std	Z+23, r25	; 0x17
    17da:	86 8b       	std	Z+22, r24	; 0x16
    17dc:	11 8e       	std	Z+25, r1	; 0x19
    17de:	12 8e       	std	Z+26, r1	; 0x1a
    17e0:	13 8e       	std	Z+27, r1	; 0x1b
    17e2:	14 8e       	std	Z+28, r1	; 0x1c
    17e4:	08 95       	ret

000017e6 <initVariant>:
    17e6:	08 95       	ret

000017e8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    17e8:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <init>

	initVariant();
    17ec:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    17f0:	0e 94 a4 04 	call	0x948	; 0x948 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    17f4:	c7 e6       	ldi	r28, 0x67	; 103
    17f6:	da e0       	ldi	r29, 0x0A	; 10
#endif
	
	setup();
    
	for (;;) {
		loop();
    17f8:	0e 94 14 05 	call	0xa28	; 0xa28 <loop>
		if (serialEventRun) serialEventRun();
    17fc:	20 97       	sbiw	r28, 0x00	; 0
    17fe:	e1 f3       	breq	.-8      	; 0x17f8 <main+0x10>
    1800:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_Z14serialEventRunv>
    1804:	f9 cf       	rjmp	.-14     	; 0x17f8 <main+0x10>

00001806 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1806:	cf 92       	push	r12
    1808:	df 92       	push	r13
    180a:	ef 92       	push	r14
    180c:	ff 92       	push	r15
    180e:	0f 93       	push	r16
    1810:	1f 93       	push	r17
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	6c 01       	movw	r12, r24
    1818:	7a 01       	movw	r14, r20
    181a:	8b 01       	movw	r16, r22
    181c:	c0 e0       	ldi	r28, 0x00	; 0
    181e:	d0 e0       	ldi	r29, 0x00	; 0
    1820:	ce 15       	cp	r28, r14
    1822:	df 05       	cpc	r29, r15
    1824:	81 f0       	breq	.+32     	; 0x1846 <_ZN5Print5writeEPKhj+0x40>
    1826:	d8 01       	movw	r26, r16
    1828:	6d 91       	ld	r22, X+
    182a:	8d 01       	movw	r16, r26
    182c:	d6 01       	movw	r26, r12
    182e:	ed 91       	ld	r30, X+
    1830:	fc 91       	ld	r31, X
    1832:	01 90       	ld	r0, Z+
    1834:	f0 81       	ld	r31, Z
    1836:	e0 2d       	mov	r30, r0
    1838:	c6 01       	movw	r24, r12
    183a:	09 95       	icall
    183c:	89 2b       	or	r24, r25
    183e:	11 f0       	breq	.+4      	; 0x1844 <_ZN5Print5writeEPKhj+0x3e>
    1840:	21 96       	adiw	r28, 0x01	; 1
    1842:	ee cf       	rjmp	.-36     	; 0x1820 <_ZN5Print5writeEPKhj+0x1a>
    1844:	7e 01       	movw	r14, r28
    1846:	c7 01       	movw	r24, r14
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	ff 90       	pop	r15
    1852:	ef 90       	pop	r14
    1854:	df 90       	pop	r13
    1856:	cf 90       	pop	r12
    1858:	08 95       	ret

0000185a <_ZN5Print5writeEPKc>:
    185a:	61 15       	cp	r22, r1
    185c:	71 05       	cpc	r23, r1
    185e:	79 f0       	breq	.+30     	; 0x187e <_ZN5Print5writeEPKc+0x24>
    1860:	fb 01       	movw	r30, r22
    1862:	01 90       	ld	r0, Z+
    1864:	00 20       	and	r0, r0
    1866:	e9 f7       	brne	.-6      	; 0x1862 <_ZN5Print5writeEPKc+0x8>
    1868:	31 97       	sbiw	r30, 0x01	; 1
    186a:	af 01       	movw	r20, r30
    186c:	46 1b       	sub	r20, r22
    186e:	57 0b       	sbc	r21, r23
    1870:	dc 01       	movw	r26, r24
    1872:	ed 91       	ld	r30, X+
    1874:	fc 91       	ld	r31, X
    1876:	02 80       	ldd	r0, Z+2	; 0x02
    1878:	f3 81       	ldd	r31, Z+3	; 0x03
    187a:	e0 2d       	mov	r30, r0
    187c:	09 94       	ijmp
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	08 95       	ret

00001884 <_ZN5Print5printERK6String>:
    1884:	db 01       	movw	r26, r22
    1886:	14 96       	adiw	r26, 0x04	; 4
    1888:	4d 91       	ld	r20, X+
    188a:	5c 91       	ld	r21, X
    188c:	15 97       	sbiw	r26, 0x05	; 5
    188e:	6d 91       	ld	r22, X+
    1890:	7c 91       	ld	r23, X
    1892:	dc 01       	movw	r26, r24
    1894:	ed 91       	ld	r30, X+
    1896:	fc 91       	ld	r31, X
    1898:	02 80       	ldd	r0, Z+2	; 0x02
    189a:	f3 81       	ldd	r31, Z+3	; 0x03
    189c:	e0 2d       	mov	r30, r0
    189e:	09 94       	ijmp

000018a0 <_ZN5Print5printEPKc>:
    18a0:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <_ZN5Print5writeEPKc>

000018a4 <_ZN5Print5printEc>:
    18a4:	dc 01       	movw	r26, r24
    18a6:	ed 91       	ld	r30, X+
    18a8:	fc 91       	ld	r31, X
    18aa:	01 90       	ld	r0, Z+
    18ac:	f0 81       	ld	r31, Z
    18ae:	e0 2d       	mov	r30, r0
    18b0:	09 94       	ijmp

000018b2 <_ZN5Print11printNumberEmh>:
    18b2:	8f 92       	push	r8
    18b4:	9f 92       	push	r9
    18b6:	af 92       	push	r10
    18b8:	bf 92       	push	r11
    18ba:	ef 92       	push	r14
    18bc:	ff 92       	push	r15
    18be:	0f 93       	push	r16
    18c0:	1f 93       	push	r17
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	a1 97       	sbiw	r28, 0x21	; 33
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	f8 94       	cli
    18d0:	de bf       	out	0x3e, r29	; 62
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	cd bf       	out	0x3d, r28	; 61
    18d6:	7c 01       	movw	r14, r24
    18d8:	fa 01       	movw	r30, r20
    18da:	cb 01       	movw	r24, r22
    18dc:	19 a2       	std	Y+33, r1	; 0x21
    18de:	22 30       	cpi	r18, 0x02	; 2
    18e0:	08 f4       	brcc	.+2      	; 0x18e4 <_ZN5Print11printNumberEmh+0x32>
    18e2:	2a e0       	ldi	r18, 0x0A	; 10
    18e4:	8e 01       	movw	r16, r28
    18e6:	0f 5d       	subi	r16, 0xDF	; 223
    18e8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ea:	82 2e       	mov	r8, r18
    18ec:	91 2c       	mov	r9, r1
    18ee:	a1 2c       	mov	r10, r1
    18f0:	b1 2c       	mov	r11, r1
    18f2:	bf 01       	movw	r22, r30
    18f4:	a5 01       	movw	r20, r10
    18f6:	94 01       	movw	r18, r8
    18f8:	0e 94 5f 19 	call	0x32be	; 0x32be <__udivmodsi4>
    18fc:	f9 01       	movw	r30, r18
    18fe:	ca 01       	movw	r24, r20
    1900:	01 50       	subi	r16, 0x01	; 1
    1902:	11 09       	sbc	r17, r1
    1904:	6a 30       	cpi	r22, 0x0A	; 10
    1906:	10 f4       	brcc	.+4      	; 0x190c <_ZN5Print11printNumberEmh+0x5a>
    1908:	60 5d       	subi	r22, 0xD0	; 208
    190a:	01 c0       	rjmp	.+2      	; 0x190e <_ZN5Print11printNumberEmh+0x5c>
    190c:	69 5c       	subi	r22, 0xC9	; 201
    190e:	d8 01       	movw	r26, r16
    1910:	6c 93       	st	X, r22
    1912:	23 2b       	or	r18, r19
    1914:	24 2b       	or	r18, r20
    1916:	25 2b       	or	r18, r21
    1918:	61 f7       	brne	.-40     	; 0x18f2 <_ZN5Print11printNumberEmh+0x40>
    191a:	b8 01       	movw	r22, r16
    191c:	c7 01       	movw	r24, r14
    191e:	0e 94 2d 0c 	call	0x185a	; 0x185a <_ZN5Print5writeEPKc>
    1922:	a1 96       	adiw	r28, 0x21	; 33
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	1f 91       	pop	r17
    1934:	0f 91       	pop	r16
    1936:	ff 90       	pop	r15
    1938:	ef 90       	pop	r14
    193a:	bf 90       	pop	r11
    193c:	af 90       	pop	r10
    193e:	9f 90       	pop	r9
    1940:	8f 90       	pop	r8
    1942:	08 95       	ret

00001944 <_ZN5Print5printEmi>:
    1944:	21 15       	cp	r18, r1
    1946:	31 05       	cpc	r19, r1
    1948:	41 f4       	brne	.+16     	; 0x195a <_ZN5Print5printEmi+0x16>
    194a:	dc 01       	movw	r26, r24
    194c:	ed 91       	ld	r30, X+
    194e:	fc 91       	ld	r31, X
    1950:	01 90       	ld	r0, Z+
    1952:	f0 81       	ld	r31, Z
    1954:	e0 2d       	mov	r30, r0
    1956:	64 2f       	mov	r22, r20
    1958:	09 94       	ijmp
    195a:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <_ZN5Print11printNumberEmh>

0000195e <_ZN5Print5printEhi>:
    195e:	9a 01       	movw	r18, r20
    1960:	46 2f       	mov	r20, r22
    1962:	50 e0       	ldi	r21, 0x00	; 0
    1964:	60 e0       	ldi	r22, 0x00	; 0
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <_ZN5Print5printEmi>

0000196c <_ZN5Print5printEji>:
    196c:	9a 01       	movw	r18, r20
    196e:	ab 01       	movw	r20, r22
    1970:	60 e0       	ldi	r22, 0x00	; 0
    1972:	70 e0       	ldi	r23, 0x00	; 0
    1974:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <_ZN5Print5printEmi>

00001978 <_ZN5Print5printEli>:
    1978:	cf 92       	push	r12
    197a:	df 92       	push	r13
    197c:	ef 92       	push	r14
    197e:	ff 92       	push	r15
    1980:	0f 93       	push	r16
    1982:	1f 93       	push	r17
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	21 15       	cp	r18, r1
    198a:	31 05       	cpc	r19, r1
    198c:	81 f4       	brne	.+32     	; 0x19ae <_ZN5Print5printEli+0x36>
    198e:	dc 01       	movw	r26, r24
    1990:	ed 91       	ld	r30, X+
    1992:	fc 91       	ld	r31, X
    1994:	01 90       	ld	r0, Z+
    1996:	f0 81       	ld	r31, Z
    1998:	e0 2d       	mov	r30, r0
    199a:	64 2f       	mov	r22, r20
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	1f 91       	pop	r17
    19a2:	0f 91       	pop	r16
    19a4:	ff 90       	pop	r15
    19a6:	ef 90       	pop	r14
    19a8:	df 90       	pop	r13
    19aa:	cf 90       	pop	r12
    19ac:	09 94       	ijmp
    19ae:	2a 30       	cpi	r18, 0x0A	; 10
    19b0:	31 05       	cpc	r19, r1
    19b2:	01 f5       	brne	.+64     	; 0x19f4 <_ZN5Print5printEli+0x7c>
    19b4:	77 ff       	sbrs	r23, 7
    19b6:	1d c0       	rjmp	.+58     	; 0x19f2 <_ZN5Print5printEli+0x7a>
    19b8:	6a 01       	movw	r12, r20
    19ba:	7b 01       	movw	r14, r22
    19bc:	ec 01       	movw	r28, r24
    19be:	6d e2       	ldi	r22, 0x2D	; 45
    19c0:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <_ZN5Print5printEc>
    19c4:	8c 01       	movw	r16, r24
    19c6:	44 27       	eor	r20, r20
    19c8:	55 27       	eor	r21, r21
    19ca:	ba 01       	movw	r22, r20
    19cc:	4c 19       	sub	r20, r12
    19ce:	5d 09       	sbc	r21, r13
    19d0:	6e 09       	sbc	r22, r14
    19d2:	7f 09       	sbc	r23, r15
    19d4:	2a e0       	ldi	r18, 0x0A	; 10
    19d6:	ce 01       	movw	r24, r28
    19d8:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <_ZN5Print11printNumberEmh>
    19dc:	80 0f       	add	r24, r16
    19de:	91 1f       	adc	r25, r17
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	ff 90       	pop	r15
    19ea:	ef 90       	pop	r14
    19ec:	df 90       	pop	r13
    19ee:	cf 90       	pop	r12
    19f0:	08 95       	ret
    19f2:	2a e0       	ldi	r18, 0x0A	; 10
    19f4:	df 91       	pop	r29
    19f6:	cf 91       	pop	r28
    19f8:	1f 91       	pop	r17
    19fa:	0f 91       	pop	r16
    19fc:	ff 90       	pop	r15
    19fe:	ef 90       	pop	r14
    1a00:	df 90       	pop	r13
    1a02:	cf 90       	pop	r12
    1a04:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <_ZN5Print11printNumberEmh>

00001a08 <_ZN5Print5printEii>:
    1a08:	9a 01       	movw	r18, r20
    1a0a:	ab 01       	movw	r20, r22
    1a0c:	77 0f       	add	r23, r23
    1a0e:	66 0b       	sbc	r22, r22
    1a10:	77 0b       	sbc	r23, r23
    1a12:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <_ZN5Print5printEli>

00001a16 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1a16:	7f 92       	push	r7
    1a18:	8f 92       	push	r8
    1a1a:	9f 92       	push	r9
    1a1c:	af 92       	push	r10
    1a1e:	bf 92       	push	r11
    1a20:	cf 92       	push	r12
    1a22:	df 92       	push	r13
    1a24:	ef 92       	push	r14
    1a26:	ff 92       	push	r15
    1a28:	0f 93       	push	r16
    1a2a:	1f 93       	push	r17
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	8c 01       	movw	r16, r24
    1a32:	6a 01       	movw	r12, r20
    1a34:	7b 01       	movw	r14, r22
    1a36:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1a38:	9a 01       	movw	r18, r20
    1a3a:	ab 01       	movw	r20, r22
    1a3c:	c7 01       	movw	r24, r14
    1a3e:	b6 01       	movw	r22, r12
    1a40:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <__unordsf2>
    1a44:	88 23       	and	r24, r24
    1a46:	19 f0       	breq	.+6      	; 0x1a4e <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1a48:	61 ee       	ldi	r22, 0xE1	; 225
    1a4a:	71 e0       	ldi	r23, 0x01	; 1
    1a4c:	27 c0       	rjmp	.+78     	; 0x1a9c <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    1a4e:	46 01       	movw	r8, r12
    1a50:	57 01       	movw	r10, r14
    1a52:	e8 94       	clt
    1a54:	b7 f8       	bld	r11, 7
    1a56:	2f ef       	ldi	r18, 0xFF	; 255
    1a58:	3f ef       	ldi	r19, 0xFF	; 255
    1a5a:	4f e7       	ldi	r20, 0x7F	; 127
    1a5c:	5f e7       	ldi	r21, 0x7F	; 127
    1a5e:	c5 01       	movw	r24, r10
    1a60:	b4 01       	movw	r22, r8
    1a62:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <__unordsf2>
    1a66:	81 11       	cpse	r24, r1
    1a68:	0d c0       	rjmp	.+26     	; 0x1a84 <_ZN5Print10printFloatEdh+0x6e>
    1a6a:	2f ef       	ldi	r18, 0xFF	; 255
    1a6c:	3f ef       	ldi	r19, 0xFF	; 255
    1a6e:	4f e7       	ldi	r20, 0x7F	; 127
    1a70:	5f e7       	ldi	r21, 0x7F	; 127
    1a72:	c5 01       	movw	r24, r10
    1a74:	b4 01       	movw	r22, r8
    1a76:	0e 94 89 18 	call	0x3112	; 0x3112 <__cmpsf2>
    1a7a:	18 16       	cp	r1, r24
    1a7c:	1c f4       	brge	.+6      	; 0x1a84 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1a7e:	65 ee       	ldi	r22, 0xE5	; 229
    1a80:	71 e0       	ldi	r23, 0x01	; 1
    1a82:	0c c0       	rjmp	.+24     	; 0x1a9c <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    1a84:	2f ef       	ldi	r18, 0xFF	; 255
    1a86:	3f ef       	ldi	r19, 0xFF	; 255
    1a88:	4f e7       	ldi	r20, 0x7F	; 127
    1a8a:	5f e4       	ldi	r21, 0x4F	; 79
    1a8c:	c7 01       	movw	r24, r14
    1a8e:	b6 01       	movw	r22, r12
    1a90:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__gesf2>
    1a94:	18 16       	cp	r1, r24
    1a96:	94 f4       	brge	.+36     	; 0x1abc <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1a98:	69 ee       	ldi	r22, 0xE9	; 233
    1a9a:	71 e0       	ldi	r23, 0x01	; 1
    1a9c:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1a9e:	df 91       	pop	r29
    1aa0:	cf 91       	pop	r28
    1aa2:	1f 91       	pop	r17
    1aa4:	0f 91       	pop	r16
    1aa6:	ff 90       	pop	r15
    1aa8:	ef 90       	pop	r14
    1aaa:	df 90       	pop	r13
    1aac:	cf 90       	pop	r12
    1aae:	bf 90       	pop	r11
    1ab0:	af 90       	pop	r10
    1ab2:	9f 90       	pop	r9
    1ab4:	8f 90       	pop	r8
    1ab6:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1ab8:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1abc:	2f ef       	ldi	r18, 0xFF	; 255
    1abe:	3f ef       	ldi	r19, 0xFF	; 255
    1ac0:	4f e7       	ldi	r20, 0x7F	; 127
    1ac2:	5f ec       	ldi	r21, 0xCF	; 207
    1ac4:	c7 01       	movw	r24, r14
    1ac6:	b6 01       	movw	r22, r12
    1ac8:	0e 94 89 18 	call	0x3112	; 0x3112 <__cmpsf2>
    1acc:	87 fd       	sbrc	r24, 7
    1ace:	e4 cf       	rjmp	.-56     	; 0x1a98 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	a9 01       	movw	r20, r18
    1ad6:	c7 01       	movw	r24, r14
    1ad8:	b6 01       	movw	r22, r12
    1ada:	0e 94 89 18 	call	0x3112	; 0x3112 <__cmpsf2>
    1ade:	87 ff       	sbrs	r24, 7
    1ae0:	0a c0       	rjmp	.+20     	; 0x1af6 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    1ae2:	6d e2       	ldi	r22, 0x2D	; 45
    1ae4:	c8 01       	movw	r24, r16
    1ae6:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <_ZN5Print5printEc>
    1aea:	ec 01       	movw	r28, r24
     number = -number;
    1aec:	f7 fa       	bst	r15, 7
    1aee:	f0 94       	com	r15
    1af0:	f7 f8       	bld	r15, 7
    1af2:	f0 94       	com	r15
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1af6:	c0 e0       	ldi	r28, 0x00	; 0
    1af8:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1afa:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1afc:	60 e0       	ldi	r22, 0x00	; 0
    1afe:	70 e0       	ldi	r23, 0x00	; 0
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    1b04:	7b 14       	cp	r7, r11
    1b06:	41 f0       	breq	.+16     	; 0x1b18 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e2       	ldi	r20, 0x20	; 32
    1b0e:	51 e4       	ldi	r21, 0x41	; 65
    1b10:	0e 94 39 09 	call	0x1272	; 0x1272 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1b14:	b3 94       	inc	r11
    1b16:	f6 cf       	rjmp	.-20     	; 0x1b04 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    1b18:	a7 01       	movw	r20, r14
    1b1a:	96 01       	movw	r18, r12
    1b1c:	0e 94 cd 08 	call	0x119a	; 0x119a <__addsf3>
    1b20:	6b 01       	movw	r12, r22
    1b22:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1b24:	0e 94 95 18 	call	0x312a	; 0x312a <__fixunssfsi>
    1b28:	4b 01       	movw	r8, r22
    1b2a:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1b2c:	2a e0       	ldi	r18, 0x0A	; 10
    1b2e:	ab 01       	movw	r20, r22
    1b30:	bc 01       	movw	r22, r24
    1b32:	c8 01       	movw	r24, r16
    1b34:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1b38:	c8 0f       	add	r28, r24
    1b3a:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1b3c:	77 20       	and	r7, r7
    1b3e:	c9 f1       	breq	.+114    	; 0x1bb2 <_ZN5Print10printFloatEdh+0x19c>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    1b40:	c5 01       	movw	r24, r10
    1b42:	b4 01       	movw	r22, r8
    1b44:	0e 94 ab 09 	call	0x1356	; 0x1356 <__floatunsisf>
    1b48:	9b 01       	movw	r18, r22
    1b4a:	ac 01       	movw	r20, r24
    1b4c:	c7 01       	movw	r24, r14
    1b4e:	b6 01       	movw	r22, r12
    1b50:	0e 94 cc 08 	call	0x1198	; 0x1198 <__subsf3>
    1b54:	6b 01       	movw	r12, r22
    1b56:	7c 01       	movw	r14, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1b58:	6d ee       	ldi	r22, 0xED	; 237
    1b5a:	71 e0       	ldi	r23, 0x01	; 1
    1b5c:	c8 01       	movw	r24, r16
    1b5e:	0e 94 2d 0c 	call	0x185a	; 0x185a <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    1b62:	c8 0f       	add	r28, r24
    1b64:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	40 e2       	ldi	r20, 0x20	; 32
    1b6c:	51 e4       	ldi	r21, 0x41	; 65
    1b6e:	c7 01       	movw	r24, r14
    1b70:	b6 01       	movw	r22, r12
    1b72:	0e 94 ed 18 	call	0x31da	; 0x31da <__mulsf3>
    1b76:	4b 01       	movw	r8, r22
    1b78:	5c 01       	movw	r10, r24
    int toPrint = int(remainder);
    1b7a:	0e 94 8e 18 	call	0x311c	; 0x311c <__fixsfsi>
    1b7e:	6b 01       	movw	r12, r22
    1b80:	7c 01       	movw	r14, r24
    n += print(toPrint);
    1b82:	4a e0       	ldi	r20, 0x0A	; 10
    1b84:	50 e0       	ldi	r21, 0x00	; 0
    1b86:	c8 01       	movw	r24, r16
    1b88:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <_ZN5Print5printEii>
    1b8c:	c8 0f       	add	r28, r24
    1b8e:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    1b90:	b6 01       	movw	r22, r12
    1b92:	dd 0c       	add	r13, r13
    1b94:	88 0b       	sbc	r24, r24
    1b96:	99 0b       	sbc	r25, r25
    1b98:	0e 94 ad 09 	call	0x135a	; 0x135a <__floatsisf>
    1b9c:	9b 01       	movw	r18, r22
    1b9e:	ac 01       	movw	r20, r24
    1ba0:	c5 01       	movw	r24, r10
    1ba2:	b4 01       	movw	r22, r8
    1ba4:	0e 94 cc 08 	call	0x1198	; 0x1198 <__subsf3>
    1ba8:	6b 01       	movw	r12, r22
    1baa:	7c 01       	movw	r14, r24
    1bac:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1bae:	71 10       	cpse	r7, r1
    1bb0:	da cf       	rjmp	.-76     	; 0x1b66 <_ZN5Print10printFloatEdh+0x150>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1bb2:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	1f 91       	pop	r17
    1bba:	0f 91       	pop	r16
    1bbc:	ff 90       	pop	r15
    1bbe:	ef 90       	pop	r14
    1bc0:	df 90       	pop	r13
    1bc2:	cf 90       	pop	r12
    1bc4:	bf 90       	pop	r11
    1bc6:	af 90       	pop	r10
    1bc8:	9f 90       	pop	r9
    1bca:	8f 90       	pop	r8
    1bcc:	7f 90       	pop	r7
    1bce:	08 95       	ret

00001bd0 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1bd0:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <_ZN5Print10printFloatEdh>

00001bd4 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    1bd4:	08 95       	ret

00001bd6 <attachInterrupt>:
    1bd6:	82 30       	cpi	r24, 0x02	; 2
    1bd8:	e8 f4       	brcc	.+58     	; 0x1c14 <attachInterrupt+0x3e>
    1bda:	e8 2f       	mov	r30, r24
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	ee 0f       	add	r30, r30
    1be0:	ff 1f       	adc	r31, r31
    1be2:	ea 5f       	subi	r30, 0xFA	; 250
    1be4:	fe 4f       	sbci	r31, 0xFE	; 254
    1be6:	71 83       	std	Z+1, r23	; 0x01
    1be8:	60 83       	st	Z, r22
    1bea:	81 30       	cpi	r24, 0x01	; 1
    1bec:	41 f0       	breq	.+16     	; 0x1bfe <attachInterrupt+0x28>
    1bee:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1bf2:	8c 7f       	andi	r24, 0xFC	; 252
    1bf4:	48 2b       	or	r20, r24
    1bf6:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1bfa:	e8 9a       	sbi	0x1d, 0	; 29
    1bfc:	08 95       	ret
    1bfe:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1c02:	83 7f       	andi	r24, 0xF3	; 243
    1c04:	44 0f       	add	r20, r20
    1c06:	55 1f       	adc	r21, r21
    1c08:	44 0f       	add	r20, r20
    1c0a:	55 1f       	adc	r21, r21
    1c0c:	48 2b       	or	r20, r24
    1c0e:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1c12:	e9 9a       	sbi	0x1d, 1	; 29
    1c14:	08 95       	ret

00001c16 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    1c16:	1f 92       	push	r1
    1c18:	0f 92       	push	r0
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	0f 92       	push	r0
    1c1e:	11 24       	eor	r1, r1
    1c20:	2f 93       	push	r18
    1c22:	3f 93       	push	r19
    1c24:	4f 93       	push	r20
    1c26:	5f 93       	push	r21
    1c28:	6f 93       	push	r22
    1c2a:	7f 93       	push	r23
    1c2c:	8f 93       	push	r24
    1c2e:	9f 93       	push	r25
    1c30:	af 93       	push	r26
    1c32:	bf 93       	push	r27
    1c34:	ef 93       	push	r30
    1c36:	ff 93       	push	r31
    1c38:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <intFunc>
    1c3c:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <intFunc+0x1>
    1c40:	09 95       	icall
    1c42:	ff 91       	pop	r31
    1c44:	ef 91       	pop	r30
    1c46:	bf 91       	pop	r27
    1c48:	af 91       	pop	r26
    1c4a:	9f 91       	pop	r25
    1c4c:	8f 91       	pop	r24
    1c4e:	7f 91       	pop	r23
    1c50:	6f 91       	pop	r22
    1c52:	5f 91       	pop	r21
    1c54:	4f 91       	pop	r20
    1c56:	3f 91       	pop	r19
    1c58:	2f 91       	pop	r18
    1c5a:	0f 90       	pop	r0
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	0f 90       	pop	r0
    1c60:	1f 90       	pop	r1
    1c62:	18 95       	reti

00001c64 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    1c64:	1f 92       	push	r1
    1c66:	0f 92       	push	r0
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	0f 92       	push	r0
    1c6c:	11 24       	eor	r1, r1
    1c6e:	2f 93       	push	r18
    1c70:	3f 93       	push	r19
    1c72:	4f 93       	push	r20
    1c74:	5f 93       	push	r21
    1c76:	6f 93       	push	r22
    1c78:	7f 93       	push	r23
    1c7a:	8f 93       	push	r24
    1c7c:	9f 93       	push	r25
    1c7e:	af 93       	push	r26
    1c80:	bf 93       	push	r27
    1c82:	ef 93       	push	r30
    1c84:	ff 93       	push	r31
    1c86:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <intFunc+0x2>
    1c8a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <intFunc+0x3>
    1c8e:	09 95       	icall
    1c90:	ff 91       	pop	r31
    1c92:	ef 91       	pop	r30
    1c94:	bf 91       	pop	r27
    1c96:	af 91       	pop	r26
    1c98:	9f 91       	pop	r25
    1c9a:	8f 91       	pop	r24
    1c9c:	7f 91       	pop	r23
    1c9e:	6f 91       	pop	r22
    1ca0:	5f 91       	pop	r21
    1ca2:	4f 91       	pop	r20
    1ca4:	3f 91       	pop	r19
    1ca6:	2f 91       	pop	r18
    1ca8:	0f 90       	pop	r0
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	0f 90       	pop	r0
    1cae:	1f 90       	pop	r1
    1cb0:	18 95       	reti

00001cb2 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1cb2:	1f 92       	push	r1
    1cb4:	0f 92       	push	r0
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	0f 92       	push	r0
    1cba:	11 24       	eor	r1, r1
    1cbc:	2f 93       	push	r18
    1cbe:	3f 93       	push	r19
    1cc0:	8f 93       	push	r24
    1cc2:	9f 93       	push	r25
    1cc4:	af 93       	push	r26
    1cc6:	bf 93       	push	r27
    1cc8:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <timer0_millis>
    1ccc:	90 91 fa 03 	lds	r25, 0x03FA	; 0x8003fa <timer0_millis+0x1>
    1cd0:	a0 91 fb 03 	lds	r26, 0x03FB	; 0x8003fb <timer0_millis+0x2>
    1cd4:	b0 91 fc 03 	lds	r27, 0x03FC	; 0x8003fc <timer0_millis+0x3>
    1cd8:	30 91 f8 03 	lds	r19, 0x03F8	; 0x8003f8 <timer0_fract>
    1cdc:	23 e0       	ldi	r18, 0x03	; 3
    1cde:	23 0f       	add	r18, r19
    1ce0:	2d 37       	cpi	r18, 0x7D	; 125
    1ce2:	20 f4       	brcc	.+8      	; 0x1cec <__vector_16+0x3a>
    1ce4:	01 96       	adiw	r24, 0x01	; 1
    1ce6:	a1 1d       	adc	r26, r1
    1ce8:	b1 1d       	adc	r27, r1
    1cea:	05 c0       	rjmp	.+10     	; 0x1cf6 <__vector_16+0x44>
    1cec:	26 e8       	ldi	r18, 0x86	; 134
    1cee:	23 0f       	add	r18, r19
    1cf0:	02 96       	adiw	r24, 0x02	; 2
    1cf2:	a1 1d       	adc	r26, r1
    1cf4:	b1 1d       	adc	r27, r1
    1cf6:	20 93 f8 03 	sts	0x03F8, r18	; 0x8003f8 <timer0_fract>
    1cfa:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <timer0_millis>
    1cfe:	90 93 fa 03 	sts	0x03FA, r25	; 0x8003fa <timer0_millis+0x1>
    1d02:	a0 93 fb 03 	sts	0x03FB, r26	; 0x8003fb <timer0_millis+0x2>
    1d06:	b0 93 fc 03 	sts	0x03FC, r27	; 0x8003fc <timer0_millis+0x3>
    1d0a:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <timer0_overflow_count>
    1d0e:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <timer0_overflow_count+0x1>
    1d12:	a0 91 ff 03 	lds	r26, 0x03FF	; 0x8003ff <timer0_overflow_count+0x2>
    1d16:	b0 91 00 04 	lds	r27, 0x0400	; 0x800400 <timer0_overflow_count+0x3>
    1d1a:	01 96       	adiw	r24, 0x01	; 1
    1d1c:	a1 1d       	adc	r26, r1
    1d1e:	b1 1d       	adc	r27, r1
    1d20:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <timer0_overflow_count>
    1d24:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <timer0_overflow_count+0x1>
    1d28:	a0 93 ff 03 	sts	0x03FF, r26	; 0x8003ff <timer0_overflow_count+0x2>
    1d2c:	b0 93 00 04 	sts	0x0400, r27	; 0x800400 <timer0_overflow_count+0x3>
    1d30:	bf 91       	pop	r27
    1d32:	af 91       	pop	r26
    1d34:	9f 91       	pop	r25
    1d36:	8f 91       	pop	r24
    1d38:	3f 91       	pop	r19
    1d3a:	2f 91       	pop	r18
    1d3c:	0f 90       	pop	r0
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	0f 90       	pop	r0
    1d42:	1f 90       	pop	r1
    1d44:	18 95       	reti

00001d46 <millis>:
    1d46:	2f b7       	in	r18, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	60 91 f9 03 	lds	r22, 0x03F9	; 0x8003f9 <timer0_millis>
    1d4e:	70 91 fa 03 	lds	r23, 0x03FA	; 0x8003fa <timer0_millis+0x1>
    1d52:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <timer0_millis+0x2>
    1d56:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <timer0_millis+0x3>
    1d5a:	2f bf       	out	0x3f, r18	; 63
    1d5c:	08 95       	ret

00001d5e <micros>:
    1d5e:	3f b7       	in	r19, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <timer0_overflow_count>
    1d66:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <timer0_overflow_count+0x1>
    1d6a:	a0 91 ff 03 	lds	r26, 0x03FF	; 0x8003ff <timer0_overflow_count+0x2>
    1d6e:	b0 91 00 04 	lds	r27, 0x0400	; 0x800400 <timer0_overflow_count+0x3>
    1d72:	26 b5       	in	r18, 0x26	; 38
    1d74:	a8 9b       	sbis	0x15, 0	; 21
    1d76:	05 c0       	rjmp	.+10     	; 0x1d82 <micros+0x24>
    1d78:	2f 3f       	cpi	r18, 0xFF	; 255
    1d7a:	19 f0       	breq	.+6      	; 0x1d82 <micros+0x24>
    1d7c:	01 96       	adiw	r24, 0x01	; 1
    1d7e:	a1 1d       	adc	r26, r1
    1d80:	b1 1d       	adc	r27, r1
    1d82:	3f bf       	out	0x3f, r19	; 63
    1d84:	ba 2f       	mov	r27, r26
    1d86:	a9 2f       	mov	r26, r25
    1d88:	98 2f       	mov	r25, r24
    1d8a:	88 27       	eor	r24, r24
    1d8c:	82 0f       	add	r24, r18
    1d8e:	91 1d       	adc	r25, r1
    1d90:	a1 1d       	adc	r26, r1
    1d92:	b1 1d       	adc	r27, r1
    1d94:	bc 01       	movw	r22, r24
    1d96:	cd 01       	movw	r24, r26
    1d98:	42 e0       	ldi	r20, 0x02	; 2
    1d9a:	66 0f       	add	r22, r22
    1d9c:	77 1f       	adc	r23, r23
    1d9e:	88 1f       	adc	r24, r24
    1da0:	99 1f       	adc	r25, r25
    1da2:	4a 95       	dec	r20
    1da4:	d1 f7       	brne	.-12     	; 0x1d9a <micros+0x3c>
    1da6:	08 95       	ret

00001da8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1da8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1daa:	84 b5       	in	r24, 0x24	; 36
    1dac:	82 60       	ori	r24, 0x02	; 2
    1dae:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1db0:	84 b5       	in	r24, 0x24	; 36
    1db2:	81 60       	ori	r24, 0x01	; 1
    1db4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1db6:	85 b5       	in	r24, 0x25	; 37
    1db8:	82 60       	ori	r24, 0x02	; 2
    1dba:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1dbc:	85 b5       	in	r24, 0x25	; 37
    1dbe:	81 60       	ori	r24, 0x01	; 1
    1dc0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1dc2:	ee e6       	ldi	r30, 0x6E	; 110
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	81 60       	ori	r24, 0x01	; 1
    1dca:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1dcc:	e1 e8       	ldi	r30, 0x81	; 129
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1dd2:	80 81       	ld	r24, Z
    1dd4:	82 60       	ori	r24, 0x02	; 2
    1dd6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1dd8:	80 81       	ld	r24, Z
    1dda:	81 60       	ori	r24, 0x01	; 1
    1ddc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1dde:	e0 e8       	ldi	r30, 0x80	; 128
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	81 60       	ori	r24, 0x01	; 1
    1de6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1de8:	e1 eb       	ldi	r30, 0xB1	; 177
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	84 60       	ori	r24, 0x04	; 4
    1df0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1df2:	e0 eb       	ldi	r30, 0xB0	; 176
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	81 60       	ori	r24, 0x01	; 1
    1dfa:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1dfc:	ea e7       	ldi	r30, 0x7A	; 122
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	84 60       	ori	r24, 0x04	; 4
    1e04:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1e06:	80 81       	ld	r24, Z
    1e08:	82 60       	ori	r24, 0x02	; 2
    1e0a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1e0c:	80 81       	ld	r24, Z
    1e0e:	81 60       	ori	r24, 0x01	; 1
    1e10:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1e12:	80 81       	ld	r24, Z
    1e14:	80 68       	ori	r24, 0x80	; 128
    1e16:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1e18:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1e1c:	08 95       	ret

00001e1e <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    1e1e:	8e 30       	cpi	r24, 0x0E	; 14
    1e20:	08 f0       	brcs	.+2      	; 0x1e24 <analogRead+0x6>
    1e22:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1e24:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <analog_reference>
    1e28:	90 e4       	ldi	r25, 0x40	; 64
    1e2a:	29 9f       	mul	r18, r25
    1e2c:	90 01       	movw	r18, r0
    1e2e:	11 24       	eor	r1, r1
    1e30:	87 70       	andi	r24, 0x07	; 7
    1e32:	82 2b       	or	r24, r18
    1e34:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1e38:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1e3c:	80 64       	ori	r24, 0x40	; 64
    1e3e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1e42:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1e46:	86 fd       	sbrc	r24, 6
    1e48:	fc cf       	rjmp	.-8      	; 0x1e42 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1e4a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    1e4e:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    1e52:	90 e0       	ldi	r25, 0x00	; 0
}
    1e54:	92 2b       	or	r25, r18
    1e56:	08 95       	ret

00001e58 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1e58:	83 30       	cpi	r24, 0x03	; 3
    1e5a:	81 f0       	breq	.+32     	; 0x1e7c <turnOffPWM+0x24>
    1e5c:	28 f4       	brcc	.+10     	; 0x1e68 <turnOffPWM+0x10>
    1e5e:	81 30       	cpi	r24, 0x01	; 1
    1e60:	99 f0       	breq	.+38     	; 0x1e88 <turnOffPWM+0x30>
    1e62:	82 30       	cpi	r24, 0x02	; 2
    1e64:	a1 f0       	breq	.+40     	; 0x1e8e <turnOffPWM+0x36>
    1e66:	08 95       	ret
    1e68:	87 30       	cpi	r24, 0x07	; 7
    1e6a:	a9 f0       	breq	.+42     	; 0x1e96 <turnOffPWM+0x3e>
    1e6c:	88 30       	cpi	r24, 0x08	; 8
    1e6e:	b9 f0       	breq	.+46     	; 0x1e9e <turnOffPWM+0x46>
    1e70:	84 30       	cpi	r24, 0x04	; 4
    1e72:	d1 f4       	brne	.+52     	; 0x1ea8 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1e74:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1e78:	8f 7d       	andi	r24, 0xDF	; 223
    1e7a:	03 c0       	rjmp	.+6      	; 0x1e82 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1e7c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1e80:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1e82:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1e86:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1e88:	84 b5       	in	r24, 0x24	; 36
    1e8a:	8f 77       	andi	r24, 0x7F	; 127
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1e8e:	84 b5       	in	r24, 0x24	; 36
    1e90:	8f 7d       	andi	r24, 0xDF	; 223
    1e92:	84 bd       	out	0x24, r24	; 36
    1e94:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1e96:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1e9a:	8f 77       	andi	r24, 0x7F	; 127
    1e9c:	03 c0       	rjmp	.+6      	; 0x1ea4 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1e9e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1ea2:	8f 7d       	andi	r24, 0xDF	; 223
    1ea4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1ea8:	08 95       	ret

00001eaa <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1eaa:	cf 93       	push	r28
    1eac:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	ec 57       	subi	r30, 0x7C	; 124
    1eb4:	fe 4f       	sbci	r31, 0xFE	; 254
    1eb6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1eb8:	fc 01       	movw	r30, r24
    1eba:	e8 56       	subi	r30, 0x68	; 104
    1ebc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ebe:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1ec0:	88 23       	and	r24, r24
    1ec2:	61 f1       	breq	.+88     	; 0x1f1c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	88 0f       	add	r24, r24
    1ec8:	99 1f       	adc	r25, r25
    1eca:	fc 01       	movw	r30, r24
    1ecc:	e0 54       	subi	r30, 0x40	; 64
    1ece:	fe 4f       	sbci	r31, 0xFE	; 254
    1ed0:	c5 91       	lpm	r28, Z+
    1ed2:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	ea 54       	subi	r30, 0x4A	; 74
    1ed8:	fe 4f       	sbci	r31, 0xFE	; 254
    1eda:	a5 91       	lpm	r26, Z+
    1edc:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1ede:	61 11       	cpse	r22, r1
    1ee0:	09 c0       	rjmp	.+18     	; 0x1ef4 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1ee2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1ee4:	f8 94       	cli
		*reg &= ~bit;
    1ee6:	88 81       	ld	r24, Y
    1ee8:	20 95       	com	r18
    1eea:	82 23       	and	r24, r18
    1eec:	88 83       	st	Y, r24
		*out &= ~bit;
    1eee:	ec 91       	ld	r30, X
    1ef0:	2e 23       	and	r18, r30
    1ef2:	0b c0       	rjmp	.+22     	; 0x1f0a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1ef4:	62 30       	cpi	r22, 0x02	; 2
    1ef6:	61 f4       	brne	.+24     	; 0x1f10 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1ef8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1efa:	f8 94       	cli
		*reg &= ~bit;
    1efc:	88 81       	ld	r24, Y
    1efe:	32 2f       	mov	r19, r18
    1f00:	30 95       	com	r19
    1f02:	83 23       	and	r24, r19
    1f04:	88 83       	st	Y, r24
		*out |= bit;
    1f06:	ec 91       	ld	r30, X
    1f08:	2e 2b       	or	r18, r30
    1f0a:	2c 93       	st	X, r18
		SREG = oldSREG;
    1f0c:	9f bf       	out	0x3f, r25	; 63
    1f0e:	06 c0       	rjmp	.+12     	; 0x1f1c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1f10:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1f12:	f8 94       	cli
		*reg |= bit;
    1f14:	e8 81       	ld	r30, Y
    1f16:	2e 2b       	or	r18, r30
    1f18:	28 83       	st	Y, r18
		SREG = oldSREG;
    1f1a:	8f bf       	out	0x3f, r24	; 63
	}
}
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	08 95       	ret

00001f22 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1f22:	1f 93       	push	r17
    1f24:	cf 93       	push	r28
    1f26:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1f28:	28 2f       	mov	r18, r24
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	f9 01       	movw	r30, r18
    1f2e:	e0 59       	subi	r30, 0x90	; 144
    1f30:	fe 4f       	sbci	r31, 0xFE	; 254
    1f32:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1f34:	f9 01       	movw	r30, r18
    1f36:	ec 57       	subi	r30, 0x7C	; 124
    1f38:	fe 4f       	sbci	r31, 0xFE	; 254
    1f3a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1f3c:	f9 01       	movw	r30, r18
    1f3e:	e8 56       	subi	r30, 0x68	; 104
    1f40:	fe 4f       	sbci	r31, 0xFE	; 254
    1f42:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1f44:	cc 23       	and	r28, r28
    1f46:	c1 f0       	breq	.+48     	; 0x1f78 <digitalWrite+0x56>
    1f48:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1f4a:	81 11       	cpse	r24, r1
    1f4c:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <turnOffPWM>

	out = portOutputRegister(port);
    1f50:	ec 2f       	mov	r30, r28
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	ee 0f       	add	r30, r30
    1f56:	ff 1f       	adc	r31, r31
    1f58:	ea 54       	subi	r30, 0x4A	; 74
    1f5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f5c:	a5 91       	lpm	r26, Z+
    1f5e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1f60:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1f62:	f8 94       	cli

	if (val == LOW) {
    1f64:	11 11       	cpse	r17, r1
    1f66:	04 c0       	rjmp	.+8      	; 0x1f70 <digitalWrite+0x4e>
		*out &= ~bit;
    1f68:	8c 91       	ld	r24, X
    1f6a:	d0 95       	com	r29
    1f6c:	d8 23       	and	r29, r24
    1f6e:	02 c0       	rjmp	.+4      	; 0x1f74 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1f70:	ec 91       	ld	r30, X
    1f72:	de 2b       	or	r29, r30
    1f74:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1f76:	9f bf       	out	0x3f, r25	; 63
}
    1f78:	df 91       	pop	r29
    1f7a:	cf 91       	pop	r28
    1f7c:	1f 91       	pop	r17
    1f7e:	08 95       	ret

00001f80 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1f80:	cf 93       	push	r28
    1f82:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1f84:	28 2f       	mov	r18, r24
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	f9 01       	movw	r30, r18
    1f8a:	e0 59       	subi	r30, 0x90	; 144
    1f8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f8e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1f90:	f9 01       	movw	r30, r18
    1f92:	ec 57       	subi	r30, 0x7C	; 124
    1f94:	fe 4f       	sbci	r31, 0xFE	; 254
    1f96:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1f98:	f9 01       	movw	r30, r18
    1f9a:	e8 56       	subi	r30, 0x68	; 104
    1f9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f9e:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1fa0:	cc 23       	and	r28, r28
    1fa2:	91 f0       	breq	.+36     	; 0x1fc8 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1fa4:	81 11       	cpse	r24, r1
    1fa6:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1faa:	ec 2f       	mov	r30, r28
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	ee 0f       	add	r30, r30
    1fb0:	ff 1f       	adc	r31, r31
    1fb2:	e4 55       	subi	r30, 0x54	; 84
    1fb4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fb6:	a5 91       	lpm	r26, Z+
    1fb8:	b4 91       	lpm	r27, Z
    1fba:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1fbc:	ed 23       	and	r30, r29
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	21 f4       	brne	.+8      	; 0x1fcc <digitalRead+0x4c>
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <digitalRead+0x4c>
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1fcc:	df 91       	pop	r29
    1fce:	cf 91       	pop	r28
    1fd0:	08 95       	ret

00001fd2 <_ZN6StringD1Ev>:
StringSumHelper & operator + (const StringSumHelper &lhs, long num)
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	80 81       	ld	r24, Z
    1fd6:	91 81       	ldd	r25, Z+1	; 0x01
    1fd8:	0c 94 3f 1a 	jmp	0x347e	; 0x347e <free>

00001fdc <_ZN6String10invalidateEv>:
    1fdc:	cf 93       	push	r28
    1fde:	df 93       	push	r29
    1fe0:	ec 01       	movw	r28, r24
    1fe2:	88 81       	ld	r24, Y
    1fe4:	99 81       	ldd	r25, Y+1	; 0x01
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	11 f0       	breq	.+4      	; 0x1fee <_ZN6String10invalidateEv+0x12>
    1fea:	0e 94 3f 1a 	call	0x347e	; 0x347e <free>
    1fee:	19 82       	std	Y+1, r1	; 0x01
    1ff0:	18 82       	st	Y, r1
    1ff2:	1d 82       	std	Y+5, r1	; 0x05
    1ff4:	1c 82       	std	Y+4, r1	; 0x04
    1ff6:	1b 82       	std	Y+3, r1	; 0x03
    1ff8:	1a 82       	std	Y+2, r1	; 0x02
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	08 95       	ret

00002000 <_ZN6String12changeBufferEj>:
    2000:	0f 93       	push	r16
    2002:	1f 93       	push	r17
    2004:	cf 93       	push	r28
    2006:	df 93       	push	r29
    2008:	ec 01       	movw	r28, r24
    200a:	8b 01       	movw	r16, r22
    200c:	6f 5f       	subi	r22, 0xFF	; 255
    200e:	7f 4f       	sbci	r23, 0xFF	; 255
    2010:	88 81       	ld	r24, Y
    2012:	99 81       	ldd	r25, Y+1	; 0x01
    2014:	0e 94 c8 1a 	call	0x3590	; 0x3590 <realloc>
    2018:	00 97       	sbiw	r24, 0x00	; 0
    201a:	31 f0       	breq	.+12     	; 0x2028 <_ZN6String12changeBufferEj+0x28>
    201c:	99 83       	std	Y+1, r25	; 0x01
    201e:	88 83       	st	Y, r24
    2020:	1b 83       	std	Y+3, r17	; 0x03
    2022:	0a 83       	std	Y+2, r16	; 0x02
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	01 c0       	rjmp	.+2      	; 0x202a <_ZN6String12changeBufferEj+0x2a>
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	df 91       	pop	r29
    202c:	cf 91       	pop	r28
    202e:	1f 91       	pop	r17
    2030:	0f 91       	pop	r16
    2032:	08 95       	ret

00002034 <_ZN6String7reserveEj>:
    2034:	cf 93       	push	r28
    2036:	df 93       	push	r29
    2038:	ec 01       	movw	r28, r24
    203a:	88 81       	ld	r24, Y
    203c:	99 81       	ldd	r25, Y+1	; 0x01
    203e:	89 2b       	or	r24, r25
    2040:	29 f0       	breq	.+10     	; 0x204c <_ZN6String7reserveEj+0x18>
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	9b 81       	ldd	r25, Y+3	; 0x03
    2046:	86 17       	cp	r24, r22
    2048:	97 07       	cpc	r25, r23
    204a:	60 f4       	brcc	.+24     	; 0x2064 <_ZN6String7reserveEj+0x30>
    204c:	ce 01       	movw	r24, r28
    204e:	0e 94 00 10 	call	0x2000	; 0x2000 <_ZN6String12changeBufferEj>
    2052:	88 23       	and	r24, r24
    2054:	41 f0       	breq	.+16     	; 0x2066 <_ZN6String7reserveEj+0x32>
    2056:	8c 81       	ldd	r24, Y+4	; 0x04
    2058:	9d 81       	ldd	r25, Y+5	; 0x05
    205a:	89 2b       	or	r24, r25
    205c:	19 f4       	brne	.+6      	; 0x2064 <_ZN6String7reserveEj+0x30>
    205e:	e8 81       	ld	r30, Y
    2060:	f9 81       	ldd	r31, Y+1	; 0x01
    2062:	10 82       	st	Z, r1
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	df 91       	pop	r29
    2068:	cf 91       	pop	r28
    206a:	08 95       	ret

0000206c <_ZN6String4copyEPKcj>:
    206c:	ef 92       	push	r14
    206e:	ff 92       	push	r15
    2070:	0f 93       	push	r16
    2072:	1f 93       	push	r17
    2074:	cf 93       	push	r28
    2076:	df 93       	push	r29
    2078:	ec 01       	movw	r28, r24
    207a:	7b 01       	movw	r14, r22
    207c:	8a 01       	movw	r16, r20
    207e:	ba 01       	movw	r22, r20
    2080:	0e 94 1a 10 	call	0x2034	; 0x2034 <_ZN6String7reserveEj>
    2084:	81 11       	cpse	r24, r1
    2086:	04 c0       	rjmp	.+8      	; 0x2090 <_ZN6String4copyEPKcj+0x24>
    2088:	ce 01       	movw	r24, r28
    208a:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <_ZN6String10invalidateEv>
    208e:	07 c0       	rjmp	.+14     	; 0x209e <_ZN6String4copyEPKcj+0x32>
    2090:	1d 83       	std	Y+5, r17	; 0x05
    2092:	0c 83       	std	Y+4, r16	; 0x04
    2094:	b7 01       	movw	r22, r14
    2096:	88 81       	ld	r24, Y
    2098:	99 81       	ldd	r25, Y+1	; 0x01
    209a:	0e 94 97 1b 	call	0x372e	; 0x372e <strcpy>
    209e:	ce 01       	movw	r24, r28
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	1f 91       	pop	r17
    20a6:	0f 91       	pop	r16
    20a8:	ff 90       	pop	r15
    20aa:	ef 90       	pop	r14
    20ac:	08 95       	ret

000020ae <_ZN6StringC1EPKc>:
    20ae:	fc 01       	movw	r30, r24
    20b0:	11 82       	std	Z+1, r1	; 0x01
    20b2:	10 82       	st	Z, r1
    20b4:	13 82       	std	Z+3, r1	; 0x03
    20b6:	12 82       	std	Z+2, r1	; 0x02
    20b8:	15 82       	std	Z+5, r1	; 0x05
    20ba:	14 82       	std	Z+4, r1	; 0x04
    20bc:	61 15       	cp	r22, r1
    20be:	71 05       	cpc	r23, r1
    20c0:	51 f0       	breq	.+20     	; 0x20d6 <_ZN6StringC1EPKc+0x28>
    20c2:	fb 01       	movw	r30, r22
    20c4:	01 90       	ld	r0, Z+
    20c6:	00 20       	and	r0, r0
    20c8:	e9 f7       	brne	.-6      	; 0x20c4 <_ZN6StringC1EPKc+0x16>
    20ca:	31 97       	sbiw	r30, 0x01	; 1
    20cc:	af 01       	movw	r20, r30
    20ce:	46 1b       	sub	r20, r22
    20d0:	57 0b       	sbc	r21, r23
    20d2:	0c 94 36 10 	jmp	0x206c	; 0x206c <_ZN6String4copyEPKcj>
    20d6:	08 95       	ret

000020d8 <_ZN6StringaSERKS_>:
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
    20dc:	ec 01       	movw	r28, r24
    20de:	fb 01       	movw	r30, r22
    20e0:	86 17       	cp	r24, r22
    20e2:	97 07       	cpc	r25, r23
    20e4:	61 f0       	breq	.+24     	; 0x20fe <_ZN6StringaSERKS_+0x26>
    20e6:	60 81       	ld	r22, Z
    20e8:	71 81       	ldd	r23, Z+1	; 0x01
    20ea:	61 15       	cp	r22, r1
    20ec:	71 05       	cpc	r23, r1
    20ee:	29 f0       	breq	.+10     	; 0x20fa <_ZN6StringaSERKS_+0x22>
    20f0:	44 81       	ldd	r20, Z+4	; 0x04
    20f2:	55 81       	ldd	r21, Z+5	; 0x05
    20f4:	0e 94 36 10 	call	0x206c	; 0x206c <_ZN6String4copyEPKcj>
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <_ZN6StringaSERKS_+0x26>
    20fa:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <_ZN6String10invalidateEv>
    20fe:	ce 01       	movw	r24, r28
    2100:	df 91       	pop	r29
    2102:	cf 91       	pop	r28
    2104:	08 95       	ret

00002106 <_ZN6StringC1ERKS_>:
    2106:	fc 01       	movw	r30, r24
    2108:	11 82       	std	Z+1, r1	; 0x01
    210a:	10 82       	st	Z, r1
    210c:	13 82       	std	Z+3, r1	; 0x03
    210e:	12 82       	std	Z+2, r1	; 0x02
    2110:	15 82       	std	Z+5, r1	; 0x05
    2112:	14 82       	std	Z+4, r1	; 0x04
    2114:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <_ZN6StringaSERKS_>

00002118 <_ZN6String6concatEPKcj>:
    2118:	ef 92       	push	r14
    211a:	ff 92       	push	r15
    211c:	0f 93       	push	r16
    211e:	1f 93       	push	r17
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	61 15       	cp	r22, r1
    2126:	71 05       	cpc	r23, r1
    2128:	11 f4       	brne	.+4      	; 0x212e <_ZN6String6concatEPKcj+0x16>
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	1c c0       	rjmp	.+56     	; 0x2166 <_ZN6String6concatEPKcj+0x4e>
    212e:	41 15       	cp	r20, r1
    2130:	51 05       	cpc	r21, r1
    2132:	c1 f0       	breq	.+48     	; 0x2164 <_ZN6String6concatEPKcj+0x4c>
    2134:	7b 01       	movw	r14, r22
    2136:	ec 01       	movw	r28, r24
    2138:	8c 81       	ldd	r24, Y+4	; 0x04
    213a:	9d 81       	ldd	r25, Y+5	; 0x05
    213c:	8a 01       	movw	r16, r20
    213e:	08 0f       	add	r16, r24
    2140:	19 1f       	adc	r17, r25
    2142:	b8 01       	movw	r22, r16
    2144:	ce 01       	movw	r24, r28
    2146:	0e 94 1a 10 	call	0x2034	; 0x2034 <_ZN6String7reserveEj>
    214a:	88 23       	and	r24, r24
    214c:	71 f3       	breq	.-36     	; 0x212a <_ZN6String6concatEPKcj+0x12>
    214e:	28 81       	ld	r18, Y
    2150:	39 81       	ldd	r19, Y+1	; 0x01
    2152:	8c 81       	ldd	r24, Y+4	; 0x04
    2154:	9d 81       	ldd	r25, Y+5	; 0x05
    2156:	b7 01       	movw	r22, r14
    2158:	82 0f       	add	r24, r18
    215a:	93 1f       	adc	r25, r19
    215c:	0e 94 97 1b 	call	0x372e	; 0x372e <strcpy>
    2160:	1d 83       	std	Y+5, r17	; 0x05
    2162:	0c 83       	std	Y+4, r16	; 0x04
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	1f 91       	pop	r17
    216c:	0f 91       	pop	r16
    216e:	ff 90       	pop	r15
    2170:	ef 90       	pop	r14
    2172:	08 95       	ret

00002174 <_ZN6String6concatEm>:
    2174:	ef 92       	push	r14
    2176:	ff 92       	push	r15
    2178:	0f 93       	push	r16
    217a:	1f 93       	push	r17
    217c:	cf 93       	push	r28
    217e:	df 93       	push	r29
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	2d 97       	sbiw	r28, 0x0d	; 13
    2186:	0f b6       	in	r0, 0x3f	; 63
    2188:	f8 94       	cli
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	0f be       	out	0x3f, r0	; 63
    218e:	cd bf       	out	0x3d, r28	; 61
    2190:	7c 01       	movw	r14, r24
    2192:	cb 01       	movw	r24, r22
    2194:	ba 01       	movw	r22, r20
    2196:	2a e0       	ldi	r18, 0x0A	; 10
    2198:	8e 01       	movw	r16, r28
    219a:	0f 5f       	subi	r16, 0xFF	; 255
    219c:	1f 4f       	sbci	r17, 0xFF	; 255
    219e:	a8 01       	movw	r20, r16
    21a0:	0e 94 9e 1b 	call	0x373c	; 0x373c <__ultoa_ncheck>
    21a4:	f8 01       	movw	r30, r16
    21a6:	01 90       	ld	r0, Z+
    21a8:	00 20       	and	r0, r0
    21aa:	e9 f7       	brne	.-6      	; 0x21a6 <_ZN6String6concatEm+0x32>
    21ac:	31 97       	sbiw	r30, 0x01	; 1
    21ae:	af 01       	movw	r20, r30
    21b0:	40 1b       	sub	r20, r16
    21b2:	51 0b       	sbc	r21, r17
    21b4:	b8 01       	movw	r22, r16
    21b6:	c7 01       	movw	r24, r14
    21b8:	0e 94 8c 10 	call	0x2118	; 0x2118 <_ZN6String6concatEPKcj>
    21bc:	2d 96       	adiw	r28, 0x0d	; 13
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	de bf       	out	0x3e, r29	; 62
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	cd bf       	out	0x3d, r28	; 61
    21c8:	df 91       	pop	r29
    21ca:	cf 91       	pop	r28
    21cc:	1f 91       	pop	r17
    21ce:	0f 91       	pop	r16
    21d0:	ff 90       	pop	r15
    21d2:	ef 90       	pop	r14
    21d4:	08 95       	ret

000021d6 <_ZN6String6concatEf>:
    21d6:	ef 92       	push	r14
    21d8:	ff 92       	push	r15
    21da:	0f 93       	push	r16
    21dc:	1f 93       	push	r17
    21de:	cf 93       	push	r28
    21e0:	df 93       	push	r29
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
    21e6:	64 97       	sbiw	r28, 0x14	; 20
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61
    21f2:	7c 01       	movw	r14, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	ba 01       	movw	r22, r20
    21f8:	8e 01       	movw	r16, r28
    21fa:	0f 5f       	subi	r16, 0xFF	; 255
    21fc:	1f 4f       	sbci	r17, 0xFF	; 255
    21fe:	22 e0       	ldi	r18, 0x02	; 2
    2200:	44 e0       	ldi	r20, 0x04	; 4
    2202:	0e 94 87 19 	call	0x330e	; 0x330e <dtostrf>
    2206:	fc 01       	movw	r30, r24
    2208:	01 90       	ld	r0, Z+
    220a:	00 20       	and	r0, r0
    220c:	e9 f7       	brne	.-6      	; 0x2208 <_ZN6String6concatEf+0x32>
    220e:	31 97       	sbiw	r30, 0x01	; 1
    2210:	af 01       	movw	r20, r30
    2212:	48 1b       	sub	r20, r24
    2214:	59 0b       	sbc	r21, r25
    2216:	bc 01       	movw	r22, r24
    2218:	c7 01       	movw	r24, r14
    221a:	0e 94 8c 10 	call	0x2118	; 0x2118 <_ZN6String6concatEPKcj>
    221e:	64 96       	adiw	r28, 0x14	; 20
    2220:	0f b6       	in	r0, 0x3f	; 63
    2222:	f8 94       	cli
    2224:	de bf       	out	0x3e, r29	; 62
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	cd bf       	out	0x3d, r28	; 61
    222a:	df 91       	pop	r29
    222c:	cf 91       	pop	r28
    222e:	1f 91       	pop	r17
    2230:	0f 91       	pop	r16
    2232:	ff 90       	pop	r15
    2234:	ef 90       	pop	r14
    2236:	08 95       	ret

00002238 <_ZplRK15StringSumHelperm>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
{
    2238:	cf 93       	push	r28
    223a:	df 93       	push	r29
    223c:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    223e:	0e 94 ba 10 	call	0x2174	; 0x2174 <_ZN6String6concatEm>
    2242:	81 11       	cpse	r24, r1
    2244:	03 c0       	rjmp	.+6      	; 0x224c <_ZplRK15StringSumHelperm+0x14>
    2246:	ce 01       	movw	r24, r28
    2248:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <_ZN6String10invalidateEv>
	return a;
}
    224c:	ce 01       	movw	r24, r28
    224e:	df 91       	pop	r29
    2250:	cf 91       	pop	r28
    2252:	08 95       	ret

00002254 <_ZplRK15StringSumHelperf>:

StringSumHelper & operator + (const StringSumHelper &lhs, float num)
{
    2254:	cf 93       	push	r28
    2256:	df 93       	push	r29
    2258:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    225a:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <_ZN6String6concatEf>
    225e:	81 11       	cpse	r24, r1
    2260:	03 c0       	rjmp	.+6      	; 0x2268 <_ZplRK15StringSumHelperf+0x14>
    2262:	ce 01       	movw	r24, r28
    2264:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <_ZN6String10invalidateEv>
	return a;
}
    2268:	ce 01       	movw	r24, r28
    226a:	df 91       	pop	r29
    226c:	cf 91       	pop	r28
    226e:	08 95       	ret

00002270 <_ZN6U8GLIB7initI2CEP10_u8g_dev_th>:
  private:
    u8g_t u8g;
    u8g_uint_t tx, ty;          // current position for the Print base class procedures
    uint8_t is_begin;

    void prepare(void) { tx = 0; ty = 0; is_begin = 0; }
    2270:	fc 01       	movw	r30, r24
    2272:	13 ae       	std	Z+59, r1	; 0x3b
    2274:	14 ae       	std	Z+60, r1	; 0x3c
    2276:	15 ae       	std	Z+61, r1	; 0x3d
}

uint8_t U8GLIB::initI2C(u8g_dev_t *dev, uint8_t options)
{
  prepare();
  return u8g_InitI2C(&u8g, dev, options);
    2278:	04 96       	adiw	r24, 0x04	; 4
    227a:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <u8g_InitI2C>

0000227e <u8g_dev_ssd1306_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    227e:	af 92       	push	r10
    2280:	bf 92       	push	r11
    2282:	cf 92       	push	r12
    2284:	df 92       	push	r13
    2286:	ff 92       	push	r15
    2288:	0f 93       	push	r16
    228a:	1f 93       	push	r17
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	8c 01       	movw	r16, r24
    2292:	eb 01       	movw	r28, r22
    2294:	f4 2e       	mov	r15, r20
    2296:	69 01       	movw	r12, r18
  switch(msg)
    2298:	80 e1       	ldi	r24, 0x10	; 16
    229a:	48 17       	cp	r20, r24
    229c:	b1 f1       	breq	.+108    	; 0x230a <u8g_dev_ssd1306_128x64_fn+0x8c>
    229e:	84 17       	cp	r24, r20
    22a0:	70 f0       	brcs	.+28     	; 0x22be <u8g_dev_ssd1306_128x64_fn+0x40>
    22a2:	ea e0       	ldi	r30, 0x0A	; 10
    22a4:	4e 13       	cpse	r20, r30
    22a6:	3c c0       	rjmp	.+120    	; 0x2320 <u8g_dev_ssd1306_128x64_fn+0xa2>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
    22a8:	42 e0       	ldi	r20, 0x02	; 2
    22aa:	c8 01       	movw	r24, r16
    22ac:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_adafruit2_init_seq);
    22b0:	46 ee       	ldi	r20, 0xE6	; 230
    22b2:	51 e0       	ldi	r21, 0x01	; 1
    22b4:	be 01       	movw	r22, r28
    22b6:	c8 01       	movw	r24, r16
    22b8:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <u8g_WriteEscSeqP>
      break;
    22bc:	31 c0       	rjmp	.+98     	; 0x2320 <u8g_dev_ssd1306_128x64_fn+0xa2>
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
    22be:	f1 e1       	ldi	r31, 0x11	; 17
    22c0:	4f 17       	cp	r20, r31
    22c2:	31 f1       	breq	.+76     	; 0x2310 <u8g_dev_ssd1306_128x64_fn+0x92>
    22c4:	85 e1       	ldi	r24, 0x15	; 21
    22c6:	48 13       	cpse	r20, r24
    22c8:	2b c0       	rjmp	.+86     	; 0x2320 <u8g_dev_ssd1306_128x64_fn+0xa2>
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    22ca:	aa 80       	ldd	r10, Y+2	; 0x02
    22cc:	bb 80       	ldd	r11, Y+3	; 0x03
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
    22ce:	4e ed       	ldi	r20, 0xDE	; 222
    22d0:	51 e0       	ldi	r21, 0x01	; 1
    22d2:	c8 01       	movw	r24, r16
    22d4:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
    22d8:	f5 01       	movw	r30, r10
    22da:	44 81       	ldd	r20, Z+4	; 0x04
    22dc:	40 6b       	ori	r20, 0xB0	; 176
    22de:	be 01       	movw	r22, r28
    22e0:	c8 01       	movw	r24, r16
    22e2:	0e 94 db 16 	call	0x2db6	; 0x2db6 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
    22e6:	41 e0       	ldi	r20, 0x01	; 1
    22e8:	be 01       	movw	r22, r28
    22ea:	c8 01       	movw	r24, r16
    22ec:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
    22f0:	ae 01       	movw	r20, r28
    22f2:	b8 01       	movw	r22, r16
    22f4:	c5 01       	movw	r24, r10
    22f6:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <u8g_pb_WriteBuffer>
    22fa:	88 23       	and	r24, r24
    22fc:	01 f1       	breq	.+64     	; 0x233e <u8g_dev_ssd1306_128x64_fn+0xc0>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
    22fe:	40 e0       	ldi	r20, 0x00	; 0
    2300:	be 01       	movw	r22, r28
    2302:	c8 01       	movw	r24, r16
    2304:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <u8g_SetChipSelect>
      }
      break;
    2308:	0b c0       	rjmp	.+22     	; 0x2320 <u8g_dev_ssd1306_128x64_fn+0xa2>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
    230a:	45 ed       	ldi	r20, 0xD5	; 213
    230c:	51 e0       	ldi	r21, 0x01	; 1
    230e:	02 c0       	rjmp	.+4      	; 0x2314 <u8g_dev_ssd1306_128x64_fn+0x96>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
    2310:	4a ec       	ldi	r20, 0xCA	; 202
    2312:	51 e0       	ldi	r21, 0x01	; 1
    2314:	be 01       	movw	r22, r28
    2316:	c8 01       	movw	r24, r16
    2318:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <u8g_WriteEscSeqP>
      return 1;
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	0f c0       	rjmp	.+30     	; 0x233e <u8g_dev_ssd1306_128x64_fn+0xc0>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
    2320:	96 01       	movw	r18, r12
    2322:	4f 2d       	mov	r20, r15
    2324:	be 01       	movw	r22, r28
    2326:	c8 01       	movw	r24, r16
}
    2328:	df 91       	pop	r29
    232a:	cf 91       	pop	r28
    232c:	1f 91       	pop	r17
    232e:	0f 91       	pop	r16
    2330:	ff 90       	pop	r15
    2332:	df 90       	pop	r13
    2334:	cf 90       	pop	r12
    2336:	bf 90       	pop	r11
    2338:	af 90       	pop	r10
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
      return 1;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
    233a:	0c 94 67 15 	jmp	0x2ace	; 0x2ace <u8g_dev_pb8v1_base_fn>
}
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	1f 91       	pop	r17
    2344:	0f 91       	pop	r16
    2346:	ff 90       	pop	r15
    2348:	df 90       	pop	r13
    234a:	cf 90       	pop	r12
    234c:	bf 90       	pop	r11
    234e:	af 90       	pop	r10
    2350:	08 95       	ret

00002352 <u8g_font_get_word>:
  cap_a = u8g_font_GetCapitalAHeight(u8g->font);
  u8g_font_calc_str_min_box(u8g, s, &buf);
  if ( buf.y_max < cap_a )
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}
    2352:	fc 01       	movw	r30, r24
    2354:	e6 0f       	add	r30, r22
    2356:	f1 1d       	adc	r31, r1
    2358:	84 91       	lpm	r24, Z
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	98 2f       	mov	r25, r24
    235e:	88 27       	eor	r24, r24
    2360:	31 96       	adiw	r30, 0x01	; 1
    2362:	e4 91       	lpm	r30, Z
    2364:	8e 0f       	add	r24, r30
    2366:	91 1d       	adc	r25, r1
    2368:	08 95       	ret

0000236a <u8g_font_GetFormat>:
    236a:	fc 01       	movw	r30, r24
    236c:	84 91       	lpm	r24, Z
    236e:	08 95       	ret

00002370 <u8g_font_GetFontGlyphStructureSize>:
    2370:	0e 94 b5 11 	call	0x236a	; 0x236a <u8g_font_GetFormat>
    2374:	88 23       	and	r24, r24
    2376:	21 f0       	breq	.+8      	; 0x2380 <u8g_font_GetFontGlyphStructureSize+0x10>
    2378:	82 30       	cpi	r24, 0x02	; 2
    237a:	11 f0       	breq	.+4      	; 0x2380 <u8g_font_GetFontGlyphStructureSize+0x10>
    237c:	83 e0       	ldi	r24, 0x03	; 3
    237e:	08 95       	ret
    2380:	86 e0       	ldi	r24, 0x06	; 6
    2382:	08 95       	ret

00002384 <u8g_font_calc_vref_font>:
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	08 95       	ret

00002388 <u8g_font_GetEncoding65Pos>:
    2388:	66 e0       	ldi	r22, 0x06	; 6
    238a:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <u8g_font_get_word>

0000238e <u8g_font_GetEncoding97Pos>:
    238e:	68 e0       	ldi	r22, 0x08	; 8
    2390:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <u8g_font_get_word>

00002394 <u8g_font_GetFontStartEncoding>:
    2394:	0a 96       	adiw	r24, 0x0a	; 10
    2396:	fc 01       	movw	r30, r24
    2398:	84 91       	lpm	r24, Z
    239a:	08 95       	ret

0000239c <u8g_font_GetFontEndEncoding>:
    239c:	0b 96       	adiw	r24, 0x0b	; 11
    239e:	fc 01       	movw	r30, r24
    23a0:	84 91       	lpm	r24, Z
    23a2:	08 95       	ret

000023a4 <u8g_GetGlyph>:
    23a4:	bf 92       	push	r11
    23a6:	cf 92       	push	r12
    23a8:	df 92       	push	r13
    23aa:	ef 92       	push	r14
    23ac:	ff 92       	push	r15
    23ae:	0f 93       	push	r16
    23b0:	1f 93       	push	r17
    23b2:	cf 93       	push	r28
    23b4:	df 93       	push	r29
    23b6:	8c 01       	movw	r16, r24
    23b8:	e6 2e       	mov	r14, r22
    23ba:	dc 01       	movw	r26, r24
    23bc:	14 96       	adiw	r26, 0x04	; 4
    23be:	cd 91       	ld	r28, X+
    23c0:	dc 91       	ld	r29, X
    23c2:	15 97       	sbiw	r26, 0x05	; 5
    23c4:	ce 01       	movw	r24, r28
    23c6:	0e 94 b5 11 	call	0x236a	; 0x236a <u8g_font_GetFormat>
    23ca:	f8 2e       	mov	r15, r24
    23cc:	f8 01       	movw	r30, r16
    23ce:	84 81       	ldd	r24, Z+4	; 0x04
    23d0:	95 81       	ldd	r25, Z+5	; 0x05
    23d2:	0e 94 b8 11 	call	0x2370	; 0x2370 <u8g_font_GetFontGlyphStructureSize>
    23d6:	c8 2e       	mov	r12, r24
    23d8:	f1 e0       	ldi	r31, 0x01	; 1
    23da:	ff 12       	cpse	r15, r31
    23dc:	03 c0       	rjmp	.+6      	; 0x23e4 <u8g_GetGlyph+0x40>
    23de:	2f e0       	ldi	r18, 0x0F	; 15
    23e0:	b2 2e       	mov	r11, r18
    23e2:	02 c0       	rjmp	.+4      	; 0x23e8 <u8g_GetGlyph+0x44>
    23e4:	bb 24       	eor	r11, r11
    23e6:	ba 94       	dec	r11
    23e8:	d8 01       	movw	r26, r16
    23ea:	14 96       	adiw	r26, 0x04	; 4
    23ec:	8d 91       	ld	r24, X+
    23ee:	9c 91       	ld	r25, X
    23f0:	15 97       	sbiw	r26, 0x05	; 5
    23f2:	0e 94 ca 11 	call	0x2394	; 0x2394 <u8g_font_GetFontStartEncoding>
    23f6:	f8 2e       	mov	r15, r24
    23f8:	f8 01       	movw	r30, r16
    23fa:	84 81       	ldd	r24, Z+4	; 0x04
    23fc:	95 81       	ldd	r25, Z+5	; 0x05
    23fe:	0e 94 ce 11 	call	0x239c	; 0x239c <u8g_font_GetFontEndEncoding>
    2402:	d8 2e       	mov	r13, r24
    2404:	d8 01       	movw	r26, r16
    2406:	14 96       	adiw	r26, 0x04	; 4
    2408:	8d 91       	ld	r24, X+
    240a:	9c 91       	ld	r25, X
    240c:	15 97       	sbiw	r26, 0x05	; 5
    240e:	0e 94 c7 11 	call	0x238e	; 0x238e <u8g_font_GetEncoding97Pos>
    2412:	b0 e6       	ldi	r27, 0x60	; 96
    2414:	be 15       	cp	r27, r14
    2416:	38 f4       	brcc	.+14     	; 0x2426 <u8g_GetGlyph+0x82>
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	29 f0       	breq	.+10     	; 0x2426 <u8g_GetGlyph+0x82>
    241c:	c8 0f       	add	r28, r24
    241e:	d9 1f       	adc	r29, r25
    2420:	91 e6       	ldi	r25, 0x61	; 97
    2422:	f9 2e       	mov	r15, r25
    2424:	10 c0       	rjmp	.+32     	; 0x2446 <u8g_GetGlyph+0xa2>
    2426:	f8 01       	movw	r30, r16
    2428:	84 81       	ldd	r24, Z+4	; 0x04
    242a:	95 81       	ldd	r25, Z+5	; 0x05
    242c:	0e 94 c4 11 	call	0x2388	; 0x2388 <u8g_font_GetEncoding65Pos>
    2430:	f0 e4       	ldi	r31, 0x40	; 64
    2432:	fe 15       	cp	r31, r14
    2434:	38 f4       	brcc	.+14     	; 0x2444 <u8g_GetGlyph+0xa0>
    2436:	00 97       	sbiw	r24, 0x00	; 0
    2438:	29 f0       	breq	.+10     	; 0x2444 <u8g_GetGlyph+0xa0>
    243a:	c8 0f       	add	r28, r24
    243c:	d9 1f       	adc	r29, r25
    243e:	81 e4       	ldi	r24, 0x41	; 65
    2440:	f8 2e       	mov	r15, r24
    2442:	01 c0       	rjmp	.+2      	; 0x2446 <u8g_GetGlyph+0xa2>
    2444:	61 96       	adiw	r28, 0x11	; 17
    2446:	de 14       	cp	r13, r14
    2448:	90 f4       	brcc	.+36     	; 0x246e <u8g_GetGlyph+0xca>
    244a:	d8 01       	movw	r26, r16
    244c:	50 96       	adiw	r26, 0x10	; 16
    244e:	1c 92       	st	X, r1
    2450:	50 97       	sbiw	r26, 0x10	; 16
    2452:	53 96       	adiw	r26, 0x13	; 19
    2454:	1c 92       	st	X, r1
    2456:	53 97       	sbiw	r26, 0x13	; 19
    2458:	54 96       	adiw	r26, 0x14	; 20
    245a:	1c 92       	st	X, r1
    245c:	54 97       	sbiw	r26, 0x14	; 20
    245e:	51 96       	adiw	r26, 0x11	; 17
    2460:	1c 92       	st	X, r1
    2462:	51 97       	sbiw	r26, 0x11	; 17
    2464:	52 96       	adiw	r26, 0x12	; 18
    2466:	1c 92       	st	X, r1
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	67 c0       	rjmp	.+206    	; 0x253c <u8g_GetGlyph+0x198>
    246e:	df 14       	cp	r13, r15
    2470:	60 f3       	brcs	.-40     	; 0x244a <u8g_GetGlyph+0xa6>
    2472:	8c 2d       	mov	r24, r12
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	fe 01       	movw	r30, r28
    2478:	24 91       	lpm	r18, Z
    247a:	2f 3f       	cpi	r18, 0xFF	; 255
    247c:	11 f4       	brne	.+4      	; 0x2482 <u8g_GetGlyph+0xde>
    247e:	21 96       	adiw	r28, 0x01	; 1
    2480:	58 c0       	rjmp	.+176    	; 0x2532 <u8g_GetGlyph+0x18e>
    2482:	fe 10       	cpse	r15, r14
    2484:	4d c0       	rjmp	.+154    	; 0x2520 <u8g_GetGlyph+0x17c>
    2486:	d8 01       	movw	r26, r16
    2488:	14 96       	adiw	r26, 0x04	; 4
    248a:	8d 91       	ld	r24, X+
    248c:	9c 91       	ld	r25, X
    248e:	15 97       	sbiw	r26, 0x05	; 5
    2490:	0e 94 b5 11 	call	0x236a	; 0x236a <u8g_font_GetFormat>
    2494:	9e 01       	movw	r18, r28
    2496:	2f 5f       	subi	r18, 0xFF	; 255
    2498:	3f 4f       	sbci	r19, 0xFF	; 255
    249a:	fe 01       	movw	r30, r28
    249c:	88 23       	and	r24, r24
    249e:	11 f0       	breq	.+4      	; 0x24a4 <u8g_GetGlyph+0x100>
    24a0:	82 30       	cpi	r24, 0x02	; 2
    24a2:	e1 f4       	brne	.+56     	; 0x24dc <u8g_GetGlyph+0x138>
    24a4:	84 91       	lpm	r24, Z
    24a6:	d8 01       	movw	r26, r16
    24a8:	53 96       	adiw	r26, 0x13	; 19
    24aa:	8c 93       	st	X, r24
    24ac:	53 97       	sbiw	r26, 0x13	; 19
    24ae:	f9 01       	movw	r30, r18
    24b0:	24 91       	lpm	r18, Z
    24b2:	54 96       	adiw	r26, 0x14	; 20
    24b4:	2c 93       	st	X, r18
    24b6:	54 97       	sbiw	r26, 0x14	; 20
    24b8:	fe 01       	movw	r30, r28
    24ba:	33 96       	adiw	r30, 0x03	; 3
    24bc:	e4 91       	lpm	r30, Z
    24be:	50 96       	adiw	r26, 0x10	; 16
    24c0:	ec 93       	st	X, r30
    24c2:	50 97       	sbiw	r26, 0x10	; 16
    24c4:	fe 01       	movw	r30, r28
    24c6:	34 96       	adiw	r30, 0x04	; 4
    24c8:	e4 91       	lpm	r30, Z
    24ca:	51 96       	adiw	r26, 0x11	; 17
    24cc:	ec 93       	st	X, r30
    24ce:	51 97       	sbiw	r26, 0x11	; 17
    24d0:	fe 01       	movw	r30, r28
    24d2:	35 96       	adiw	r30, 0x05	; 5
    24d4:	e4 91       	lpm	r30, Z
    24d6:	52 96       	adiw	r26, 0x12	; 18
    24d8:	ec 93       	st	X, r30
    24da:	20 c0       	rjmp	.+64     	; 0x251c <u8g_GetGlyph+0x178>
    24dc:	84 91       	lpm	r24, Z
    24de:	98 2f       	mov	r25, r24
    24e0:	9f 70       	andi	r25, 0x0F	; 15
    24e2:	92 50       	subi	r25, 0x02	; 2
    24e4:	d8 01       	movw	r26, r16
    24e6:	52 96       	adiw	r26, 0x12	; 18
    24e8:	9c 93       	st	X, r25
    24ea:	52 97       	sbiw	r26, 0x12	; 18
    24ec:	82 95       	swap	r24
    24ee:	8f 70       	andi	r24, 0x0F	; 15
    24f0:	51 96       	adiw	r26, 0x11	; 17
    24f2:	8c 93       	st	X, r24
    24f4:	51 97       	sbiw	r26, 0x11	; 17
    24f6:	f9 01       	movw	r30, r18
    24f8:	24 91       	lpm	r18, Z
    24fa:	82 2f       	mov	r24, r18
    24fc:	8f 70       	andi	r24, 0x0F	; 15
    24fe:	54 96       	adiw	r26, 0x14	; 20
    2500:	8c 93       	st	X, r24
    2502:	54 97       	sbiw	r26, 0x14	; 20
    2504:	22 95       	swap	r18
    2506:	2f 70       	andi	r18, 0x0F	; 15
    2508:	53 96       	adiw	r26, 0x13	; 19
    250a:	2c 93       	st	X, r18
    250c:	53 97       	sbiw	r26, 0x13	; 19
    250e:	fe 01       	movw	r30, r28
    2510:	32 96       	adiw	r30, 0x02	; 2
    2512:	e4 91       	lpm	r30, Z
    2514:	e2 95       	swap	r30
    2516:	ef 70       	andi	r30, 0x0F	; 15
    2518:	50 96       	adiw	r26, 0x10	; 16
    251a:	ec 93       	st	X, r30
    251c:	ce 01       	movw	r24, r28
    251e:	0e c0       	rjmp	.+28     	; 0x253c <u8g_GetGlyph+0x198>
    2520:	fe 01       	movw	r30, r28
    2522:	32 96       	adiw	r30, 0x02	; 2
    2524:	e4 91       	lpm	r30, Z
    2526:	eb 21       	and	r30, r11
    2528:	9c 01       	movw	r18, r24
    252a:	2e 0f       	add	r18, r30
    252c:	31 1d       	adc	r19, r1
    252e:	c2 0f       	add	r28, r18
    2530:	d3 1f       	adc	r29, r19
    2532:	fd 14       	cp	r15, r13
    2534:	09 f4       	brne	.+2      	; 0x2538 <u8g_GetGlyph+0x194>
    2536:	89 cf       	rjmp	.-238    	; 0x244a <u8g_GetGlyph+0xa6>
    2538:	f3 94       	inc	r15
    253a:	9d cf       	rjmp	.-198    	; 0x2476 <u8g_GetGlyph+0xd2>
    253c:	df 91       	pop	r29
    253e:	cf 91       	pop	r28
    2540:	1f 91       	pop	r17
    2542:	0f 91       	pop	r16
    2544:	ff 90       	pop	r15
    2546:	ef 90       	pop	r14
    2548:	df 90       	pop	r13
    254a:	cf 90       	pop	r12
    254c:	bf 90       	pop	r11
    254e:	08 95       	ret

00002550 <u8g_draw_glyph>:
    2550:	6f 92       	push	r6
    2552:	7f 92       	push	r7
    2554:	8f 92       	push	r8
    2556:	9f 92       	push	r9
    2558:	af 92       	push	r10
    255a:	bf 92       	push	r11
    255c:	cf 92       	push	r12
    255e:	df 92       	push	r13
    2560:	ef 92       	push	r14
    2562:	ff 92       	push	r15
    2564:	0f 93       	push	r16
    2566:	1f 93       	push	r17
    2568:	cf 93       	push	r28
    256a:	df 93       	push	r29
    256c:	ec 01       	movw	r28, r24
    256e:	c6 2e       	mov	r12, r22
    2570:	74 2e       	mov	r7, r20
    2572:	62 2f       	mov	r22, r18
    2574:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <u8g_GetGlyph>
    2578:	7c 01       	movw	r14, r24
    257a:	89 2b       	or	r24, r25
    257c:	c9 f1       	breq	.+114    	; 0x25f0 <u8g_draw_glyph+0xa0>
    257e:	8c 81       	ldd	r24, Y+4	; 0x04
    2580:	9d 81       	ldd	r25, Y+5	; 0x05
    2582:	0e 94 b8 11 	call	0x2370	; 0x2370 <u8g_font_GetFontGlyphStructureSize>
    2586:	b8 2e       	mov	r11, r24
    2588:	1b 89       	ldd	r17, Y+19	; 0x13
    258a:	0c 89       	ldd	r16, Y+20	; 0x14
    258c:	89 89       	ldd	r24, Y+17	; 0x11
    258e:	c8 0e       	add	r12, r24
    2590:	8a 89       	ldd	r24, Y+18	; 0x12
    2592:	78 1a       	sub	r7, r24
    2594:	d7 2c       	mov	r13, r7
    2596:	d0 1a       	sub	r13, r16
    2598:	21 2f       	mov	r18, r17
    259a:	4d 2d       	mov	r20, r13
    259c:	6c 2d       	mov	r22, r12
    259e:	ce 01       	movw	r24, r28
    25a0:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <u8g_IsBBXIntersection>
    25a4:	88 23       	and	r24, r24
    25a6:	11 f1       	breq	.+68     	; 0x25ec <u8g_draw_glyph+0x9c>
    25a8:	eb 0c       	add	r14, r11
    25aa:	f1 1c       	adc	r15, r1
    25ac:	19 5f       	subi	r17, 0xF9	; 249
    25ae:	16 95       	lsr	r17
    25b0:	16 95       	lsr	r17
    25b2:	16 95       	lsr	r17
    25b4:	81 2e       	mov	r8, r17
    25b6:	91 2c       	mov	r9, r1
    25b8:	7d 14       	cp	r7, r13
    25ba:	c1 f0       	breq	.+48     	; 0x25ec <u8g_draw_glyph+0x9c>
    25bc:	6c 2c       	mov	r6, r12
    25be:	57 01       	movw	r10, r14
    25c0:	8a 2d       	mov	r24, r10
    25c2:	8e 19       	sub	r24, r14
    25c4:	81 17       	cp	r24, r17
    25c6:	70 f4       	brcc	.+28     	; 0x25e4 <u8g_draw_glyph+0x94>
    25c8:	f5 01       	movw	r30, r10
    25ca:	04 91       	lpm	r16, Z
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	4d 2d       	mov	r20, r13
    25d0:	66 2d       	mov	r22, r6
    25d2:	ce 01       	movw	r24, r28
    25d4:	0e 94 a0 14 	call	0x2940	; 0x2940 <u8g_Draw8Pixel>
    25d8:	ff ef       	ldi	r31, 0xFF	; 255
    25da:	af 1a       	sub	r10, r31
    25dc:	bf 0a       	sbc	r11, r31
    25de:	88 e0       	ldi	r24, 0x08	; 8
    25e0:	68 0e       	add	r6, r24
    25e2:	ee cf       	rjmp	.-36     	; 0x25c0 <u8g_draw_glyph+0x70>
    25e4:	e8 0c       	add	r14, r8
    25e6:	f9 1c       	adc	r15, r9
    25e8:	d3 94       	inc	r13
    25ea:	e6 cf       	rjmp	.-52     	; 0x25b8 <u8g_draw_glyph+0x68>
    25ec:	88 89       	ldd	r24, Y+16	; 0x10
    25ee:	01 c0       	rjmp	.+2      	; 0x25f2 <u8g_draw_glyph+0xa2>
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	df 91       	pop	r29
    25f4:	cf 91       	pop	r28
    25f6:	1f 91       	pop	r17
    25f8:	0f 91       	pop	r16
    25fa:	ff 90       	pop	r15
    25fc:	ef 90       	pop	r14
    25fe:	df 90       	pop	r13
    2600:	cf 90       	pop	r12
    2602:	bf 90       	pop	r11
    2604:	af 90       	pop	r10
    2606:	9f 90       	pop	r9
    2608:	8f 90       	pop	r8
    260a:	7f 90       	pop	r7
    260c:	6f 90       	pop	r6
    260e:	08 95       	ret

00002610 <u8g_DrawGlyph>:
    2610:	ff 92       	push	r15
    2612:	0f 93       	push	r16
    2614:	1f 93       	push	r17
    2616:	cf 93       	push	r28
    2618:	df 93       	push	r29
    261a:	ec 01       	movw	r28, r24
    261c:	06 2f       	mov	r16, r22
    261e:	14 2f       	mov	r17, r20
    2620:	f2 2e       	mov	r15, r18
    2622:	ed 89       	ldd	r30, Y+21	; 0x15
    2624:	fe 89       	ldd	r31, Y+22	; 0x16
    2626:	09 95       	icall
    2628:	48 2f       	mov	r20, r24
    262a:	41 0f       	add	r20, r17
    262c:	2f 2d       	mov	r18, r15
    262e:	60 2f       	mov	r22, r16
    2630:	ce 01       	movw	r24, r28
    2632:	df 91       	pop	r29
    2634:	cf 91       	pop	r28
    2636:	1f 91       	pop	r17
    2638:	0f 91       	pop	r16
    263a:	ff 90       	pop	r15
    263c:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <u8g_draw_glyph>

00002640 <u8g_UpdateRefHeight>:
    2640:	dc 01       	movw	r26, r24
    2642:	14 96       	adiw	r26, 0x04	; 4
    2644:	2d 91       	ld	r18, X+
    2646:	3c 91       	ld	r19, X
    2648:	15 97       	sbiw	r26, 0x05	; 5
    264a:	21 15       	cp	r18, r1
    264c:	31 05       	cpc	r19, r1
    264e:	09 f4       	brne	.+2      	; 0x2652 <u8g_UpdateRefHeight+0x12>
    2650:	3f c0       	rjmp	.+126    	; 0x26d0 <u8g_UpdateRefHeight+0x90>
    2652:	57 96       	adiw	r26, 0x17	; 23
    2654:	8c 91       	ld	r24, X
    2656:	57 97       	sbiw	r26, 0x17	; 23
    2658:	f9 01       	movw	r30, r18
    265a:	81 11       	cpse	r24, r1
    265c:	08 c0       	rjmp	.+16     	; 0x266e <u8g_UpdateRefHeight+0x2e>
    265e:	35 96       	adiw	r30, 0x05	; 5
    2660:	e4 91       	lpm	r30, Z
    2662:	58 96       	adiw	r26, 0x18	; 24
    2664:	ec 93       	st	X, r30
    2666:	58 97       	sbiw	r26, 0x18	; 24
    2668:	f9 01       	movw	r30, r18
    266a:	3c 96       	adiw	r30, 0x0c	; 12
    266c:	11 c0       	rjmp	.+34     	; 0x2690 <u8g_UpdateRefHeight+0x50>
    266e:	81 30       	cpi	r24, 0x01	; 1
    2670:	41 f4       	brne	.+16     	; 0x2682 <u8g_UpdateRefHeight+0x42>
    2672:	3f 96       	adiw	r30, 0x0f	; 15
    2674:	e4 91       	lpm	r30, Z
    2676:	58 96       	adiw	r26, 0x18	; 24
    2678:	ec 93       	st	X, r30
    267a:	58 97       	sbiw	r26, 0x18	; 24
    267c:	f9 01       	movw	r30, r18
    267e:	70 96       	adiw	r30, 0x10	; 16
    2680:	07 c0       	rjmp	.+14     	; 0x2690 <u8g_UpdateRefHeight+0x50>
    2682:	3d 96       	adiw	r30, 0x0d	; 13
    2684:	e4 91       	lpm	r30, Z
    2686:	58 96       	adiw	r26, 0x18	; 24
    2688:	ec 93       	st	X, r30
    268a:	58 97       	sbiw	r26, 0x18	; 24
    268c:	f9 01       	movw	r30, r18
    268e:	3e 96       	adiw	r30, 0x0e	; 14
    2690:	e4 91       	lpm	r30, Z
    2692:	59 96       	adiw	r26, 0x19	; 25
    2694:	ec 93       	st	X, r30
    2696:	59 97       	sbiw	r26, 0x19	; 25
    2698:	58 96       	adiw	r26, 0x18	; 24
    269a:	8c 91       	ld	r24, X
    269c:	58 97       	sbiw	r26, 0x18	; 24
    269e:	08 2e       	mov	r0, r24
    26a0:	00 0c       	add	r0, r0
    26a2:	99 0b       	sbc	r25, r25
    26a4:	59 96       	adiw	r26, 0x19	; 25
    26a6:	2c 91       	ld	r18, X
    26a8:	59 97       	sbiw	r26, 0x19	; 25
    26aa:	82 1b       	sub	r24, r18
    26ac:	91 09       	sbc	r25, r1
    26ae:	27 fd       	sbrc	r18, 7
    26b0:	93 95       	inc	r25
    26b2:	5a 96       	adiw	r26, 0x1a	; 26
    26b4:	2c 91       	ld	r18, X
    26b6:	5a 97       	sbiw	r26, 0x1a	; 26
    26b8:	20 34       	cpi	r18, 0x40	; 64
    26ba:	41 f0       	breq	.+16     	; 0x26cc <u8g_UpdateRefHeight+0x8c>
    26bc:	82 9f       	mul	r24, r18
    26be:	c0 01       	movw	r24, r0
    26c0:	11 24       	eor	r1, r1
    26c2:	26 e0       	ldi	r18, 0x06	; 6
    26c4:	96 95       	lsr	r25
    26c6:	87 95       	ror	r24
    26c8:	2a 95       	dec	r18
    26ca:	e1 f7       	brne	.-8      	; 0x26c4 <u8g_UpdateRefHeight+0x84>
    26cc:	5b 96       	adiw	r26, 0x1b	; 27
    26ce:	8c 93       	st	X, r24
    26d0:	08 95       	ret

000026d2 <u8g_SetFontPosBaseline>:
    26d2:	22 ec       	ldi	r18, 0xC2	; 194
    26d4:	31 e1       	ldi	r19, 0x11	; 17
    26d6:	fc 01       	movw	r30, r24
    26d8:	36 8b       	std	Z+22, r19	; 0x16
    26da:	25 8b       	std	Z+21, r18	; 0x15
    26dc:	08 95       	ret

000026de <u8g_SetFont>:

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
    26de:	cf 93       	push	r28
    26e0:	df 93       	push	r29
  if ( u8g->font != font )
    26e2:	fc 01       	movw	r30, r24
    26e4:	24 81       	ldd	r18, Z+4	; 0x04
    26e6:	35 81       	ldd	r19, Z+5	; 0x05
    26e8:	26 17       	cp	r18, r22
    26ea:	37 07       	cpc	r19, r23
    26ec:	49 f0       	breq	.+18     	; 0x2700 <u8g_SetFont+0x22>
    26ee:	ec 01       	movw	r28, r24
  {
    u8g->font = font;
    26f0:	75 83       	std	Z+5, r23	; 0x05
    26f2:	64 83       	std	Z+4, r22	; 0x04
    u8g_UpdateRefHeight(u8g);
    26f4:	0e 94 20 13 	call	0x2640	; 0x2640 <u8g_UpdateRefHeight>
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
    26f8:	82 ec       	ldi	r24, 0xC2	; 194
    26fa:	91 e1       	ldi	r25, 0x11	; 17
    26fc:	9e 8b       	std	Y+22, r25	; 0x16
    26fe:	8d 8b       	std	Y+21, r24	; 0x15
  {
    u8g->font = font;
    u8g_UpdateRefHeight(u8g);
    u8g_SetFontPosBaseline(u8g);
  }
}
    2700:	df 91       	pop	r29
    2702:	cf 91       	pop	r28
    2704:	08 95       	ret

00002706 <u8g_init_data>:
  irgb.idx = idx;
  irgb.r = r;
  irgb.g = g;
  irgb.b = b;  
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}
    2706:	1f 93       	push	r17
    2708:	cf 93       	push	r28
    270a:	df 93       	push	r29
    270c:	ec 01       	movw	r28, r24
    270e:	1d 82       	std	Y+5, r1	; 0x05
    2710:	1c 82       	std	Y+4, r1	; 0x04
    2712:	1f 82       	std	Y+7, r1	; 0x07
    2714:	1e 82       	std	Y+6, r1	; 0x06
    2716:	19 86       	std	Y+9, r1	; 0x09
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	88 87       	std	Y+8, r24	; 0x08
    271c:	82 e2       	ldi	r24, 0x22	; 34
    271e:	8a 87       	std	Y+10, r24	; 0x0a
    2720:	1f 86       	std	Y+15, r1	; 0x0f
    2722:	1e 86       	std	Y+14, r1	; 0x0e
    2724:	fe 01       	movw	r30, r28
    2726:	b3 96       	adiw	r30, 0x23	; 35
    2728:	ce 01       	movw	r24, r28
    272a:	c1 96       	adiw	r24, 0x31	; 49
    272c:	2f ef       	ldi	r18, 0xFF	; 255
    272e:	21 93       	st	Z+, r18
    2730:	e8 17       	cp	r30, r24
    2732:	f9 07       	cpc	r31, r25
    2734:	e1 f7       	brne	.-8      	; 0x272e <u8g_init_data+0x28>
    2736:	11 e0       	ldi	r17, 0x01	; 1
    2738:	18 a3       	std	Y+32, r17	; 0x20
    273a:	ce 01       	movw	r24, r28
    273c:	0e 94 69 13 	call	0x26d2	; 0x26d2 <u8g_SetFontPosBaseline>
    2740:	1f 8b       	std	Y+23, r17	; 0x17
    2742:	18 8e       	std	Y+24, r1	; 0x18
    2744:	19 8e       	std	Y+25, r1	; 0x19
    2746:	80 e4       	ldi	r24, 0x40	; 64
    2748:	8a 8f       	std	Y+26, r24	; 0x1a
    274a:	1b 8e       	std	Y+27, r1	; 0x1b
    274c:	8e ea       	ldi	r24, 0xAE	; 174
    274e:	95 e1       	ldi	r25, 0x15	; 21
    2750:	9a ab       	std	Y+50, r25	; 0x32
    2752:	89 ab       	std	Y+49, r24	; 0x31
    2754:	df 91       	pop	r29
    2756:	cf 91       	pop	r28
    2758:	1f 91       	pop	r17
    275a:	08 95       	ret

0000275c <u8g_call_dev_fn>:
    275c:	db 01       	movw	r26, r22
    275e:	ed 91       	ld	r30, X+
    2760:	fc 91       	ld	r31, X
    2762:	09 94       	ijmp

00002764 <u8g_InitLL>:
    2764:	0f 93       	push	r16
    2766:	1f 93       	push	r17
    2768:	cf 93       	push	r28
    276a:	df 93       	push	r29
    276c:	ec 01       	movw	r28, r24
    276e:	8b 01       	movw	r16, r22
    2770:	e9 a9       	ldd	r30, Y+49	; 0x31
    2772:	fa a9       	ldd	r31, Y+50	; 0x32
    2774:	82 e0       	ldi	r24, 0x02	; 2
    2776:	09 95       	icall
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	4a e0       	ldi	r20, 0x0A	; 10
    277e:	b8 01       	movw	r22, r16
    2780:	ce 01       	movw	r24, r28
    2782:	0e 94 ae 13 	call	0x275c	; 0x275c <u8g_call_dev_fn>
    2786:	18 2f       	mov	r17, r24
    2788:	e9 a9       	ldd	r30, Y+49	; 0x31
    278a:	fa a9       	ldd	r31, Y+50	; 0x32
    278c:	83 e0       	ldi	r24, 0x03	; 3
    278e:	09 95       	icall
    2790:	e9 a9       	ldd	r30, Y+49	; 0x31
    2792:	fa a9       	ldd	r31, Y+50	; 0x32
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	09 95       	icall
    2798:	81 2f       	mov	r24, r17
    279a:	df 91       	pop	r29
    279c:	cf 91       	pop	r28
    279e:	1f 91       	pop	r17
    27a0:	0f 91       	pop	r16
    27a2:	08 95       	ret

000027a4 <u8g_FirstPageLL>:
    27a4:	0f 93       	push	r16
    27a6:	1f 93       	push	r17
    27a8:	cf 93       	push	r28
    27aa:	df 93       	push	r29
    27ac:	ec 01       	movw	r28, r24
    27ae:	8b 01       	movw	r16, r22
    27b0:	e9 a9       	ldd	r30, Y+49	; 0x31
    27b2:	fa a9       	ldd	r31, Y+50	; 0x32
    27b4:	82 e0       	ldi	r24, 0x02	; 2
    27b6:	09 95       	icall
    27b8:	e9 a9       	ldd	r30, Y+49	; 0x31
    27ba:	fa a9       	ldd	r31, Y+50	; 0x32
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	09 95       	icall
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	44 e1       	ldi	r20, 0x14	; 20
    27c6:	b8 01       	movw	r22, r16
    27c8:	ce 01       	movw	r24, r28
    27ca:	0e 94 ae 13 	call	0x275c	; 0x275c <u8g_call_dev_fn>
    27ce:	9e 01       	movw	r18, r28
    27d0:	2d 5c       	subi	r18, 0xCD	; 205
    27d2:	3f 4f       	sbci	r19, 0xFF	; 255
    27d4:	47 e1       	ldi	r20, 0x17	; 23
    27d6:	b8 01       	movw	r22, r16
    27d8:	ce 01       	movw	r24, r28
    27da:	0e 94 ae 13 	call	0x275c	; 0x275c <u8g_call_dev_fn>
    27de:	e9 a9       	ldd	r30, Y+49	; 0x31
    27e0:	fa a9       	ldd	r31, Y+50	; 0x32
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	df 91       	pop	r29
    27e6:	cf 91       	pop	r28
    27e8:	1f 91       	pop	r17
    27ea:	0f 91       	pop	r16
    27ec:	09 94       	ijmp

000027ee <u8g_NextPageLL>:
    27ee:	ef 92       	push	r14
    27f0:	ff 92       	push	r15
    27f2:	1f 93       	push	r17
    27f4:	cf 93       	push	r28
    27f6:	df 93       	push	r29
    27f8:	ec 01       	movw	r28, r24
    27fa:	7b 01       	movw	r14, r22
    27fc:	e9 a9       	ldd	r30, Y+49	; 0x31
    27fe:	fa a9       	ldd	r31, Y+50	; 0x32
    2800:	82 e0       	ldi	r24, 0x02	; 2
    2802:	09 95       	icall
    2804:	e9 a9       	ldd	r30, Y+49	; 0x31
    2806:	fa a9       	ldd	r31, Y+50	; 0x32
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	09 95       	icall
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	45 e1       	ldi	r20, 0x15	; 21
    2812:	b7 01       	movw	r22, r14
    2814:	ce 01       	movw	r24, r28
    2816:	0e 94 ae 13 	call	0x275c	; 0x275c <u8g_call_dev_fn>
    281a:	18 2f       	mov	r17, r24
    281c:	88 23       	and	r24, r24
    281e:	41 f0       	breq	.+16     	; 0x2830 <u8g_NextPageLL+0x42>
    2820:	9e 01       	movw	r18, r28
    2822:	2d 5c       	subi	r18, 0xCD	; 205
    2824:	3f 4f       	sbci	r19, 0xFF	; 255
    2826:	47 e1       	ldi	r20, 0x17	; 23
    2828:	b7 01       	movw	r22, r14
    282a:	ce 01       	movw	r24, r28
    282c:	0e 94 ae 13 	call	0x275c	; 0x275c <u8g_call_dev_fn>
    2830:	e9 a9       	ldd	r30, Y+49	; 0x31
    2832:	fa a9       	ldd	r31, Y+50	; 0x32
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	09 95       	icall
    2838:	81 2f       	mov	r24, r17
    283a:	df 91       	pop	r29
    283c:	cf 91       	pop	r28
    283e:	1f 91       	pop	r17
    2840:	ff 90       	pop	r15
    2842:	ef 90       	pop	r14
    2844:	08 95       	ret

00002846 <u8g_GetWidthLL>:
    2846:	cf 93       	push	r28
    2848:	df 93       	push	r29
    284a:	1f 92       	push	r1
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
    2850:	9e 01       	movw	r18, r28
    2852:	2f 5f       	subi	r18, 0xFF	; 255
    2854:	3f 4f       	sbci	r19, 0xFF	; 255
    2856:	46 e4       	ldi	r20, 0x46	; 70
    2858:	0e 94 ae 13 	call	0x275c	; 0x275c <u8g_call_dev_fn>
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	0f 90       	pop	r0
    2860:	df 91       	pop	r29
    2862:	cf 91       	pop	r28
    2864:	08 95       	ret

00002866 <u8g_GetHeightLL>:
    2866:	cf 93       	push	r28
    2868:	df 93       	push	r29
    286a:	1f 92       	push	r1
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
    2870:	9e 01       	movw	r18, r28
    2872:	2f 5f       	subi	r18, 0xFF	; 255
    2874:	3f 4f       	sbci	r19, 0xFF	; 255
    2876:	47 e4       	ldi	r20, 0x47	; 71
    2878:	0e 94 ae 13 	call	0x275c	; 0x275c <u8g_call_dev_fn>
    287c:	89 81       	ldd	r24, Y+1	; 0x01
    287e:	0f 90       	pop	r0
    2880:	df 91       	pop	r29
    2882:	cf 91       	pop	r28
    2884:	08 95       	ret

00002886 <u8g_GetModeLL>:
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	48 e4       	ldi	r20, 0x48	; 72
    288c:	0c 94 ae 13 	jmp	0x275c	; 0x275c <u8g_call_dev_fn>

00002890 <u8g_UpdateDimension>:
    2890:	cf 93       	push	r28
    2892:	df 93       	push	r29
    2894:	ec 01       	movw	r28, r24
    2896:	6a 81       	ldd	r22, Y+2	; 0x02
    2898:	7b 81       	ldd	r23, Y+3	; 0x03
    289a:	0e 94 23 14 	call	0x2846	; 0x2846 <u8g_GetWidthLL>
    289e:	88 83       	st	Y, r24
    28a0:	6a 81       	ldd	r22, Y+2	; 0x02
    28a2:	7b 81       	ldd	r23, Y+3	; 0x03
    28a4:	ce 01       	movw	r24, r28
    28a6:	0e 94 33 14 	call	0x2866	; 0x2866 <u8g_GetHeightLL>
    28aa:	89 83       	std	Y+1, r24	; 0x01
    28ac:	6a 81       	ldd	r22, Y+2	; 0x02
    28ae:	7b 81       	ldd	r23, Y+3	; 0x03
    28b0:	ce 01       	movw	r24, r28
    28b2:	0e 94 43 14 	call	0x2886	; 0x2886 <u8g_GetModeLL>
    28b6:	8b 87       	std	Y+11, r24	; 0x0b
    28b8:	9e 01       	movw	r18, r28
    28ba:	2d 5c       	subi	r18, 0xCD	; 205
    28bc:	3f 4f       	sbci	r19, 0xFF	; 255
    28be:	6a 81       	ldd	r22, Y+2	; 0x02
    28c0:	7b 81       	ldd	r23, Y+3	; 0x03
    28c2:	47 e1       	ldi	r20, 0x17	; 23
    28c4:	ce 01       	movw	r24, r28
    28c6:	df 91       	pop	r29
    28c8:	cf 91       	pop	r28
    28ca:	0c 94 ae 13 	jmp	0x275c	; 0x275c <u8g_call_dev_fn>

000028ce <u8g_Begin>:
    28ce:	cf 93       	push	r28
    28d0:	df 93       	push	r29
    28d2:	ec 01       	movw	r28, r24
    28d4:	6a 81       	ldd	r22, Y+2	; 0x02
    28d6:	7b 81       	ldd	r23, Y+3	; 0x03
    28d8:	0e 94 b2 13 	call	0x2764	; 0x2764 <u8g_InitLL>
    28dc:	88 23       	and	r24, r24
    28de:	21 f0       	breq	.+8      	; 0x28e8 <u8g_Begin+0x1a>
    28e0:	ce 01       	movw	r24, r28
    28e2:	0e 94 48 14 	call	0x2890	; 0x2890 <u8g_UpdateDimension>
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	df 91       	pop	r29
    28ea:	cf 91       	pop	r28
    28ec:	08 95       	ret

000028ee <u8g_InitI2C>:
    28ee:	ef 92       	push	r14
    28f0:	ff 92       	push	r15
    28f2:	1f 93       	push	r17
    28f4:	cf 93       	push	r28
    28f6:	df 93       	push	r29
    28f8:	ec 01       	movw	r28, r24
    28fa:	7b 01       	movw	r14, r22
    28fc:	14 2f       	mov	r17, r20
    28fe:	0e 94 83 13 	call	0x2706	; 0x2706 <u8g_init_data>
    2902:	fb 82       	std	Y+3, r15	; 0x03
    2904:	ea 82       	std	Y+2, r14	; 0x02
    2906:	1e a7       	std	Y+46, r17	; 0x2e
    2908:	ce 01       	movw	r24, r28
    290a:	df 91       	pop	r29
    290c:	cf 91       	pop	r28
    290e:	1f 91       	pop	r17
    2910:	ff 90       	pop	r15
    2912:	ef 90       	pop	r14
    2914:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <u8g_Begin>

00002918 <u8g_FirstPage>:
    2918:	fc 01       	movw	r30, r24
    291a:	62 81       	ldd	r22, Z+2	; 0x02
    291c:	73 81       	ldd	r23, Z+3	; 0x03
    291e:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <u8g_FirstPageLL>

00002922 <u8g_NextPage>:
    2922:	cf 93       	push	r28
    2924:	df 93       	push	r29
    2926:	ec 01       	movw	r28, r24
    2928:	ee 85       	ldd	r30, Y+14	; 0x0e
    292a:	ff 85       	ldd	r31, Y+15	; 0x0f
    292c:	30 97       	sbiw	r30, 0x00	; 0
    292e:	09 f0       	breq	.+2      	; 0x2932 <u8g_NextPage+0x10>
    2930:	09 95       	icall
    2932:	6a 81       	ldd	r22, Y+2	; 0x02
    2934:	7b 81       	ldd	r23, Y+3	; 0x03
    2936:	ce 01       	movw	r24, r28
    2938:	df 91       	pop	r29
    293a:	cf 91       	pop	r28
    293c:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <u8g_NextPageLL>

00002940 <u8g_Draw8Pixel>:
    2940:	0f 93       	push	r16
    2942:	fc 01       	movw	r30, r24
    2944:	82 81       	ldd	r24, Z+2	; 0x02
    2946:	93 81       	ldd	r25, Z+3	; 0x03
    2948:	64 8f       	std	Z+28, r22	; 0x1c
    294a:	45 8f       	std	Z+29, r20	; 0x1d
    294c:	27 8f       	std	Z+31, r18	; 0x1f
    294e:	06 8f       	std	Z+30, r16	; 0x1e
    2950:	9f 01       	movw	r18, r30
    2952:	24 5e       	subi	r18, 0xE4	; 228
    2954:	3f 4f       	sbci	r19, 0xFF	; 255
    2956:	4b e3       	ldi	r20, 0x3B	; 59
    2958:	bc 01       	movw	r22, r24
    295a:	cf 01       	movw	r24, r30
    295c:	0f 91       	pop	r16
    295e:	0c 94 ae 13 	jmp	0x275c	; 0x275c <u8g_call_dev_fn>

00002962 <u8g_SetColorIndex>:

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
    2962:	fc 01       	movw	r30, r24
    2964:	60 a3       	std	Z+32, r22	; 0x20
    2966:	08 95       	ret

00002968 <u8g_pb_Clear>:
  tmp = bbx->x;
  tmp += bbx->w;
  tmp--;
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}
    2968:	dc 01       	movw	r26, r24
    296a:	16 96       	adiw	r26, 0x06	; 6
    296c:	ed 91       	ld	r30, X+
    296e:	fc 91       	ld	r31, X
    2970:	17 97       	sbiw	r26, 0x07	; 7
    2972:	15 96       	adiw	r26, 0x05	; 5
    2974:	8c 91       	ld	r24, X
    2976:	9f 01       	movw	r18, r30
    2978:	28 0f       	add	r18, r24
    297a:	31 1d       	adc	r19, r1
    297c:	c9 01       	movw	r24, r18
    297e:	11 92       	st	Z+, r1
    2980:	e8 17       	cp	r30, r24
    2982:	f9 07       	cpc	r31, r25
    2984:	e1 f7       	brne	.-8      	; 0x297e <u8g_pb_Clear+0x16>
    2986:	08 95       	ret

00002988 <u8g_pb_IsYIntersection>:
    2988:	31 e0       	ldi	r19, 0x01	; 1
    298a:	fc 01       	movw	r30, r24
    298c:	23 81       	ldd	r18, Z+3	; 0x03
    298e:	26 17       	cp	r18, r22
    2990:	08 f4       	brcc	.+2      	; 0x2994 <u8g_pb_IsYIntersection+0xc>
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	21 e0       	ldi	r18, 0x01	; 1
    2996:	fc 01       	movw	r30, r24
    2998:	82 81       	ldd	r24, Z+2	; 0x02
    299a:	48 17       	cp	r20, r24
    299c:	08 f4       	brcc	.+2      	; 0x29a0 <u8g_pb_IsYIntersection+0x18>
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	91 e0       	ldi	r25, 0x01	; 1
    29a2:	46 17       	cp	r20, r22
    29a4:	08 f0       	brcs	.+2      	; 0x29a8 <u8g_pb_IsYIntersection+0x20>
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	89 2f       	mov	r24, r25
    29aa:	83 2b       	or	r24, r19
    29ac:	28 23       	and	r18, r24
    29ae:	83 2f       	mov	r24, r19
    29b0:	89 23       	and	r24, r25
    29b2:	82 2b       	or	r24, r18
    29b4:	08 95       	ret

000029b6 <u8g_pb_GetPageBox>:

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
    29b6:	dc 01       	movw	r26, r24
    29b8:	fb 01       	movw	r30, r22
  box->x0 = 0;
    29ba:	10 82       	st	Z, r1
  box->y0 = pb->p.page_y0;
    29bc:	12 96       	adiw	r26, 0x02	; 2
    29be:	8c 91       	ld	r24, X
    29c0:	12 97       	sbiw	r26, 0x02	; 2
    29c2:	81 83       	std	Z+1, r24	; 0x01
  box->x1 = pb->width;
  box->x1--;
    29c4:	15 96       	adiw	r26, 0x05	; 5
    29c6:	8c 91       	ld	r24, X
    29c8:	15 97       	sbiw	r26, 0x05	; 5
    29ca:	81 50       	subi	r24, 0x01	; 1
    29cc:	82 83       	std	Z+2, r24	; 0x02
  box->y1 = pb->p.page_y1;
    29ce:	13 96       	adiw	r26, 0x03	; 3
    29d0:	8c 91       	ld	r24, X
    29d2:	83 83       	std	Z+3, r24	; 0x03
    29d4:	08 95       	ret

000029d6 <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    29d6:	fb 01       	movw	r30, r22
    29d8:	41 81       	ldd	r20, Z+1	; 0x01
  v1 = v0;
  switch( arg_pixel->dir )
    29da:	23 81       	ldd	r18, Z+3	; 0x03
    29dc:	21 30       	cpi	r18, 0x01	; 1
    29de:	29 f0       	breq	.+10     	; 0x29ea <u8g_pb_Is8PixelVisible+0x14>
    29e0:	23 30       	cpi	r18, 0x03	; 3
    29e2:	31 f4       	brne	.+12     	; 0x29f0 <u8g_pb_Is8PixelVisible+0x1a>
      v1 += 8;          /* this is independent from the page height */
      break;
    case 2:  
      break;
    case 3: 
      v0 -= 8;
    29e4:	68 ef       	ldi	r22, 0xF8	; 248
    29e6:	64 0f       	add	r22, r20
      break;
    29e8:	04 c0       	rjmp	.+8      	; 0x29f2 <u8g_pb_Is8PixelVisible+0x1c>


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    29ea:	64 2f       	mov	r22, r20
  switch( arg_pixel->dir )
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
    29ec:	48 5f       	subi	r20, 0xF8	; 248
      break;
    29ee:	01 c0       	rjmp	.+2      	; 0x29f2 <u8g_pb_Is8PixelVisible+0x1c>


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    29f0:	64 2f       	mov	r22, r20
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
    29f2:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <u8g_pb_IsYIntersection>

000029f6 <u8g_pb_WriteBuffer>:
}



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
    29f6:	fc 01       	movw	r30, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	ba 01       	movw	r22, r20
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
    29fc:	26 81       	ldd	r18, Z+6	; 0x06
    29fe:	37 81       	ldd	r19, Z+7	; 0x07
    2a00:	45 81       	ldd	r20, Z+5	; 0x05
    2a02:	0c 94 e4 16 	jmp	0x2dc8	; 0x2dc8 <u8g_WriteSequence>

00002a06 <u8g_pb8v1_set_pixel>:
      case 2: arg_pixel->x--; break;
      case 3: arg_pixel->y--; break;
    }
    pixel <<= 1;
  } while( pixel != 0  );
}
    2a06:	dc 01       	movw	r26, r24
    2a08:	16 96       	adiw	r26, 0x06	; 6
    2a0a:	ed 91       	ld	r30, X+
    2a0c:	fc 91       	ld	r31, X
    2a0e:	17 97       	sbiw	r26, 0x07	; 7
    2a10:	12 96       	adiw	r26, 0x02	; 2
    2a12:	8c 91       	ld	r24, X
    2a14:	48 1b       	sub	r20, r24
    2a16:	47 70       	andi	r20, 0x07	; 7
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	01 c0       	rjmp	.+2      	; 0x2a20 <u8g_pb8v1_set_pixel+0x1a>
    2a1e:	88 0f       	add	r24, r24
    2a20:	4a 95       	dec	r20
    2a22:	ea f7       	brpl	.-6      	; 0x2a1e <u8g_pb8v1_set_pixel+0x18>
    2a24:	e6 0f       	add	r30, r22
    2a26:	f1 1d       	adc	r31, r1
    2a28:	30 81       	ld	r19, Z
    2a2a:	22 23       	and	r18, r18
    2a2c:	11 f0       	breq	.+4      	; 0x2a32 <u8g_pb8v1_set_pixel+0x2c>
    2a2e:	83 2b       	or	r24, r19
    2a30:	02 c0       	rjmp	.+4      	; 0x2a36 <u8g_pb8v1_set_pixel+0x30>
    2a32:	80 95       	com	r24
    2a34:	83 23       	and	r24, r19
    2a36:	80 83       	st	Z, r24
    2a38:	08 95       	ret

00002a3a <u8g_pb8v1_SetPixel>:
    2a3a:	fb 01       	movw	r30, r22
    2a3c:	41 81       	ldd	r20, Z+1	; 0x01
    2a3e:	dc 01       	movw	r26, r24
    2a40:	12 96       	adiw	r26, 0x02	; 2
    2a42:	2c 91       	ld	r18, X
    2a44:	12 97       	sbiw	r26, 0x02	; 2
    2a46:	42 17       	cp	r20, r18
    2a48:	68 f0       	brcs	.+26     	; 0x2a64 <u8g_pb8v1_SetPixel+0x2a>
    2a4a:	13 96       	adiw	r26, 0x03	; 3
    2a4c:	2c 91       	ld	r18, X
    2a4e:	13 97       	sbiw	r26, 0x03	; 3
    2a50:	24 17       	cp	r18, r20
    2a52:	40 f0       	brcs	.+16     	; 0x2a64 <u8g_pb8v1_SetPixel+0x2a>
    2a54:	60 81       	ld	r22, Z
    2a56:	15 96       	adiw	r26, 0x05	; 5
    2a58:	2c 91       	ld	r18, X
    2a5a:	62 17       	cp	r22, r18
    2a5c:	18 f4       	brcc	.+6      	; 0x2a64 <u8g_pb8v1_SetPixel+0x2a>
    2a5e:	24 81       	ldd	r18, Z+4	; 0x04
    2a60:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <u8g_pb8v1_set_pixel>
    2a64:	08 95       	ret

00002a66 <u8g_pb8v1_Set8PixelOpt2>:


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
    2a66:	cf 92       	push	r12
    2a68:	df 92       	push	r13
    2a6a:	ff 92       	push	r15
    2a6c:	0f 93       	push	r16
    2a6e:	1f 93       	push	r17
    2a70:	cf 93       	push	r28
    2a72:	df 93       	push	r29
    2a74:	6c 01       	movw	r12, r24
    2a76:	eb 01       	movw	r28, r22
  register uint8_t pixel = arg_pixel->pixel;
    2a78:	fa 80       	ldd	r15, Y+2	; 0x02
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
    2a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7c:	81 30       	cpi	r24, 0x01	; 1
    2a7e:	51 f0       	breq	.+20     	; 0x2a94 <u8g_pb8v1_Set8PixelOpt2+0x2e>
    2a80:	30 f0       	brcs	.+12     	; 0x2a8e <u8g_pb8v1_Set8PixelOpt2+0x28>
    2a82:	82 30       	cpi	r24, 0x02	; 2
    2a84:	49 f0       	breq	.+18     	; 0x2a98 <u8g_pb8v1_Set8PixelOpt2+0x32>
    2a86:	83 30       	cpi	r24, 0x03	; 3
    2a88:	51 f4       	brne	.+20     	; 0x2a9e <u8g_pb8v1_Set8PixelOpt2+0x38>
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    case 3: dy--; break;
    2a8a:	1f ef       	ldi	r17, 0xFF	; 255
    2a8c:	09 c0       	rjmp	.+18     	; 0x2aa0 <u8g_pb8v1_Set8PixelOpt2+0x3a>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    2a8e:	10 e0       	ldi	r17, 0x00	; 0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    2a90:	01 e0       	ldi	r16, 0x01	; 1
    2a92:	07 c0       	rjmp	.+14     	; 0x2aa2 <u8g_pb8v1_Set8PixelOpt2+0x3c>
    case 1: dy++; break;
    2a94:	11 e0       	ldi	r17, 0x01	; 1
    2a96:	04 c0       	rjmp	.+8      	; 0x2aa0 <u8g_pb8v1_Set8PixelOpt2+0x3a>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    2a98:	10 e0       	ldi	r17, 0x00	; 0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    2a9a:	0f ef       	ldi	r16, 0xFF	; 255
    2a9c:	02 c0       	rjmp	.+4      	; 0x2aa2 <u8g_pb8v1_Set8PixelOpt2+0x3c>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    2a9e:	10 e0       	ldi	r17, 0x00	; 0


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    2aa0:	00 e0       	ldi	r16, 0x00	; 0
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
    2aa2:	f7 fe       	sbrs	r15, 7
    2aa4:	04 c0       	rjmp	.+8      	; 0x2aae <u8g_pb8v1_Set8PixelOpt2+0x48>
      u8g_pb8v1_SetPixel(b, arg_pixel);
    2aa6:	be 01       	movw	r22, r28
    2aa8:	c6 01       	movw	r24, r12
    2aaa:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
    2aae:	88 81       	ld	r24, Y
    2ab0:	80 0f       	add	r24, r16
    2ab2:	88 83       	st	Y, r24
    arg_pixel->y += dy;
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	81 0f       	add	r24, r17
    2ab8:	89 83       	std	Y+1, r24	; 0x01
    pixel <<= 1;
    2aba:	ff 0c       	add	r15, r15
  } while( pixel != 0  );
    2abc:	91 f7       	brne	.-28     	; 0x2aa2 <u8g_pb8v1_Set8PixelOpt2+0x3c>
  
}
    2abe:	df 91       	pop	r29
    2ac0:	cf 91       	pop	r28
    2ac2:	1f 91       	pop	r17
    2ac4:	0f 91       	pop	r16
    2ac6:	ff 90       	pop	r15
    2ac8:	df 90       	pop	r13
    2aca:	cf 90       	pop	r12
    2acc:	08 95       	ret

00002ace <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    2ace:	0f 93       	push	r16
    2ad0:	1f 93       	push	r17
    2ad2:	cf 93       	push	r28
    2ad4:	df 93       	push	r29
    2ad6:	89 01       	movw	r16, r18
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    2ad8:	fb 01       	movw	r30, r22
    2ada:	c2 81       	ldd	r28, Z+2	; 0x02
    2adc:	d3 81       	ldd	r29, Z+3	; 0x03
  switch(msg)
    2ade:	42 33       	cpi	r20, 0x32	; 50
    2ae0:	f9 f0       	breq	.+62     	; 0x2b20 <u8g_dev_pb8v1_base_fn+0x52>
    2ae2:	68 f4       	brcc	.+26     	; 0x2afe <u8g_dev_pb8v1_base_fn+0x30>
    2ae4:	45 31       	cpi	r20, 0x15	; 21
    2ae6:	09 f1       	breq	.+66     	; 0x2b2a <u8g_dev_pb8v1_base_fn+0x5c>
    2ae8:	47 31       	cpi	r20, 0x17	; 23
    2aea:	41 f1       	breq	.+80     	; 0x2b3c <u8g_dev_pb8v1_base_fn+0x6e>
    2aec:	44 31       	cpi	r20, 0x14	; 20
    2aee:	81 f5       	brne	.+96     	; 0x2b50 <u8g_dev_pb8v1_base_fn+0x82>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
    2af0:	ce 01       	movw	r24, r28
    2af2:	0e 94 b4 14 	call	0x2968	; 0x2968 <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
    2af6:	ce 01       	movw	r24, r28
    2af8:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <u8g_page_First>
    2afc:	29 c0       	rjmp	.+82     	; 0x2b50 <u8g_dev_pb8v1_base_fn+0x82>
}

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
    2afe:	46 34       	cpi	r20, 0x46	; 70
    2b00:	11 f1       	breq	.+68     	; 0x2b46 <u8g_dev_pb8v1_base_fn+0x78>
    2b02:	47 34       	cpi	r20, 0x47	; 71
    2b04:	11 f1       	breq	.+68     	; 0x2b4a <u8g_dev_pb8v1_base_fn+0x7c>
    2b06:	4b 33       	cpi	r20, 0x3B	; 59
    2b08:	19 f5       	brne	.+70     	; 0x2b50 <u8g_dev_pb8v1_base_fn+0x82>
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
    2b0a:	b9 01       	movw	r22, r18
    2b0c:	ce 01       	movw	r24, r28
    2b0e:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <u8g_pb_Is8PixelVisible>
    2b12:	88 23       	and	r24, r24
    2b14:	e9 f0       	breq	.+58     	; 0x2b50 <u8g_dev_pb8v1_base_fn+0x82>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
    2b16:	b8 01       	movw	r22, r16
    2b18:	ce 01       	movw	r24, r28
    2b1a:	0e 94 33 15 	call	0x2a66	; 0x2a66 <u8g_pb8v1_Set8PixelOpt2>
    2b1e:	18 c0       	rjmp	.+48     	; 0x2b50 <u8g_dev_pb8v1_base_fn+0x82>
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
    2b20:	b9 01       	movw	r22, r18
    2b22:	ce 01       	movw	r24, r28
    2b24:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <u8g_pb8v1_SetPixel>
    2b28:	13 c0       	rjmp	.+38     	; 0x2b50 <u8g_dev_pb8v1_base_fn+0x82>
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
    2b2a:	ce 01       	movw	r24, r28
    2b2c:	0e 94 73 18 	call	0x30e6	; 0x30e6 <u8g_page_Next>
    2b30:	88 23       	and	r24, r24
    2b32:	79 f0       	breq	.+30     	; 0x2b52 <u8g_dev_pb8v1_base_fn+0x84>
        return 0;
      u8g_pb_Clear(pb);
    2b34:	ce 01       	movw	r24, r28
    2b36:	0e 94 b4 14 	call	0x2968	; 0x2968 <u8g_pb_Clear>
    2b3a:	0a c0       	rjmp	.+20     	; 0x2b50 <u8g_dev_pb8v1_base_fn+0x82>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
    2b3c:	b9 01       	movw	r22, r18
    2b3e:	ce 01       	movw	r24, r28
    2b40:	0e 94 db 14 	call	0x29b6	; 0x29b6 <u8g_pb_GetPageBox>
    2b44:	05 c0       	rjmp	.+10     	; 0x2b50 <u8g_dev_pb8v1_base_fn+0x82>
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
    2b46:	8d 81       	ldd	r24, Y+5	; 0x05
    2b48:	01 c0       	rjmp	.+2      	; 0x2b4c <u8g_dev_pb8v1_base_fn+0x7e>
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	f8 01       	movw	r30, r16
    2b4e:	80 83       	st	Z, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2b50:	81 e0       	ldi	r24, 0x01	; 1
}
    2b52:	df 91       	pop	r29
    2b54:	cf 91       	pop	r28
    2b56:	1f 91       	pop	r17
    2b58:	0f 91       	pop	r16
    2b5a:	08 95       	ret

00002b5c <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
    2b5c:	08 95       	ret

00002b5e <_ZN6Button6pullupEh>:
|| | Set the hold event time threshold
|| #
*/
void Button::setHoldThreshold(unsigned int holdTime) 
{ 
  holdEventThreshold = holdTime; 
    2b5e:	21 e0       	ldi	r18, 0x01	; 1
    2b60:	fc 01       	movw	r30, r24
    2b62:	21 83       	std	Z+1, r18	; 0x01
    2b64:	62 30       	cpi	r22, 0x02	; 2
    2b66:	21 f4       	brne	.+8      	; 0x2b70 <_ZN6Button6pullupEh+0x12>
    2b68:	61 e0       	ldi	r22, 0x01	; 1
    2b6a:	80 81       	ld	r24, Z
    2b6c:	0c 94 91 0f 	jmp	0x1f22	; 0x1f22 <digitalWrite>
    2b70:	08 95       	ret

00002b72 <_ZN6ButtonC1Ehhbi>:
    2b72:	ef 92       	push	r14
    2b74:	ff 92       	push	r15
    2b76:	0f 93       	push	r16
    2b78:	1f 93       	push	r17
    2b7a:	cf 93       	push	r28
    2b7c:	df 93       	push	r29
    2b7e:	ec 01       	movw	r28, r24
    2b80:	86 2f       	mov	r24, r22
    2b82:	f4 2e       	mov	r15, r20
    2b84:	e2 2e       	mov	r14, r18
    2b86:	68 83       	st	Y, r22
    2b88:	60 e0       	ldi	r22, 0x00	; 0
    2b8a:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <pinMode>
    2b8e:	eb 82       	std	Y+3, r14	; 0x03
    2b90:	1f 87       	std	Y+15, r17	; 0x0f
    2b92:	0e 87       	std	Y+14, r16	; 0x0e
    2b94:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <millis>
    2b98:	6a 87       	std	Y+10, r22	; 0x0a
    2b9a:	7b 87       	std	Y+11, r23	; 0x0b
    2b9c:	8c 87       	std	Y+12, r24	; 0x0c
    2b9e:	9d 87       	std	Y+13, r25	; 0x0d
    2ba0:	f1 10       	cpse	r15, r1
    2ba2:	02 c0       	rjmp	.+4      	; 0x2ba8 <_ZN6ButtonC1Ehhbi+0x36>
    2ba4:	19 82       	std	Y+1, r1	; 0x01
    2ba6:	04 c0       	rjmp	.+8      	; 0x2bb0 <_ZN6ButtonC1Ehhbi+0x3e>
    2ba8:	6f 2d       	mov	r22, r15
    2baa:	ce 01       	movw	r24, r28
    2bac:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <_ZN6Button6pullupEh>
    2bb0:	1a 82       	std	Y+2, r1	; 0x02
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	81 11       	cpse	r24, r1
    2bb6:	02 c0       	rjmp	.+4      	; 0x2bbc <_ZN6ButtonC1Ehhbi+0x4a>
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	8a 83       	std	Y+2, r24	; 0x02
    2bbc:	19 8a       	std	Y+17, r1	; 0x11
    2bbe:	18 8a       	std	Y+16, r1	; 0x10
    2bc0:	1b 8a       	std	Y+19, r1	; 0x13
    2bc2:	1a 8a       	std	Y+18, r1	; 0x12
    2bc4:	1d 8a       	std	Y+21, r1	; 0x15
    2bc6:	1c 8a       	std	Y+20, r1	; 0x14
    2bc8:	1f 8a       	std	Y+23, r1	; 0x17
    2bca:	1e 8a       	std	Y+22, r1	; 0x16
    2bcc:	19 8e       	std	Y+25, r1	; 0x19
    2bce:	18 8e       	std	Y+24, r1	; 0x18
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	8a 8f       	std	Y+26, r24	; 0x1a
    2bd4:	df 91       	pop	r29
    2bd6:	cf 91       	pop	r28
    2bd8:	1f 91       	pop	r17
    2bda:	0f 91       	pop	r16
    2bdc:	ff 90       	pop	r15
    2bde:	ef 90       	pop	r14
    2be0:	08 95       	ret

00002be2 <_ZN6Button7processEv>:
    2be2:	0f 93       	push	r16
    2be4:	1f 93       	push	r17
    2be6:	cf 93       	push	r28
    2be8:	df 93       	push	r29
    2bea:	ec 01       	movw	r28, r24
    2bec:	8a 81       	ldd	r24, Y+2	; 0x02
    2bee:	80 ff       	sbrs	r24, 0
    2bf0:	02 c0       	rjmp	.+4      	; 0x2bf6 <_ZN6Button7processEv+0x14>
    2bf2:	82 60       	ori	r24, 0x02	; 2
    2bf4:	01 c0       	rjmp	.+2      	; 0x2bf8 <_ZN6Button7processEv+0x16>
    2bf6:	8d 7f       	andi	r24, 0xFD	; 253
    2bf8:	8a 83       	std	Y+2, r24	; 0x02
    2bfa:	88 81       	ld	r24, Y
    2bfc:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <digitalRead>
    2c00:	49 81       	ldd	r20, Y+1	; 0x01
    2c02:	50 e0       	ldi	r21, 0x00	; 0
    2c04:	2a 81       	ldd	r18, Y+2	; 0x02
    2c06:	84 17       	cp	r24, r20
    2c08:	95 07       	cpc	r25, r21
    2c0a:	11 f4       	brne	.+4      	; 0x2c10 <_ZN6Button7processEv+0x2e>
    2c0c:	2e 7f       	andi	r18, 0xFE	; 254
    2c0e:	01 c0       	rjmp	.+2      	; 0x2c12 <_ZN6Button7processEv+0x30>
    2c10:	21 60       	ori	r18, 0x01	; 1
    2c12:	2a 83       	std	Y+2, r18	; 0x02
    2c14:	8a 81       	ldd	r24, Y+2	; 0x02
    2c16:	28 2f       	mov	r18, r24
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	a9 01       	movw	r20, r18
    2c1c:	55 95       	asr	r21
    2c1e:	47 95       	ror	r20
    2c20:	24 27       	eor	r18, r20
    2c22:	35 27       	eor	r19, r21
    2c24:	20 ff       	sbrs	r18, 0
    2c26:	42 c0       	rjmp	.+132    	; 0x2cac <_ZN6Button7processEv+0xca>
    2c28:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <millis>
    2c2c:	2b 81       	ldd	r18, Y+3	; 0x03
    2c2e:	22 23       	and	r18, r18
    2c30:	51 f0       	breq	.+20     	; 0x2c46 <_ZN6Button7processEv+0x64>
    2c32:	2a 85       	ldd	r18, Y+10	; 0x0a
    2c34:	3b 85       	ldd	r19, Y+11	; 0x0b
    2c36:	62 1b       	sub	r22, r18
    2c38:	73 0b       	sbc	r23, r19
    2c3a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c3c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c3e:	68 17       	cp	r22, r24
    2c40:	79 07       	cpc	r23, r25
    2c42:	08 f4       	brcc	.+2      	; 0x2c46 <_ZN6Button7processEv+0x64>
    2c44:	5e c0       	rjmp	.+188    	; 0x2d02 <_ZN6Button7processEv+0x120>
    2c46:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <millis>
    2c4a:	6a 87       	std	Y+10, r22	; 0x0a
    2c4c:	7b 87       	std	Y+11, r23	; 0x0b
    2c4e:	8c 87       	std	Y+12, r24	; 0x0c
    2c50:	9d 87       	std	Y+13, r25	; 0x0d
    2c52:	8a 81       	ldd	r24, Y+2	; 0x02
    2c54:	80 ff       	sbrs	r24, 0
    2c56:	13 c0       	rjmp	.+38     	; 0x2c7e <_ZN6Button7processEv+0x9c>
    2c58:	88 8d       	ldd	r24, Y+24	; 0x18
    2c5a:	99 8d       	ldd	r25, Y+25	; 0x19
    2c5c:	01 96       	adiw	r24, 0x01	; 1
    2c5e:	99 8f       	std	Y+25, r25	; 0x19
    2c60:	88 8f       	std	Y+24, r24	; 0x18
    2c62:	e8 89       	ldd	r30, Y+16	; 0x10
    2c64:	f9 89       	ldd	r31, Y+17	; 0x11
    2c66:	30 97       	sbiw	r30, 0x00	; 0
    2c68:	11 f0       	breq	.+4      	; 0x2c6e <_ZN6Button7processEv+0x8c>
    2c6a:	ce 01       	movw	r24, r28
    2c6c:	09 95       	icall
    2c6e:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <millis>
    2c72:	6c 83       	std	Y+4, r22	; 0x04
    2c74:	7d 83       	std	Y+5, r23	; 0x05
    2c76:	8e 83       	std	Y+6, r24	; 0x06
    2c78:	9f 83       	std	Y+7, r25	; 0x07
    2c7a:	1a 8e       	std	Y+26, r1	; 0x1a
    2c7c:	13 c0       	rjmp	.+38     	; 0x2ca4 <_ZN6Button7processEv+0xc2>
    2c7e:	ea 89       	ldd	r30, Y+18	; 0x12
    2c80:	fb 89       	ldd	r31, Y+19	; 0x13
    2c82:	30 97       	sbiw	r30, 0x00	; 0
    2c84:	11 f0       	breq	.+4      	; 0x2c8a <_ZN6Button7processEv+0xa8>
    2c86:	ce 01       	movw	r24, r28
    2c88:	09 95       	icall
    2c8a:	ec 89       	ldd	r30, Y+20	; 0x14
    2c8c:	fd 89       	ldd	r31, Y+21	; 0x15
    2c8e:	30 97       	sbiw	r30, 0x00	; 0
    2c90:	11 f0       	breq	.+4      	; 0x2c96 <_ZN6Button7processEv+0xb4>
    2c92:	ce 01       	movw	r24, r28
    2c94:	09 95       	icall
    2c96:	8f ef       	ldi	r24, 0xFF	; 255
    2c98:	9f ef       	ldi	r25, 0xFF	; 255
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	8c 83       	std	Y+4, r24	; 0x04
    2c9e:	9d 83       	std	Y+5, r25	; 0x05
    2ca0:	ae 83       	std	Y+6, r26	; 0x06
    2ca2:	bf 83       	std	Y+7, r27	; 0x07
    2ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca6:	84 60       	ori	r24, 0x04	; 4
    2ca8:	8a 83       	std	Y+2, r24	; 0x02
    2caa:	2b c0       	rjmp	.+86     	; 0x2d02 <_ZN6Button7processEv+0x120>
    2cac:	8b 7f       	andi	r24, 0xFB	; 251
    2cae:	8a 83       	std	Y+2, r24	; 0x02
    2cb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb2:	9d 81       	ldd	r25, Y+5	; 0x05
    2cb4:	ae 81       	ldd	r26, Y+6	; 0x06
    2cb6:	bf 81       	ldd	r27, Y+7	; 0x07
    2cb8:	8f 3f       	cpi	r24, 0xFF	; 255
    2cba:	9f 4f       	sbci	r25, 0xFF	; 255
    2cbc:	af 4f       	sbci	r26, 0xFF	; 255
    2cbe:	bf 4f       	sbci	r27, 0xFF	; 255
    2cc0:	01 f1       	breq	.+64     	; 0x2d02 <_ZN6Button7processEv+0x120>
    2cc2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cc4:	81 11       	cpse	r24, r1
    2cc6:	1d c0       	rjmp	.+58     	; 0x2d02 <_ZN6Button7processEv+0x120>
    2cc8:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <millis>
    2ccc:	0c 81       	ldd	r16, Y+4	; 0x04
    2cce:	1d 81       	ldd	r17, Y+5	; 0x05
    2cd0:	2e 81       	ldd	r18, Y+6	; 0x06
    2cd2:	3f 81       	ldd	r19, Y+7	; 0x07
    2cd4:	ab 01       	movw	r20, r22
    2cd6:	bc 01       	movw	r22, r24
    2cd8:	40 1b       	sub	r20, r16
    2cda:	51 0b       	sbc	r21, r17
    2cdc:	62 0b       	sbc	r22, r18
    2cde:	73 0b       	sbc	r23, r19
    2ce0:	88 85       	ldd	r24, Y+8	; 0x08
    2ce2:	99 85       	ldd	r25, Y+9	; 0x09
    2ce4:	a0 e0       	ldi	r26, 0x00	; 0
    2ce6:	b0 e0       	ldi	r27, 0x00	; 0
    2ce8:	84 17       	cp	r24, r20
    2cea:	95 07       	cpc	r25, r21
    2cec:	a6 07       	cpc	r26, r22
    2cee:	b7 07       	cpc	r27, r23
    2cf0:	40 f4       	brcc	.+16     	; 0x2d02 <_ZN6Button7processEv+0x120>
    2cf2:	ee 89       	ldd	r30, Y+22	; 0x16
    2cf4:	ff 89       	ldd	r31, Y+23	; 0x17
    2cf6:	30 97       	sbiw	r30, 0x00	; 0
    2cf8:	21 f0       	breq	.+8      	; 0x2d02 <_ZN6Button7processEv+0x120>
    2cfa:	ce 01       	movw	r24, r28
    2cfc:	09 95       	icall
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	8a 8f       	std	Y+26, r24	; 0x1a
    2d02:	df 91       	pop	r29
    2d04:	cf 91       	pop	r28
    2d06:	1f 91       	pop	r17
    2d08:	0f 91       	pop	r16
    2d0a:	08 95       	ret

00002d0c <_ZN6Button12pressHandlerEPFvRS_E>:
||
|| @parameter handler The function to call when this button is pressed
*/
void Button::pressHandler(buttonEventHandler handler)
{
  cb_onPress = handler;
    2d0c:	fc 01       	movw	r30, r24
    2d0e:	71 8b       	std	Z+17, r23	; 0x11
    2d10:	60 8b       	std	Z+16, r22	; 0x10
    2d12:	08 95       	ret

00002d14 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    2d14:	0f 93       	push	r16
    2d16:	fc 01       	movw	r30, r24
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
    2d18:	01 50       	subi	r16, 0x01	; 1
    2d1a:	04 0f       	add	r16, r20
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    2d1c:	84 a9       	ldd	r24, Z+52	; 0x34
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    2d1e:	96 a9       	ldd	r25, Z+54	; 0x36
    2d20:	94 17       	cp	r25, r20
    2d22:	18 f0       	brcs	.+6      	; 0x2d2a <u8g_IsBBXIntersection+0x16>
  {
    if ( v1 >= a0 )
    2d24:	08 17       	cp	r16, r24
    2d26:	28 f4       	brcc	.+10     	; 0x2d32 <u8g_IsBBXIntersection+0x1e>
    2d28:	02 c0       	rjmp	.+4      	; 0x2d2e <u8g_IsBBXIntersection+0x1a>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    2d2a:	08 17       	cp	r16, r24
    2d2c:	50 f0       	brcs	.+20     	; 0x2d42 <u8g_IsBBXIntersection+0x2e>
    {
      if ( v0 > v1 )
    2d2e:	04 17       	cp	r16, r20
    2d30:	40 f4       	brcc	.+16     	; 0x2d42 <u8g_IsBBXIntersection+0x2e>
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
    2d32:	21 50       	subi	r18, 0x01	; 1
    2d34:	26 0f       	add	r18, r22
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
    2d36:	83 a9       	ldd	r24, Z+51	; 0x33
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    2d38:	95 a9       	ldd	r25, Z+53	; 0x35
    2d3a:	96 17       	cp	r25, r22
    2d3c:	20 f4       	brcc	.+8      	; 0x2d46 <u8g_IsBBXIntersection+0x32>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    2d3e:	28 17       	cp	r18, r24
    2d40:	20 f4       	brcc	.+8      	; 0x2d4a <u8g_IsBBXIntersection+0x36>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	07 c0       	rjmp	.+14     	; 0x2d54 <u8g_IsBBXIntersection+0x40>
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    2d46:	28 17       	cp	r18, r24
    2d48:	20 f4       	brcc	.+8      	; 0x2d52 <u8g_IsBBXIntersection+0x3e>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	26 17       	cp	r18, r22
    2d4e:	10 f0       	brcs	.+4      	; 0x2d54 <u8g_IsBBXIntersection+0x40>
    2d50:	f8 cf       	rjmp	.-16     	; 0x2d42 <u8g_IsBBXIntersection+0x2e>
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    {
      return 1;
    2d52:	81 e0       	ldi	r24, 0x01	; 1
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
}
    2d54:	0f 91       	pop	r16
    2d56:	08 95       	ret

00002d58 <u8g_InitCom>:
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
}

uint8_t u8g_WriteSequenceP(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, const uint8_t *seq)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ_P, cnt, (void *)seq);
    2d58:	db 01       	movw	r26, r22
    2d5a:	14 96       	adiw	r26, 0x04	; 4
    2d5c:	ed 91       	ld	r30, X+
    2d5e:	fc 91       	ld	r31, X
    2d60:	15 97       	sbiw	r26, 0x05	; 5
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	61 e0       	ldi	r22, 0x01	; 1
    2d68:	09 94       	ijmp

00002d6a <u8g_SetChipSelect>:
    2d6a:	db 01       	movw	r26, r22
    2d6c:	14 96       	adiw	r26, 0x04	; 4
    2d6e:	ed 91       	ld	r30, X+
    2d70:	fc 91       	ld	r31, X
    2d72:	15 97       	sbiw	r26, 0x05	; 5
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	63 e0       	ldi	r22, 0x03	; 3
    2d7a:	09 94       	ijmp

00002d7c <u8g_SetResetLow>:
    2d7c:	db 01       	movw	r26, r22
    2d7e:	14 96       	adiw	r26, 0x04	; 4
    2d80:	ed 91       	ld	r30, X+
    2d82:	fc 91       	ld	r31, X
    2d84:	15 97       	sbiw	r26, 0x05	; 5
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	40 e0       	ldi	r20, 0x00	; 0
    2d8c:	64 e0       	ldi	r22, 0x04	; 4
    2d8e:	09 94       	ijmp

00002d90 <u8g_SetResetHigh>:
    2d90:	db 01       	movw	r26, r22
    2d92:	14 96       	adiw	r26, 0x04	; 4
    2d94:	ed 91       	ld	r30, X+
    2d96:	fc 91       	ld	r31, X
    2d98:	15 97       	sbiw	r26, 0x05	; 5
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	41 e0       	ldi	r20, 0x01	; 1
    2da0:	64 e0       	ldi	r22, 0x04	; 4
    2da2:	09 94       	ijmp

00002da4 <u8g_SetAddress>:
    2da4:	db 01       	movw	r26, r22
    2da6:	14 96       	adiw	r26, 0x04	; 4
    2da8:	ed 91       	ld	r30, X+
    2daa:	fc 91       	ld	r31, X
    2dac:	15 97       	sbiw	r26, 0x05	; 5
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	62 e0       	ldi	r22, 0x02	; 2
    2db4:	09 94       	ijmp

00002db6 <u8g_WriteByte>:
    2db6:	db 01       	movw	r26, r22
    2db8:	14 96       	adiw	r26, 0x04	; 4
    2dba:	ed 91       	ld	r30, X+
    2dbc:	fc 91       	ld	r31, X
    2dbe:	15 97       	sbiw	r26, 0x05	; 5
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	65 e0       	ldi	r22, 0x05	; 5
    2dc6:	09 94       	ijmp

00002dc8 <u8g_WriteSequence>:
    2dc8:	db 01       	movw	r26, r22
    2dca:	14 96       	adiw	r26, 0x04	; 4
    2dcc:	ed 91       	ld	r30, X+
    2dce:	fc 91       	ld	r31, X
    2dd0:	15 97       	sbiw	r26, 0x05	; 5
    2dd2:	66 e0       	ldi	r22, 0x06	; 6
    2dd4:	09 94       	ijmp

00002dd6 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
    2dd6:	cf 92       	push	r12
    2dd8:	df 92       	push	r13
    2dda:	ef 92       	push	r14
    2ddc:	ff 92       	push	r15
    2dde:	0f 93       	push	r16
    2de0:	1f 93       	push	r17
    2de2:	cf 93       	push	r28
    2de4:	df 93       	push	r29
    2de6:	8c 01       	movw	r16, r24
    2de8:	6b 01       	movw	r12, r22
    2dea:	7a 01       	movw	r14, r20
  uint8_t is_escape = 0;
    2dec:	80 e0       	ldi	r24, 0x00	; 0
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
    2dee:	f7 01       	movw	r30, r14
    2df0:	c4 91       	lpm	r28, Z
    if ( is_escape == 0 )
    2df2:	81 11       	cpse	r24, r1
    2df4:	0a c0       	rjmp	.+20     	; 0x2e0a <u8g_WriteEscSeqP+0x34>
    {
      if ( value != 255 )
    2df6:	cf 3f       	cpi	r28, 0xFF	; 255
    2df8:	e9 f1       	breq	.+122    	; 0x2e74 <u8g_WriteEscSeqP+0x9e>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    2dfa:	4c 2f       	mov	r20, r28
    2dfc:	b6 01       	movw	r22, r12
    2dfe:	c8 01       	movw	r24, r16
    2e00:	0e 94 db 16 	call	0x2db6	; 0x2db6 <u8g_WriteByte>
    2e04:	81 11       	cpse	r24, r1
    2e06:	2f c0       	rjmp	.+94     	; 0x2e66 <u8g_WriteEscSeqP+0x90>
    2e08:	3a c0       	rjmp	.+116    	; 0x2e7e <u8g_WriteEscSeqP+0xa8>
        is_escape = 1;
      }
    }
    else
    {
      if ( value == 255 )
    2e0a:	cf 3f       	cpi	r28, 0xFF	; 255
    2e0c:	11 f4       	brne	.+4      	; 0x2e12 <u8g_WriteEscSeqP+0x3c>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    2e0e:	4f ef       	ldi	r20, 0xFF	; 255
    2e10:	f5 cf       	rjmp	.-22     	; 0x2dfc <u8g_WriteEscSeqP+0x26>
          return 0;
      }
      else if ( value == 254 )
    2e12:	ce 3f       	cpi	r28, 0xFE	; 254
    2e14:	b1 f1       	breq	.+108    	; 0x2e82 <u8g_WriteEscSeqP+0xac>
      {
        break;
      }
      else if ( value >= 0x0f0 )
    2e16:	c0 3f       	cpi	r28, 0xF0	; 240
    2e18:	30 f5       	brcc	.+76     	; 0x2e66 <u8g_WriteEscSeqP+0x90>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
    2e1a:	c0 3e       	cpi	r28, 0xE0	; 224
    2e1c:	38 f0       	brcs	.+14     	; 0x2e2c <u8g_WriteEscSeqP+0x56>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
    2e1e:	4c 2f       	mov	r20, r28
    2e20:	4f 70       	andi	r20, 0x0F	; 15
    2e22:	b6 01       	movw	r22, r12
    2e24:	c8 01       	movw	r24, r16
    2e26:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <u8g_SetAddress>
    2e2a:	1d c0       	rjmp	.+58     	; 0x2e66 <u8g_WriteEscSeqP+0x90>
      }
      else if ( value >= 0xd0 )
    2e2c:	c0 3d       	cpi	r28, 0xD0	; 208
    2e2e:	38 f0       	brcs	.+14     	; 0x2e3e <u8g_WriteEscSeqP+0x68>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
    2e30:	4c 2f       	mov	r20, r28
    2e32:	4f 70       	andi	r20, 0x0F	; 15
    2e34:	b6 01       	movw	r22, r12
    2e36:	c8 01       	movw	r24, r16
    2e38:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <u8g_SetChipSelect>
    2e3c:	14 c0       	rjmp	.+40     	; 0x2e66 <u8g_WriteEscSeqP+0x90>
      }
      else if ( value >= 0xc0 )
    2e3e:	c0 3c       	cpi	r28, 0xC0	; 192
    2e40:	a0 f0       	brcs	.+40     	; 0x2e6a <u8g_WriteEscSeqP+0x94>
      {
        u8g_SetResetLow(u8g, dev);
    2e42:	b6 01       	movw	r22, r12
    2e44:	c8 01       	movw	r24, r16
    2e46:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <u8g_SetResetLow>
        value &= 0x0f;
        value <<= 4;
    2e4a:	c2 95       	swap	r28
    2e4c:	c0 7f       	andi	r28, 0xF0	; 240
        value+=2;
        u8g_Delay(value);
    2e4e:	ce 5f       	subi	r28, 0xFE	; 254
    2e50:	d0 e0       	ldi	r29, 0x00	; 0
    2e52:	ce 01       	movw	r24, r28
    2e54:	0e 94 62 18 	call	0x30c4	; 0x30c4 <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
    2e58:	b6 01       	movw	r22, r12
    2e5a:	c8 01       	movw	r24, r16
    2e5c:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <u8g_SetResetHigh>
        u8g_Delay(value);
    2e60:	ce 01       	movw	r24, r28
    2e62:	0e 94 62 18 	call	0x30c4	; 0x30c4 <u8g_Delay>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	06 c0       	rjmp	.+12     	; 0x2e76 <u8g_WriteEscSeqP+0xa0>
      else if ( value >= 0xbe )
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
    2e6a:	c7 fd       	sbrc	r28, 7
    2e6c:	fc cf       	rjmp	.-8      	; 0x2e66 <u8g_WriteEscSeqP+0x90>
      {
        u8g_Delay(value);
    2e6e:	8c 2f       	mov	r24, r28
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	f7 cf       	rjmp	.-18     	; 0x2e62 <u8g_WriteEscSeqP+0x8c>
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    2e74:	81 e0       	ldi	r24, 0x01	; 1
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    }
    esc_seq++;
    2e76:	ff ef       	ldi	r31, 0xFF	; 255
    2e78:	ef 1a       	sub	r14, r31
    2e7a:	ff 0a       	sbc	r15, r31
  }
    2e7c:	b8 cf       	rjmp	.-144    	; 0x2dee <u8g_WriteEscSeqP+0x18>
    if ( is_escape == 0 )
    {
      if ( value != 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	01 c0       	rjmp	.+2      	; 0x2e84 <u8g_WriteEscSeqP+0xae>
      }
      is_escape = 0;
    }
    esc_seq++;
  }
  return 1;
    2e82:	81 e0       	ldi	r24, 0x01	; 1
}
    2e84:	df 91       	pop	r29
    2e86:	cf 91       	pop	r28
    2e88:	1f 91       	pop	r17
    2e8a:	0f 91       	pop	r16
    2e8c:	ff 90       	pop	r15
    2e8e:	ef 90       	pop	r14
    2e90:	df 90       	pop	r13
    2e92:	cf 90       	pop	r12
    2e94:	08 95       	ret

00002e96 <u8g_com_arduino_ssd_start_sequence>:
//#define I2C_CMD_MODE  0x080
#define I2C_CMD_MODE    0x000
#define I2C_DATA_MODE   0x040

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
    2e96:	cf 93       	push	r28
    2e98:	df 93       	push	r29
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    2e9a:	fc 01       	movw	r30, r24
    2e9c:	23 a5       	ldd	r18, Z+43	; 0x2b
    2e9e:	22 23       	and	r18, r18
    2ea0:	81 f0       	breq	.+32     	; 0x2ec2 <u8g_com_arduino_ssd_start_sequence+0x2c>
    2ea2:	ec 01       	movw	r28, r24
    return 1;

  /* setup bus, might be a repeated start */
  if ( u8g_i2c_start(I2C_SLA) == 0 )
    2ea4:	88 e7       	ldi	r24, 0x78	; 120
    2ea6:	0e 94 03 18 	call	0x3006	; 0x3006 <u8g_i2c_start>
    2eaa:	81 11       	cpse	r24, r1
    2eac:	02 c0       	rjmp	.+4      	; 0x2eb2 <u8g_com_arduino_ssd_start_sequence+0x1c>
    return 0;
    2eae:	80 e0       	ldi	r24, 0x00	; 0
    2eb0:	09 c0       	rjmp	.+18     	; 0x2ec4 <u8g_com_arduino_ssd_start_sequence+0x2e>
  if ( u8g->pin_list[U8G_PI_A0_STATE] == 0 )
    2eb2:	8e a1       	ldd	r24, Y+38	; 0x26
    2eb4:	81 11       	cpse	r24, r1
    if ( u8g_i2c_send_byte(I2C_CMD_MODE) == 0 )
      return 0;
  }
  else
  {
    if ( u8g_i2c_send_byte(I2C_DATA_MODE) == 0 )
    2eb6:	80 e4       	ldi	r24, 0x40	; 64
    2eb8:	0e 94 3a 18 	call	0x3074	; 0x3074 <u8g_i2c_send_byte>
    2ebc:	88 23       	and	r24, r24
    2ebe:	b9 f3       	breq	.-18     	; 0x2eae <u8g_com_arduino_ssd_start_sequence+0x18>
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
    2ec0:	1b a6       	std	Y+43, r1	; 0x2b

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    return 1;
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
  return 1;
}
    2ec4:	df 91       	pop	r29
    2ec6:	cf 91       	pop	r28
    2ec8:	08 95       	ret

00002eca <u8g_com_arduino_ssd_i2c_fn>:

uint8_t u8g_com_arduino_ssd_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
    2eca:	0f 93       	push	r16
    2ecc:	1f 93       	push	r17
    2ece:	cf 93       	push	r28
    2ed0:	c4 2f       	mov	r28, r20
    2ed2:	89 01       	movw	r16, r18
  switch(msg)
    2ed4:	63 30       	cpi	r22, 0x03	; 3
    2ed6:	c1 f0       	breq	.+48     	; 0x2f08 <u8g_com_arduino_ssd_i2c_fn+0x3e>
    2ed8:	50 f4       	brcc	.+20     	; 0x2eee <u8g_com_arduino_ssd_i2c_fn+0x24>
    2eda:	61 30       	cpi	r22, 0x01	; 1
    2edc:	81 f0       	breq	.+32     	; 0x2efe <u8g_com_arduino_ssd_i2c_fn+0x34>
    2ede:	62 30       	cpi	r22, 0x02	; 2
    2ee0:	09 f0       	breq	.+2      	; 0x2ee4 <u8g_com_arduino_ssd_i2c_fn+0x1a>
    2ee2:	48 c0       	rjmp	.+144    	; 0x2f74 <u8g_com_arduino_ssd_i2c_fn+0xaa>
      }
      // u8g_i2c_stop();
      break;
      
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g->pin_list[U8G_PI_A0_STATE] = arg_val;
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	46 a3       	std	Z+38, r20	; 0x26
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again */
    2ee8:	21 e0       	ldi	r18, 0x01	; 1
    2eea:	23 a7       	std	Z+43, r18	; 0x2b
    2eec:	43 c0       	rjmp	.+134    	; 0x2f74 <u8g_com_arduino_ssd_i2c_fn+0xaa>
  return 1;
}

uint8_t u8g_com_arduino_ssd_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
  switch(msg)
    2eee:	66 30       	cpi	r22, 0x06	; 6
    2ef0:	11 f1       	breq	.+68     	; 0x2f36 <u8g_com_arduino_ssd_i2c_fn+0x6c>
    2ef2:	67 30       	cpi	r22, 0x07	; 7
    2ef4:	79 f1       	breq	.+94     	; 0x2f54 <u8g_com_arduino_ssd_i2c_fn+0x8a>
    2ef6:	65 30       	cpi	r22, 0x05	; 5
    2ef8:	09 f0       	breq	.+2      	; 0x2efc <u8g_com_arduino_ssd_i2c_fn+0x32>
    2efa:	3c c0       	rjmp	.+120    	; 0x2f74 <u8g_com_arduino_ssd_i2c_fn+0xaa>
    2efc:	0e c0       	rjmp	.+28     	; 0x2f1a <u8g_com_arduino_ssd_i2c_fn+0x50>
    case U8G_COM_MSG_INIT:
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SCL, HIGH);
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SDA, HIGH);
      //u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: unknown mode */
    
      u8g_i2c_init(u8g->pin_list[U8G_PI_I2C_OPTION]);
    2efe:	fc 01       	movw	r30, r24
    2f00:	86 a5       	ldd	r24, Z+46	; 0x2e
    2f02:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <u8g_i2c_init>
    2f06:	36 c0       	rjmp	.+108    	; 0x2f74 <u8g_com_arduino_ssd_i2c_fn+0xaa>
      /* Currently disabled, but it could be enable. Previous restrictions have been removed */
      /* u8g_com_arduino_digital_write(u8g, U8G_PI_RESET, arg_val); */
      break;
      
    case U8G_COM_MSG_CHIP_SELECT:
      u8g->pin_list[U8G_PI_A0_STATE] = 0;
    2f08:	fc 01       	movw	r30, r24
    2f0a:	16 a2       	std	Z+38, r1	; 0x26
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again, also forces start condition */
    2f0c:	21 e0       	ldi	r18, 0x01	; 1
    2f0e:	23 a7       	std	Z+43, r18	; 0x2b
      if ( arg_val == 0 )
    2f10:	41 11       	cpse	r20, r1
    2f12:	30 c0       	rjmp	.+96     	; 0x2f74 <u8g_com_arduino_ssd_i2c_fn+0xaa>
      {
        /* disable chip, send stop condition */
	u8g_i2c_stop();
    2f14:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <u8g_i2c_stop>
    2f18:	2d c0       	rjmp	.+90     	; 0x2f74 <u8g_com_arduino_ssd_i2c_fn+0xaa>
      }
      break;

    case U8G_COM_MSG_WRITE_BYTE:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    2f1a:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <u8g_com_arduino_ssd_start_sequence>
    2f1e:	81 11       	cpse	r24, r1
    2f20:	04 c0       	rjmp	.+8      	; 0x2f2a <u8g_com_arduino_ssd_i2c_fn+0x60>
	return u8g_i2c_stop(), 0;
    2f22:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <u8g_i2c_stop>
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	26 c0       	rjmp	.+76     	; 0x2f76 <u8g_com_arduino_ssd_i2c_fn+0xac>
      if ( u8g_i2c_send_byte(arg_val) == 0 )
    2f2a:	8c 2f       	mov	r24, r28
    2f2c:	0e 94 3a 18 	call	0x3074	; 0x3074 <u8g_i2c_send_byte>
    2f30:	81 11       	cpse	r24, r1
    2f32:	20 c0       	rjmp	.+64     	; 0x2f74 <u8g_com_arduino_ssd_i2c_fn+0xaa>
    2f34:	f6 cf       	rjmp	.-20     	; 0x2f22 <u8g_com_arduino_ssd_i2c_fn+0x58>
      // u8g_i2c_stop();
      break;
    
    case U8G_COM_MSG_WRITE_SEQ:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    2f36:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <u8g_com_arduino_ssd_start_sequence>
    2f3a:	88 23       	and	r24, r24
    2f3c:	91 f3       	breq	.-28     	; 0x2f22 <u8g_com_arduino_ssd_i2c_fn+0x58>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    2f3e:	cc 23       	and	r28, r28
    2f40:	c9 f0       	breq	.+50     	; 0x2f74 <u8g_com_arduino_ssd_i2c_fn+0xaa>
        {
	  if ( u8g_i2c_send_byte(*ptr++) == 0 )
    2f42:	f8 01       	movw	r30, r16
    2f44:	81 91       	ld	r24, Z+
    2f46:	8f 01       	movw	r16, r30
    2f48:	0e 94 3a 18 	call	0x3074	; 0x3074 <u8g_i2c_send_byte>
    2f4c:	88 23       	and	r24, r24
    2f4e:	49 f3       	breq	.-46     	; 0x2f22 <u8g_com_arduino_ssd_i2c_fn+0x58>
	    return u8g_i2c_stop(), 0;
          arg_val--;
    2f50:	c1 50       	subi	r28, 0x01	; 1
    2f52:	f5 cf       	rjmp	.-22     	; 0x2f3e <u8g_com_arduino_ssd_i2c_fn+0x74>
      // u8g_i2c_stop();
      break;

    case U8G_COM_MSG_WRITE_SEQ_P:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    2f54:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <u8g_com_arduino_ssd_start_sequence>
    2f58:	88 23       	and	r24, r24
    2f5a:	19 f3       	breq	.-58     	; 0x2f22 <u8g_com_arduino_ssd_i2c_fn+0x58>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    2f5c:	cc 23       	and	r28, r28
    2f5e:	51 f0       	breq	.+20     	; 0x2f74 <u8g_com_arduino_ssd_i2c_fn+0xaa>
        {
	  if ( u8g_i2c_send_byte(u8g_pgm_read(ptr)) == 0 )
    2f60:	f8 01       	movw	r30, r16
    2f62:	84 91       	lpm	r24, Z
    2f64:	0e 94 3a 18 	call	0x3074	; 0x3074 <u8g_i2c_send_byte>
    2f68:	88 23       	and	r24, r24
    2f6a:	29 f0       	breq	.+10     	; 0x2f76 <u8g_com_arduino_ssd_i2c_fn+0xac>
	    return 0;
          ptr++;
    2f6c:	0f 5f       	subi	r16, 0xFF	; 255
    2f6e:	1f 4f       	sbci	r17, 0xFF	; 255
          arg_val--;
    2f70:	c1 50       	subi	r28, 0x01	; 1
    2f72:	f4 cf       	rjmp	.-24     	; 0x2f5c <u8g_com_arduino_ssd_i2c_fn+0x92>
      }
      */
#endif
      break;
  }
  return 1;
    2f74:	81 e0       	ldi	r24, 0x01	; 1
}
    2f76:	cf 91       	pop	r28
    2f78:	1f 91       	pop	r17
    2f7a:	0f 91       	pop	r16
    2f7c:	08 95       	ret

00002f7e <u8g_i2c_set_error>:
}

uint8_t u8g_i2c_get_err_pos(void)
{
  return u8g_i2c_err_pos;
}
    2f7e:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <u8g_i2c_err_code>
    2f82:	91 11       	cpse	r25, r1
    2f84:	04 c0       	rjmp	.+8      	; 0x2f8e <u8g_i2c_set_error+0x10>
    2f86:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <u8g_i2c_err_code>
    2f8a:	60 93 81 04 	sts	0x0481, r22	; 0x800481 <u8g_i2c_err_pos>
    2f8e:	08 95       	ret

00002f90 <u8g_i2c_clear_error>:
    2f90:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <u8g_i2c_err_code>
    2f94:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <u8g_i2c_err_pos>
    2f98:	08 95       	ret

00002f9a <u8g_i2c_init>:
    TWSR = 0;
	--> 400KHz

    F_CPU/(2*100000)-8  --> calculate TWBR value for 100KHz
*/
  u8g_i2c_opt = options;
    2f9a:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <u8g_i2c_opt>
  TWSR = 0;
    2f9e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  if ( options & U8G_I2C_OPT_FAST )
    2fa2:	84 ff       	sbrs	r24, 4
    2fa4:	02 c0       	rjmp	.+4      	; 0x2faa <u8g_i2c_init+0x10>
  {
    TWBR = F_CPU/(2*400000)-8;
    2fa6:	8c e0       	ldi	r24, 0x0C	; 12
    2fa8:	01 c0       	rjmp	.+2      	; 0x2fac <u8g_i2c_init+0x12>
  }
  else
  {  
    TWBR = F_CPU/(2*100000)-8;
    2faa:	88 e4       	ldi	r24, 0x48	; 72
    2fac:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  }
  u8g_i2c_clear_error();
    2fb0:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <u8g_i2c_clear_error>

00002fb4 <u8g_i2c_wait>:
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
    2fb4:	1f 93       	push	r17
    2fb6:	cf 93       	push	r28
    2fb8:	df 93       	push	r29
    2fba:	00 d0       	rcall	.+0      	; 0x2fbc <u8g_i2c_wait+0x8>
    2fbc:	cd b7       	in	r28, 0x3d	; 61
    2fbe:	de b7       	in	r29, 0x3e	; 62
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
    2fc0:	20 ed       	ldi	r18, 0xD0	; 208
    2fc2:	37 e0       	ldi	r19, 0x07	; 7
	{
	  u8g_i2c_set_error(U8G_I2C_ERR_TIMEOUT, pos);
	  return 0; /* error */
	}
      }
      cnt--;
    2fc4:	3a 83       	std	Y+2, r19	; 0x02
    2fc6:	29 83       	std	Y+1, r18	; 0x01
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
  while( !(TWCR & mask) )
    2fc8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2fcc:	98 23       	and	r25, r24
    2fce:	99 f4       	brne	.+38     	; 0x2ff6 <u8g_i2c_wait+0x42>
  {
      if ( cnt == 0 )
    2fd0:	29 81       	ldd	r18, Y+1	; 0x01
    2fd2:	3a 81       	ldd	r19, Y+2	; 0x02
    2fd4:	23 2b       	or	r18, r19
    2fd6:	51 f4       	brne	.+20     	; 0x2fec <u8g_i2c_wait+0x38>
    2fd8:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <u8g_i2c_opt>
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    2fdc:	18 2f       	mov	r17, r24
    2fde:	12 70       	andi	r17, 0x02	; 2
    2fe0:	81 fd       	sbrc	r24, 1
    2fe2:	09 c0       	rjmp	.+18     	; 0x2ff6 <u8g_i2c_wait+0x42>
	{
	  return 1;	/* all ok */
	}
	else
	{
	  u8g_i2c_set_error(U8G_I2C_ERR_TIMEOUT, pos);
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <u8g_i2c_set_error>
	  return 0; /* error */
    2fea:	06 c0       	rjmp	.+12     	; 0x2ff8 <u8g_i2c_wait+0x44>
	}
      }
      cnt--;
    2fec:	29 81       	ldd	r18, Y+1	; 0x01
    2fee:	3a 81       	ldd	r19, Y+2	; 0x02
    2ff0:	21 50       	subi	r18, 0x01	; 1
    2ff2:	31 09       	sbc	r19, r1
    2ff4:	e7 cf       	rjmp	.-50     	; 0x2fc4 <u8g_i2c_wait+0x10>
  {
      if ( cnt == 0 )
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
	{
	  return 1;	/* all ok */
    2ff6:	11 e0       	ldi	r17, 0x01	; 1
	}
      }
      cnt--;
    }
  return 1;	/* all ok */
}
    2ff8:	81 2f       	mov	r24, r17
    2ffa:	0f 90       	pop	r0
    2ffc:	0f 90       	pop	r0
    2ffe:	df 91       	pop	r29
    3000:	cf 91       	pop	r28
    3002:	1f 91       	pop	r17
    3004:	08 95       	ret

00003006 <u8g_i2c_start>:

/* sla includes all 8 bits (with r/w bit), assums master transmit */
uint8_t u8g_i2c_start(uint8_t sla)
{
    3006:	cf 93       	push	r28
    3008:	c8 2f       	mov	r28, r24
  register uint8_t status;
  
  /* send start */
  TWCR = _BV(TWINT) |  _BV(TWSTA)  |  _BV(TWEN);
    300a:	84 ea       	ldi	r24, 0xA4	; 164
    300c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
   
  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 1) == 0 )
    3010:	61 e0       	ldi	r22, 0x01	; 1
    3012:	80 e8       	ldi	r24, 0x80	; 128
    3014:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <u8g_i2c_wait>
    3018:	88 23       	and	r24, r24
    301a:	59 f0       	breq	.+22     	; 0x3032 <u8g_i2c_start+0x2c>
    return 0;
  
  status = TW_STATUS;
    301c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    3020:	88 7f       	andi	r24, 0xF8	; 248
 
  /* check status after start */  
  if ( status != TW_START && status != TW_REP_START )
    3022:	88 30       	cpi	r24, 0x08	; 8
    3024:	41 f0       	breq	.+16     	; 0x3036 <u8g_i2c_start+0x30>
    3026:	80 31       	cpi	r24, 0x10	; 16
    3028:	31 f0       	breq	.+12     	; 0x3036 <u8g_i2c_start+0x30>
  {
    u8g_i2c_set_error(U8G_I2C_ERR_BUS, 1);
    302a:	61 e0       	ldi	r22, 0x01	; 1
    302c:	82 e0       	ldi	r24, 0x02	; 2
    302e:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <u8g_i2c_set_error>
    return 0;
    3032:	c0 e0       	ldi	r28, 0x00	; 0
    3034:	1c c0       	rjmp	.+56     	; 0x306e <u8g_i2c_start+0x68>
  }

  /* set slave address */  
  TWDR = sla;
    3036:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  
  /* enable sla transfer */
  TWCR = _BV(TWINT)  |  _BV(TWEN);
    303a:	84 e8       	ldi	r24, 0x84	; 132
    303c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 2) == 0 )
    3040:	62 e0       	ldi	r22, 0x02	; 2
    3042:	80 e8       	ldi	r24, 0x80	; 128
    3044:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <u8g_i2c_wait>
    3048:	88 23       	and	r24, r24
    304a:	99 f3       	breq	.-26     	; 0x3032 <u8g_i2c_start+0x2c>
    304c:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <u8g_i2c_opt>
    return 0;

  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    3050:	c8 2f       	mov	r28, r24
    3052:	c2 70       	andi	r28, 0x02	; 2
    3054:	81 fd       	sbrc	r24, 1
    3056:	0a c0       	rjmp	.+20     	; 0x306c <u8g_i2c_start+0x66>
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;
    3058:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    /* check status after sla */  
    if ( status != TW_MT_SLA_ACK )
    305c:	88 7f       	andi	r24, 0xF8	; 248
    305e:	88 31       	cpi	r24, 0x18	; 24
    3060:	29 f0       	breq	.+10     	; 0x306c <u8g_i2c_start+0x66>
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 2);
    3062:	62 e0       	ldi	r22, 0x02	; 2
    3064:	82 e0       	ldi	r24, 0x02	; 2
    3066:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <u8g_i2c_set_error>
      return 0;
    306a:	01 c0       	rjmp	.+2      	; 0x306e <u8g_i2c_start+0x68>
    }
  }

   return 1;
    306c:	c1 e0       	ldi	r28, 0x01	; 1
}
    306e:	8c 2f       	mov	r24, r28
    3070:	cf 91       	pop	r28
    3072:	08 95       	ret

00003074 <u8g_i2c_send_byte>:

uint8_t u8g_i2c_send_byte(uint8_t data)
{
    3074:	cf 93       	push	r28
  register uint8_t status;
  TWDR = data;
    3076:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  TWCR = _BV(TWINT)  |  _BV(TWEN);
    307a:	84 e8       	ldi	r24, 0x84	; 132
    307c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  if ( u8g_i2c_wait(_BV(TWINT), 3) == 0 )
    3080:	63 e0       	ldi	r22, 0x03	; 3
    3082:	80 e8       	ldi	r24, 0x80	; 128
    3084:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <u8g_i2c_wait>
    3088:	c8 2f       	mov	r28, r24
    308a:	88 23       	and	r24, r24
    308c:	89 f0       	breq	.+34     	; 0x30b0 <u8g_i2c_send_byte+0x3c>
    308e:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <u8g_i2c_opt>
    return 0;
    
  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    3092:	c8 2f       	mov	r28, r24
    3094:	c2 70       	andi	r28, 0x02	; 2
    3096:	81 fd       	sbrc	r24, 1
    3098:	0a c0       	rjmp	.+20     	; 0x30ae <u8g_i2c_send_byte+0x3a>
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;  
    309a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    if ( status != TW_MT_DATA_ACK )
    309e:	88 7f       	andi	r24, 0xF8	; 248
    30a0:	88 32       	cpi	r24, 0x28	; 40
    30a2:	29 f0       	breq	.+10     	; 0x30ae <u8g_i2c_send_byte+0x3a>
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 3);
    30a4:	63 e0       	ldi	r22, 0x03	; 3
    30a6:	82 e0       	ldi	r24, 0x02	; 2
    30a8:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <u8g_i2c_set_error>
      return 0;
    30ac:	01 c0       	rjmp	.+2      	; 0x30b0 <u8g_i2c_send_byte+0x3c>
    }
  }

  return 1;  
    30ae:	c1 e0       	ldi	r28, 0x01	; 1
}
    30b0:	8c 2f       	mov	r24, r28
    30b2:	cf 91       	pop	r28
    30b4:	08 95       	ret

000030b6 <u8g_i2c_stop>:

void u8g_i2c_stop(void)
{
  /* write stop */
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
    30b6:	84 e9       	ldi	r24, 0x94	; 148
    30b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  /* no error is checked for the stop condition */  
  u8g_i2c_wait(_BV(TWSTO), 4);
    30bc:	64 e0       	ldi	r22, 0x04	; 4
    30be:	80 e1       	ldi	r24, 0x10	; 16
    30c0:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <u8g_i2c_wait>

000030c4 <u8g_Delay>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    30c4:	2e e9       	ldi	r18, 0x9E	; 158
    30c6:	3f e0       	ldi	r19, 0x0F	; 15
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    30c8:	00 97       	sbiw	r24, 0x00	; 0
    30ca:	29 f0       	breq	.+10     	; 0x30d6 <u8g_Delay+0x12>
    30cc:	f9 01       	movw	r30, r18
    30ce:	31 97       	sbiw	r30, 0x01	; 1
    30d0:	f1 f7       	brne	.-4      	; 0x30ce <u8g_Delay+0xa>
  {
    _delay_loop_2( (F_CPU / 4000 ) -2);
    val--;
    30d2:	01 97       	sbiw	r24, 0x01	; 1
    30d4:	f9 cf       	rjmp	.-14     	; 0x30c8 <u8g_Delay+0x4>
  }
}
    30d6:	08 95       	ret

000030d8 <u8g_page_First>:
void u8g_page_Init(u8g_page_t *p, u8g_uint_t page_height, u8g_uint_t total_height )
{
  p->page_height = page_height;
  p->total_height = total_height;
  p->page = 0;
  u8g_page_First(p);
    30d8:	fc 01       	movw	r30, r24
    30da:	12 82       	std	Z+2, r1	; 0x02
    30dc:	80 81       	ld	r24, Z
    30de:	81 50       	subi	r24, 0x01	; 1
    30e0:	83 83       	std	Z+3, r24	; 0x03
    30e2:	14 82       	std	Z+4, r1	; 0x04
    30e4:	08 95       	ret

000030e6 <u8g_page_Next>:
  p->page_y1--;
  p->page = 0;
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
    30e6:	fc 01       	movw	r30, r24
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
    30e8:	30 81       	ld	r19, Z
    30ea:	92 81       	ldd	r25, Z+2	; 0x02
    30ec:	93 0f       	add	r25, r19
    30ee:	92 83       	std	Z+2, r25	; 0x02
  if ( p->page_y0 >= p->total_height )
    30f0:	21 81       	ldd	r18, Z+1	; 0x01
    30f2:	92 17       	cp	r25, r18
    30f4:	60 f4       	brcc	.+24     	; 0x310e <u8g_page_Next+0x28>
    return 0;
  p->page++;
    30f6:	94 81       	ldd	r25, Z+4	; 0x04
    30f8:	9f 5f       	subi	r25, 0xFF	; 255
    30fa:	94 83       	std	Z+4, r25	; 0x04
  y1 = p->page_y1;
    30fc:	83 81       	ldd	r24, Z+3	; 0x03
  y1 += p->page_height;
    30fe:	83 0f       	add	r24, r19
  if ( y1 >= p->total_height )
    3100:	82 17       	cp	r24, r18
    3102:	10 f0       	brcs	.+4      	; 0x3108 <u8g_page_Next+0x22>
  {
    y1 = p->total_height;
    y1--;
    3104:	8f ef       	ldi	r24, 0xFF	; 255
    3106:	82 0f       	add	r24, r18
  }
  p->page_y1 = y1;
    3108:	83 83       	std	Z+3, r24	; 0x03
  
  return 1;
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	08 95       	ret
uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
  if ( p->page_y0 >= p->total_height )
    return 0;
    310e:	80 e0       	ldi	r24, 0x00	; 0
    y1--;
  }
  p->page_y1 = y1;
  
  return 1;
}
    3110:	08 95       	ret

00003112 <__cmpsf2>:
    3112:	0e 94 c4 18 	call	0x3188	; 0x3188 <__fp_cmp>
    3116:	08 f4       	brcc	.+2      	; 0x311a <__cmpsf2+0x8>
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	08 95       	ret

0000311c <__fixsfsi>:
    311c:	0e 94 95 18 	call	0x312a	; 0x312a <__fixunssfsi>
    3120:	68 94       	set
    3122:	b1 11       	cpse	r27, r1
    3124:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__fp_szero>
    3128:	08 95       	ret

0000312a <__fixunssfsi>:
    312a:	0e 94 18 0a 	call	0x1430	; 0x1430 <__fp_splitA>
    312e:	88 f0       	brcs	.+34     	; 0x3152 <__fixunssfsi+0x28>
    3130:	9f 57       	subi	r25, 0x7F	; 127
    3132:	98 f0       	brcs	.+38     	; 0x315a <__fixunssfsi+0x30>
    3134:	b9 2f       	mov	r27, r25
    3136:	99 27       	eor	r25, r25
    3138:	b7 51       	subi	r27, 0x17	; 23
    313a:	b0 f0       	brcs	.+44     	; 0x3168 <__fixunssfsi+0x3e>
    313c:	e1 f0       	breq	.+56     	; 0x3176 <__fixunssfsi+0x4c>
    313e:	66 0f       	add	r22, r22
    3140:	77 1f       	adc	r23, r23
    3142:	88 1f       	adc	r24, r24
    3144:	99 1f       	adc	r25, r25
    3146:	1a f0       	brmi	.+6      	; 0x314e <__fixunssfsi+0x24>
    3148:	ba 95       	dec	r27
    314a:	c9 f7       	brne	.-14     	; 0x313e <__fixunssfsi+0x14>
    314c:	14 c0       	rjmp	.+40     	; 0x3176 <__fixunssfsi+0x4c>
    314e:	b1 30       	cpi	r27, 0x01	; 1
    3150:	91 f0       	breq	.+36     	; 0x3176 <__fixunssfsi+0x4c>
    3152:	0e 94 32 0a 	call	0x1464	; 0x1464 <__fp_zero>
    3156:	b1 e0       	ldi	r27, 0x01	; 1
    3158:	08 95       	ret
    315a:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__fp_zero>
    315e:	67 2f       	mov	r22, r23
    3160:	78 2f       	mov	r23, r24
    3162:	88 27       	eor	r24, r24
    3164:	b8 5f       	subi	r27, 0xF8	; 248
    3166:	39 f0       	breq	.+14     	; 0x3176 <__fixunssfsi+0x4c>
    3168:	b9 3f       	cpi	r27, 0xF9	; 249
    316a:	cc f3       	brlt	.-14     	; 0x315e <__fixunssfsi+0x34>
    316c:	86 95       	lsr	r24
    316e:	77 95       	ror	r23
    3170:	67 95       	ror	r22
    3172:	b3 95       	inc	r27
    3174:	d9 f7       	brne	.-10     	; 0x316c <__fixunssfsi+0x42>
    3176:	3e f4       	brtc	.+14     	; 0x3186 <__fixunssfsi+0x5c>
    3178:	90 95       	com	r25
    317a:	80 95       	com	r24
    317c:	70 95       	com	r23
    317e:	61 95       	neg	r22
    3180:	7f 4f       	sbci	r23, 0xFF	; 255
    3182:	8f 4f       	sbci	r24, 0xFF	; 255
    3184:	9f 4f       	sbci	r25, 0xFF	; 255
    3186:	08 95       	ret

00003188 <__fp_cmp>:
    3188:	99 0f       	add	r25, r25
    318a:	00 08       	sbc	r0, r0
    318c:	55 0f       	add	r21, r21
    318e:	aa 0b       	sbc	r26, r26
    3190:	e0 e8       	ldi	r30, 0x80	; 128
    3192:	fe ef       	ldi	r31, 0xFE	; 254
    3194:	16 16       	cp	r1, r22
    3196:	17 06       	cpc	r1, r23
    3198:	e8 07       	cpc	r30, r24
    319a:	f9 07       	cpc	r31, r25
    319c:	c0 f0       	brcs	.+48     	; 0x31ce <__fp_cmp+0x46>
    319e:	12 16       	cp	r1, r18
    31a0:	13 06       	cpc	r1, r19
    31a2:	e4 07       	cpc	r30, r20
    31a4:	f5 07       	cpc	r31, r21
    31a6:	98 f0       	brcs	.+38     	; 0x31ce <__fp_cmp+0x46>
    31a8:	62 1b       	sub	r22, r18
    31aa:	73 0b       	sbc	r23, r19
    31ac:	84 0b       	sbc	r24, r20
    31ae:	95 0b       	sbc	r25, r21
    31b0:	39 f4       	brne	.+14     	; 0x31c0 <__fp_cmp+0x38>
    31b2:	0a 26       	eor	r0, r26
    31b4:	61 f0       	breq	.+24     	; 0x31ce <__fp_cmp+0x46>
    31b6:	23 2b       	or	r18, r19
    31b8:	24 2b       	or	r18, r20
    31ba:	25 2b       	or	r18, r21
    31bc:	21 f4       	brne	.+8      	; 0x31c6 <__fp_cmp+0x3e>
    31be:	08 95       	ret
    31c0:	0a 26       	eor	r0, r26
    31c2:	09 f4       	brne	.+2      	; 0x31c6 <__fp_cmp+0x3e>
    31c4:	a1 40       	sbci	r26, 0x01	; 1
    31c6:	a6 95       	lsr	r26
    31c8:	8f ef       	ldi	r24, 0xFF	; 255
    31ca:	81 1d       	adc	r24, r1
    31cc:	81 1d       	adc	r24, r1
    31ce:	08 95       	ret

000031d0 <__gesf2>:
    31d0:	0e 94 c4 18 	call	0x3188	; 0x3188 <__fp_cmp>
    31d4:	08 f4       	brcc	.+2      	; 0x31d8 <__gesf2+0x8>
    31d6:	8f ef       	ldi	r24, 0xFF	; 255
    31d8:	08 95       	ret

000031da <__mulsf3>:
    31da:	0e 94 00 19 	call	0x3200	; 0x3200 <__mulsf3x>
    31de:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__fp_round>
    31e2:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__fp_pscA>
    31e6:	38 f0       	brcs	.+14     	; 0x31f6 <__mulsf3+0x1c>
    31e8:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fp_pscB>
    31ec:	20 f0       	brcs	.+8      	; 0x31f6 <__mulsf3+0x1c>
    31ee:	95 23       	and	r25, r21
    31f0:	11 f0       	breq	.+4      	; 0x31f6 <__mulsf3+0x1c>
    31f2:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__fp_inf>
    31f6:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_nan>
    31fa:	11 24       	eor	r1, r1
    31fc:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__fp_szero>

00003200 <__mulsf3x>:
    3200:	0e 94 10 0a 	call	0x1420	; 0x1420 <__fp_split3>
    3204:	70 f3       	brcs	.-36     	; 0x31e2 <__mulsf3+0x8>

00003206 <__mulsf3_pse>:
    3206:	95 9f       	mul	r25, r21
    3208:	c1 f3       	breq	.-16     	; 0x31fa <__mulsf3+0x20>
    320a:	95 0f       	add	r25, r21
    320c:	50 e0       	ldi	r21, 0x00	; 0
    320e:	55 1f       	adc	r21, r21
    3210:	62 9f       	mul	r22, r18
    3212:	f0 01       	movw	r30, r0
    3214:	72 9f       	mul	r23, r18
    3216:	bb 27       	eor	r27, r27
    3218:	f0 0d       	add	r31, r0
    321a:	b1 1d       	adc	r27, r1
    321c:	63 9f       	mul	r22, r19
    321e:	aa 27       	eor	r26, r26
    3220:	f0 0d       	add	r31, r0
    3222:	b1 1d       	adc	r27, r1
    3224:	aa 1f       	adc	r26, r26
    3226:	64 9f       	mul	r22, r20
    3228:	66 27       	eor	r22, r22
    322a:	b0 0d       	add	r27, r0
    322c:	a1 1d       	adc	r26, r1
    322e:	66 1f       	adc	r22, r22
    3230:	82 9f       	mul	r24, r18
    3232:	22 27       	eor	r18, r18
    3234:	b0 0d       	add	r27, r0
    3236:	a1 1d       	adc	r26, r1
    3238:	62 1f       	adc	r22, r18
    323a:	73 9f       	mul	r23, r19
    323c:	b0 0d       	add	r27, r0
    323e:	a1 1d       	adc	r26, r1
    3240:	62 1f       	adc	r22, r18
    3242:	83 9f       	mul	r24, r19
    3244:	a0 0d       	add	r26, r0
    3246:	61 1d       	adc	r22, r1
    3248:	22 1f       	adc	r18, r18
    324a:	74 9f       	mul	r23, r20
    324c:	33 27       	eor	r19, r19
    324e:	a0 0d       	add	r26, r0
    3250:	61 1d       	adc	r22, r1
    3252:	23 1f       	adc	r18, r19
    3254:	84 9f       	mul	r24, r20
    3256:	60 0d       	add	r22, r0
    3258:	21 1d       	adc	r18, r1
    325a:	82 2f       	mov	r24, r18
    325c:	76 2f       	mov	r23, r22
    325e:	6a 2f       	mov	r22, r26
    3260:	11 24       	eor	r1, r1
    3262:	9f 57       	subi	r25, 0x7F	; 127
    3264:	50 40       	sbci	r21, 0x00	; 0
    3266:	9a f0       	brmi	.+38     	; 0x328e <__mulsf3_pse+0x88>
    3268:	f1 f0       	breq	.+60     	; 0x32a6 <__mulsf3_pse+0xa0>
    326a:	88 23       	and	r24, r24
    326c:	4a f0       	brmi	.+18     	; 0x3280 <__mulsf3_pse+0x7a>
    326e:	ee 0f       	add	r30, r30
    3270:	ff 1f       	adc	r31, r31
    3272:	bb 1f       	adc	r27, r27
    3274:	66 1f       	adc	r22, r22
    3276:	77 1f       	adc	r23, r23
    3278:	88 1f       	adc	r24, r24
    327a:	91 50       	subi	r25, 0x01	; 1
    327c:	50 40       	sbci	r21, 0x00	; 0
    327e:	a9 f7       	brne	.-22     	; 0x326a <__mulsf3_pse+0x64>
    3280:	9e 3f       	cpi	r25, 0xFE	; 254
    3282:	51 05       	cpc	r21, r1
    3284:	80 f0       	brcs	.+32     	; 0x32a6 <__mulsf3_pse+0xa0>
    3286:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__fp_inf>
    328a:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__fp_szero>
    328e:	5f 3f       	cpi	r21, 0xFF	; 255
    3290:	e4 f3       	brlt	.-8      	; 0x328a <__mulsf3_pse+0x84>
    3292:	98 3e       	cpi	r25, 0xE8	; 232
    3294:	d4 f3       	brlt	.-12     	; 0x328a <__mulsf3_pse+0x84>
    3296:	86 95       	lsr	r24
    3298:	77 95       	ror	r23
    329a:	67 95       	ror	r22
    329c:	b7 95       	ror	r27
    329e:	f7 95       	ror	r31
    32a0:	e7 95       	ror	r30
    32a2:	9f 5f       	subi	r25, 0xFF	; 255
    32a4:	c1 f7       	brne	.-16     	; 0x3296 <__mulsf3_pse+0x90>
    32a6:	fe 2b       	or	r31, r30
    32a8:	88 0f       	add	r24, r24
    32aa:	91 1d       	adc	r25, r1
    32ac:	96 95       	lsr	r25
    32ae:	87 95       	ror	r24
    32b0:	97 f9       	bld	r25, 7
    32b2:	08 95       	ret

000032b4 <__unordsf2>:
    32b4:	0e 94 c4 18 	call	0x3188	; 0x3188 <__fp_cmp>
    32b8:	88 0b       	sbc	r24, r24
    32ba:	99 0b       	sbc	r25, r25
    32bc:	08 95       	ret

000032be <__udivmodsi4>:
    32be:	a1 e2       	ldi	r26, 0x21	; 33
    32c0:	1a 2e       	mov	r1, r26
    32c2:	aa 1b       	sub	r26, r26
    32c4:	bb 1b       	sub	r27, r27
    32c6:	fd 01       	movw	r30, r26
    32c8:	0d c0       	rjmp	.+26     	; 0x32e4 <__udivmodsi4_ep>

000032ca <__udivmodsi4_loop>:
    32ca:	aa 1f       	adc	r26, r26
    32cc:	bb 1f       	adc	r27, r27
    32ce:	ee 1f       	adc	r30, r30
    32d0:	ff 1f       	adc	r31, r31
    32d2:	a2 17       	cp	r26, r18
    32d4:	b3 07       	cpc	r27, r19
    32d6:	e4 07       	cpc	r30, r20
    32d8:	f5 07       	cpc	r31, r21
    32da:	20 f0       	brcs	.+8      	; 0x32e4 <__udivmodsi4_ep>
    32dc:	a2 1b       	sub	r26, r18
    32de:	b3 0b       	sbc	r27, r19
    32e0:	e4 0b       	sbc	r30, r20
    32e2:	f5 0b       	sbc	r31, r21

000032e4 <__udivmodsi4_ep>:
    32e4:	66 1f       	adc	r22, r22
    32e6:	77 1f       	adc	r23, r23
    32e8:	88 1f       	adc	r24, r24
    32ea:	99 1f       	adc	r25, r25
    32ec:	1a 94       	dec	r1
    32ee:	69 f7       	brne	.-38     	; 0x32ca <__udivmodsi4_loop>
    32f0:	60 95       	com	r22
    32f2:	70 95       	com	r23
    32f4:	80 95       	com	r24
    32f6:	90 95       	com	r25
    32f8:	9b 01       	movw	r18, r22
    32fa:	ac 01       	movw	r20, r24
    32fc:	bd 01       	movw	r22, r26
    32fe:	cf 01       	movw	r24, r30
    3300:	08 95       	ret

00003302 <__tablejump2__>:
    3302:	ee 0f       	add	r30, r30
    3304:	ff 1f       	adc	r31, r31
    3306:	05 90       	lpm	r0, Z+
    3308:	f4 91       	lpm	r31, Z
    330a:	e0 2d       	mov	r30, r0
    330c:	09 94       	ijmp

0000330e <dtostrf>:
    330e:	ef 92       	push	r14
    3310:	0f 93       	push	r16
    3312:	1f 93       	push	r17
    3314:	cf 93       	push	r28
    3316:	df 93       	push	r29
    3318:	e8 01       	movw	r28, r16
    331a:	47 fd       	sbrc	r20, 7
    331c:	02 c0       	rjmp	.+4      	; 0x3322 <dtostrf+0x14>
    331e:	34 e0       	ldi	r19, 0x04	; 4
    3320:	01 c0       	rjmp	.+2      	; 0x3324 <dtostrf+0x16>
    3322:	34 e1       	ldi	r19, 0x14	; 20
    3324:	04 2e       	mov	r0, r20
    3326:	00 0c       	add	r0, r0
    3328:	55 0b       	sbc	r21, r21
    332a:	57 ff       	sbrs	r21, 7
    332c:	03 c0       	rjmp	.+6      	; 0x3334 <dtostrf+0x26>
    332e:	51 95       	neg	r21
    3330:	41 95       	neg	r20
    3332:	51 09       	sbc	r21, r1
    3334:	e3 2e       	mov	r14, r19
    3336:	02 2f       	mov	r16, r18
    3338:	24 2f       	mov	r18, r20
    333a:	ae 01       	movw	r20, r28
    333c:	0e 94 c0 1b 	call	0x3780	; 0x3780 <dtoa_prf>
    3340:	ce 01       	movw	r24, r28
    3342:	df 91       	pop	r29
    3344:	cf 91       	pop	r28
    3346:	1f 91       	pop	r17
    3348:	0f 91       	pop	r16
    334a:	ef 90       	pop	r14
    334c:	08 95       	ret

0000334e <malloc>:
    334e:	0f 93       	push	r16
    3350:	1f 93       	push	r17
    3352:	cf 93       	push	r28
    3354:	df 93       	push	r29
    3356:	82 30       	cpi	r24, 0x02	; 2
    3358:	91 05       	cpc	r25, r1
    335a:	10 f4       	brcc	.+4      	; 0x3360 <malloc+0x12>
    335c:	82 e0       	ldi	r24, 0x02	; 2
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <__flp>
    3364:	f0 91 87 04 	lds	r31, 0x0487	; 0x800487 <__flp+0x1>
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	a0 e0       	ldi	r26, 0x00	; 0
    336e:	b0 e0       	ldi	r27, 0x00	; 0
    3370:	30 97       	sbiw	r30, 0x00	; 0
    3372:	19 f1       	breq	.+70     	; 0x33ba <malloc+0x6c>
    3374:	40 81       	ld	r20, Z
    3376:	51 81       	ldd	r21, Z+1	; 0x01
    3378:	02 81       	ldd	r16, Z+2	; 0x02
    337a:	13 81       	ldd	r17, Z+3	; 0x03
    337c:	48 17       	cp	r20, r24
    337e:	59 07       	cpc	r21, r25
    3380:	c8 f0       	brcs	.+50     	; 0x33b4 <malloc+0x66>
    3382:	84 17       	cp	r24, r20
    3384:	95 07       	cpc	r25, r21
    3386:	69 f4       	brne	.+26     	; 0x33a2 <malloc+0x54>
    3388:	10 97       	sbiw	r26, 0x00	; 0
    338a:	31 f0       	breq	.+12     	; 0x3398 <malloc+0x4a>
    338c:	12 96       	adiw	r26, 0x02	; 2
    338e:	0c 93       	st	X, r16
    3390:	12 97       	sbiw	r26, 0x02	; 2
    3392:	13 96       	adiw	r26, 0x03	; 3
    3394:	1c 93       	st	X, r17
    3396:	27 c0       	rjmp	.+78     	; 0x33e6 <malloc+0x98>
    3398:	00 93 86 04 	sts	0x0486, r16	; 0x800486 <__flp>
    339c:	10 93 87 04 	sts	0x0487, r17	; 0x800487 <__flp+0x1>
    33a0:	22 c0       	rjmp	.+68     	; 0x33e6 <malloc+0x98>
    33a2:	21 15       	cp	r18, r1
    33a4:	31 05       	cpc	r19, r1
    33a6:	19 f0       	breq	.+6      	; 0x33ae <malloc+0x60>
    33a8:	42 17       	cp	r20, r18
    33aa:	53 07       	cpc	r21, r19
    33ac:	18 f4       	brcc	.+6      	; 0x33b4 <malloc+0x66>
    33ae:	9a 01       	movw	r18, r20
    33b0:	bd 01       	movw	r22, r26
    33b2:	ef 01       	movw	r28, r30
    33b4:	df 01       	movw	r26, r30
    33b6:	f8 01       	movw	r30, r16
    33b8:	db cf       	rjmp	.-74     	; 0x3370 <malloc+0x22>
    33ba:	21 15       	cp	r18, r1
    33bc:	31 05       	cpc	r19, r1
    33be:	f9 f0       	breq	.+62     	; 0x33fe <malloc+0xb0>
    33c0:	28 1b       	sub	r18, r24
    33c2:	39 0b       	sbc	r19, r25
    33c4:	24 30       	cpi	r18, 0x04	; 4
    33c6:	31 05       	cpc	r19, r1
    33c8:	80 f4       	brcc	.+32     	; 0x33ea <malloc+0x9c>
    33ca:	8a 81       	ldd	r24, Y+2	; 0x02
    33cc:	9b 81       	ldd	r25, Y+3	; 0x03
    33ce:	61 15       	cp	r22, r1
    33d0:	71 05       	cpc	r23, r1
    33d2:	21 f0       	breq	.+8      	; 0x33dc <malloc+0x8e>
    33d4:	fb 01       	movw	r30, r22
    33d6:	93 83       	std	Z+3, r25	; 0x03
    33d8:	82 83       	std	Z+2, r24	; 0x02
    33da:	04 c0       	rjmp	.+8      	; 0x33e4 <malloc+0x96>
    33dc:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <__flp+0x1>
    33e0:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <__flp>
    33e4:	fe 01       	movw	r30, r28
    33e6:	32 96       	adiw	r30, 0x02	; 2
    33e8:	44 c0       	rjmp	.+136    	; 0x3472 <malloc+0x124>
    33ea:	fe 01       	movw	r30, r28
    33ec:	e2 0f       	add	r30, r18
    33ee:	f3 1f       	adc	r31, r19
    33f0:	81 93       	st	Z+, r24
    33f2:	91 93       	st	Z+, r25
    33f4:	22 50       	subi	r18, 0x02	; 2
    33f6:	31 09       	sbc	r19, r1
    33f8:	39 83       	std	Y+1, r19	; 0x01
    33fa:	28 83       	st	Y, r18
    33fc:	3a c0       	rjmp	.+116    	; 0x3472 <malloc+0x124>
    33fe:	20 91 84 04 	lds	r18, 0x0484	; 0x800484 <__brkval>
    3402:	30 91 85 04 	lds	r19, 0x0485	; 0x800485 <__brkval+0x1>
    3406:	23 2b       	or	r18, r19
    3408:	41 f4       	brne	.+16     	; 0x341a <malloc+0xcc>
    340a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    340e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3412:	30 93 85 04 	sts	0x0485, r19	; 0x800485 <__brkval+0x1>
    3416:	20 93 84 04 	sts	0x0484, r18	; 0x800484 <__brkval>
    341a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    341e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3422:	21 15       	cp	r18, r1
    3424:	31 05       	cpc	r19, r1
    3426:	41 f4       	brne	.+16     	; 0x3438 <malloc+0xea>
    3428:	2d b7       	in	r18, 0x3d	; 61
    342a:	3e b7       	in	r19, 0x3e	; 62
    342c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3430:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3434:	24 1b       	sub	r18, r20
    3436:	35 0b       	sbc	r19, r21
    3438:	e0 91 84 04 	lds	r30, 0x0484	; 0x800484 <__brkval>
    343c:	f0 91 85 04 	lds	r31, 0x0485	; 0x800485 <__brkval+0x1>
    3440:	e2 17       	cp	r30, r18
    3442:	f3 07       	cpc	r31, r19
    3444:	a0 f4       	brcc	.+40     	; 0x346e <malloc+0x120>
    3446:	2e 1b       	sub	r18, r30
    3448:	3f 0b       	sbc	r19, r31
    344a:	28 17       	cp	r18, r24
    344c:	39 07       	cpc	r19, r25
    344e:	78 f0       	brcs	.+30     	; 0x346e <malloc+0x120>
    3450:	ac 01       	movw	r20, r24
    3452:	4e 5f       	subi	r20, 0xFE	; 254
    3454:	5f 4f       	sbci	r21, 0xFF	; 255
    3456:	24 17       	cp	r18, r20
    3458:	35 07       	cpc	r19, r21
    345a:	48 f0       	brcs	.+18     	; 0x346e <malloc+0x120>
    345c:	4e 0f       	add	r20, r30
    345e:	5f 1f       	adc	r21, r31
    3460:	50 93 85 04 	sts	0x0485, r21	; 0x800485 <__brkval+0x1>
    3464:	40 93 84 04 	sts	0x0484, r20	; 0x800484 <__brkval>
    3468:	81 93       	st	Z+, r24
    346a:	91 93       	st	Z+, r25
    346c:	02 c0       	rjmp	.+4      	; 0x3472 <malloc+0x124>
    346e:	e0 e0       	ldi	r30, 0x00	; 0
    3470:	f0 e0       	ldi	r31, 0x00	; 0
    3472:	cf 01       	movw	r24, r30
    3474:	df 91       	pop	r29
    3476:	cf 91       	pop	r28
    3478:	1f 91       	pop	r17
    347a:	0f 91       	pop	r16
    347c:	08 95       	ret

0000347e <free>:
    347e:	cf 93       	push	r28
    3480:	df 93       	push	r29
    3482:	00 97       	sbiw	r24, 0x00	; 0
    3484:	09 f4       	brne	.+2      	; 0x3488 <free+0xa>
    3486:	81 c0       	rjmp	.+258    	; 0x358a <free+0x10c>
    3488:	fc 01       	movw	r30, r24
    348a:	32 97       	sbiw	r30, 0x02	; 2
    348c:	13 82       	std	Z+3, r1	; 0x03
    348e:	12 82       	std	Z+2, r1	; 0x02
    3490:	a0 91 86 04 	lds	r26, 0x0486	; 0x800486 <__flp>
    3494:	b0 91 87 04 	lds	r27, 0x0487	; 0x800487 <__flp+0x1>
    3498:	10 97       	sbiw	r26, 0x00	; 0
    349a:	81 f4       	brne	.+32     	; 0x34bc <free+0x3e>
    349c:	20 81       	ld	r18, Z
    349e:	31 81       	ldd	r19, Z+1	; 0x01
    34a0:	82 0f       	add	r24, r18
    34a2:	93 1f       	adc	r25, r19
    34a4:	20 91 84 04 	lds	r18, 0x0484	; 0x800484 <__brkval>
    34a8:	30 91 85 04 	lds	r19, 0x0485	; 0x800485 <__brkval+0x1>
    34ac:	28 17       	cp	r18, r24
    34ae:	39 07       	cpc	r19, r25
    34b0:	51 f5       	brne	.+84     	; 0x3506 <free+0x88>
    34b2:	f0 93 85 04 	sts	0x0485, r31	; 0x800485 <__brkval+0x1>
    34b6:	e0 93 84 04 	sts	0x0484, r30	; 0x800484 <__brkval>
    34ba:	67 c0       	rjmp	.+206    	; 0x358a <free+0x10c>
    34bc:	ed 01       	movw	r28, r26
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	ce 17       	cp	r28, r30
    34c4:	df 07       	cpc	r29, r31
    34c6:	40 f4       	brcc	.+16     	; 0x34d8 <free+0x5a>
    34c8:	4a 81       	ldd	r20, Y+2	; 0x02
    34ca:	5b 81       	ldd	r21, Y+3	; 0x03
    34cc:	9e 01       	movw	r18, r28
    34ce:	41 15       	cp	r20, r1
    34d0:	51 05       	cpc	r21, r1
    34d2:	f1 f0       	breq	.+60     	; 0x3510 <free+0x92>
    34d4:	ea 01       	movw	r28, r20
    34d6:	f5 cf       	rjmp	.-22     	; 0x34c2 <free+0x44>
    34d8:	d3 83       	std	Z+3, r29	; 0x03
    34da:	c2 83       	std	Z+2, r28	; 0x02
    34dc:	40 81       	ld	r20, Z
    34de:	51 81       	ldd	r21, Z+1	; 0x01
    34e0:	84 0f       	add	r24, r20
    34e2:	95 1f       	adc	r25, r21
    34e4:	c8 17       	cp	r28, r24
    34e6:	d9 07       	cpc	r29, r25
    34e8:	59 f4       	brne	.+22     	; 0x3500 <free+0x82>
    34ea:	88 81       	ld	r24, Y
    34ec:	99 81       	ldd	r25, Y+1	; 0x01
    34ee:	84 0f       	add	r24, r20
    34f0:	95 1f       	adc	r25, r21
    34f2:	02 96       	adiw	r24, 0x02	; 2
    34f4:	91 83       	std	Z+1, r25	; 0x01
    34f6:	80 83       	st	Z, r24
    34f8:	8a 81       	ldd	r24, Y+2	; 0x02
    34fa:	9b 81       	ldd	r25, Y+3	; 0x03
    34fc:	93 83       	std	Z+3, r25	; 0x03
    34fe:	82 83       	std	Z+2, r24	; 0x02
    3500:	21 15       	cp	r18, r1
    3502:	31 05       	cpc	r19, r1
    3504:	29 f4       	brne	.+10     	; 0x3510 <free+0x92>
    3506:	f0 93 87 04 	sts	0x0487, r31	; 0x800487 <__flp+0x1>
    350a:	e0 93 86 04 	sts	0x0486, r30	; 0x800486 <__flp>
    350e:	3d c0       	rjmp	.+122    	; 0x358a <free+0x10c>
    3510:	e9 01       	movw	r28, r18
    3512:	fb 83       	std	Y+3, r31	; 0x03
    3514:	ea 83       	std	Y+2, r30	; 0x02
    3516:	49 91       	ld	r20, Y+
    3518:	59 91       	ld	r21, Y+
    351a:	c4 0f       	add	r28, r20
    351c:	d5 1f       	adc	r29, r21
    351e:	ec 17       	cp	r30, r28
    3520:	fd 07       	cpc	r31, r29
    3522:	61 f4       	brne	.+24     	; 0x353c <free+0xbe>
    3524:	80 81       	ld	r24, Z
    3526:	91 81       	ldd	r25, Z+1	; 0x01
    3528:	84 0f       	add	r24, r20
    352a:	95 1f       	adc	r25, r21
    352c:	02 96       	adiw	r24, 0x02	; 2
    352e:	e9 01       	movw	r28, r18
    3530:	99 83       	std	Y+1, r25	; 0x01
    3532:	88 83       	st	Y, r24
    3534:	82 81       	ldd	r24, Z+2	; 0x02
    3536:	93 81       	ldd	r25, Z+3	; 0x03
    3538:	9b 83       	std	Y+3, r25	; 0x03
    353a:	8a 83       	std	Y+2, r24	; 0x02
    353c:	e0 e0       	ldi	r30, 0x00	; 0
    353e:	f0 e0       	ldi	r31, 0x00	; 0
    3540:	12 96       	adiw	r26, 0x02	; 2
    3542:	8d 91       	ld	r24, X+
    3544:	9c 91       	ld	r25, X
    3546:	13 97       	sbiw	r26, 0x03	; 3
    3548:	00 97       	sbiw	r24, 0x00	; 0
    354a:	19 f0       	breq	.+6      	; 0x3552 <free+0xd4>
    354c:	fd 01       	movw	r30, r26
    354e:	dc 01       	movw	r26, r24
    3550:	f7 cf       	rjmp	.-18     	; 0x3540 <free+0xc2>
    3552:	8d 91       	ld	r24, X+
    3554:	9c 91       	ld	r25, X
    3556:	11 97       	sbiw	r26, 0x01	; 1
    3558:	9d 01       	movw	r18, r26
    355a:	2e 5f       	subi	r18, 0xFE	; 254
    355c:	3f 4f       	sbci	r19, 0xFF	; 255
    355e:	82 0f       	add	r24, r18
    3560:	93 1f       	adc	r25, r19
    3562:	20 91 84 04 	lds	r18, 0x0484	; 0x800484 <__brkval>
    3566:	30 91 85 04 	lds	r19, 0x0485	; 0x800485 <__brkval+0x1>
    356a:	28 17       	cp	r18, r24
    356c:	39 07       	cpc	r19, r25
    356e:	69 f4       	brne	.+26     	; 0x358a <free+0x10c>
    3570:	30 97       	sbiw	r30, 0x00	; 0
    3572:	29 f4       	brne	.+10     	; 0x357e <free+0x100>
    3574:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <__flp+0x1>
    3578:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <__flp>
    357c:	02 c0       	rjmp	.+4      	; 0x3582 <free+0x104>
    357e:	13 82       	std	Z+3, r1	; 0x03
    3580:	12 82       	std	Z+2, r1	; 0x02
    3582:	b0 93 85 04 	sts	0x0485, r27	; 0x800485 <__brkval+0x1>
    3586:	a0 93 84 04 	sts	0x0484, r26	; 0x800484 <__brkval>
    358a:	df 91       	pop	r29
    358c:	cf 91       	pop	r28
    358e:	08 95       	ret

00003590 <realloc>:
    3590:	a0 e0       	ldi	r26, 0x00	; 0
    3592:	b0 e0       	ldi	r27, 0x00	; 0
    3594:	ee ec       	ldi	r30, 0xCE	; 206
    3596:	fa e1       	ldi	r31, 0x1A	; 26
    3598:	0c 94 06 1e 	jmp	0x3c0c	; 0x3c0c <__prologue_saves__+0x8>
    359c:	ec 01       	movw	r28, r24
    359e:	00 97       	sbiw	r24, 0x00	; 0
    35a0:	21 f4       	brne	.+8      	; 0x35aa <realloc+0x1a>
    35a2:	cb 01       	movw	r24, r22
    35a4:	0e 94 a7 19 	call	0x334e	; 0x334e <malloc>
    35a8:	b4 c0       	rjmp	.+360    	; 0x3712 <realloc+0x182>
    35aa:	fc 01       	movw	r30, r24
    35ac:	e6 0f       	add	r30, r22
    35ae:	f7 1f       	adc	r31, r23
    35b0:	9c 01       	movw	r18, r24
    35b2:	22 50       	subi	r18, 0x02	; 2
    35b4:	31 09       	sbc	r19, r1
    35b6:	e2 17       	cp	r30, r18
    35b8:	f3 07       	cpc	r31, r19
    35ba:	08 f4       	brcc	.+2      	; 0x35be <realloc+0x2e>
    35bc:	a8 c0       	rjmp	.+336    	; 0x370e <realloc+0x17e>
    35be:	d9 01       	movw	r26, r18
    35c0:	0d 91       	ld	r16, X+
    35c2:	1c 91       	ld	r17, X
    35c4:	11 97       	sbiw	r26, 0x01	; 1
    35c6:	06 17       	cp	r16, r22
    35c8:	17 07       	cpc	r17, r23
    35ca:	b0 f0       	brcs	.+44     	; 0x35f8 <realloc+0x68>
    35cc:	05 30       	cpi	r16, 0x05	; 5
    35ce:	11 05       	cpc	r17, r1
    35d0:	08 f4       	brcc	.+2      	; 0x35d4 <realloc+0x44>
    35d2:	9b c0       	rjmp	.+310    	; 0x370a <realloc+0x17a>
    35d4:	c8 01       	movw	r24, r16
    35d6:	04 97       	sbiw	r24, 0x04	; 4
    35d8:	86 17       	cp	r24, r22
    35da:	97 07       	cpc	r25, r23
    35dc:	08 f4       	brcc	.+2      	; 0x35e0 <realloc+0x50>
    35de:	95 c0       	rjmp	.+298    	; 0x370a <realloc+0x17a>
    35e0:	02 50       	subi	r16, 0x02	; 2
    35e2:	11 09       	sbc	r17, r1
    35e4:	06 1b       	sub	r16, r22
    35e6:	17 0b       	sbc	r17, r23
    35e8:	01 93       	st	Z+, r16
    35ea:	11 93       	st	Z+, r17
    35ec:	6d 93       	st	X+, r22
    35ee:	7c 93       	st	X, r23
    35f0:	cf 01       	movw	r24, r30
    35f2:	0e 94 3f 1a 	call	0x347e	; 0x347e <free>
    35f6:	89 c0       	rjmp	.+274    	; 0x370a <realloc+0x17a>
    35f8:	5b 01       	movw	r10, r22
    35fa:	a0 1a       	sub	r10, r16
    35fc:	b1 0a       	sbc	r11, r17
    35fe:	4c 01       	movw	r8, r24
    3600:	80 0e       	add	r8, r16
    3602:	91 1e       	adc	r9, r17
    3604:	a0 91 86 04 	lds	r26, 0x0486	; 0x800486 <__flp>
    3608:	b0 91 87 04 	lds	r27, 0x0487	; 0x800487 <__flp+0x1>
    360c:	61 2c       	mov	r6, r1
    360e:	71 2c       	mov	r7, r1
    3610:	e1 2c       	mov	r14, r1
    3612:	f1 2c       	mov	r15, r1
    3614:	10 97       	sbiw	r26, 0x00	; 0
    3616:	09 f4       	brne	.+2      	; 0x361a <realloc+0x8a>
    3618:	46 c0       	rjmp	.+140    	; 0x36a6 <realloc+0x116>
    361a:	8d 91       	ld	r24, X+
    361c:	9c 91       	ld	r25, X
    361e:	11 97       	sbiw	r26, 0x01	; 1
    3620:	a8 15       	cp	r26, r8
    3622:	b9 05       	cpc	r27, r9
    3624:	b1 f5       	brne	.+108    	; 0x3692 <realloc+0x102>
    3626:	6c 01       	movw	r12, r24
    3628:	42 e0       	ldi	r20, 0x02	; 2
    362a:	c4 0e       	add	r12, r20
    362c:	d1 1c       	adc	r13, r1
    362e:	ca 14       	cp	r12, r10
    3630:	db 04       	cpc	r13, r11
    3632:	78 f1       	brcs	.+94     	; 0x3692 <realloc+0x102>
    3634:	4c 01       	movw	r8, r24
    3636:	8a 18       	sub	r8, r10
    3638:	9b 08       	sbc	r9, r11
    363a:	64 01       	movw	r12, r8
    363c:	42 e0       	ldi	r20, 0x02	; 2
    363e:	c4 0e       	add	r12, r20
    3640:	d1 1c       	adc	r13, r1
    3642:	12 96       	adiw	r26, 0x02	; 2
    3644:	bc 90       	ld	r11, X
    3646:	12 97       	sbiw	r26, 0x02	; 2
    3648:	13 96       	adiw	r26, 0x03	; 3
    364a:	ac 91       	ld	r26, X
    364c:	b5 e0       	ldi	r27, 0x05	; 5
    364e:	cb 16       	cp	r12, r27
    3650:	d1 04       	cpc	r13, r1
    3652:	40 f0       	brcs	.+16     	; 0x3664 <realloc+0xd4>
    3654:	b2 82       	std	Z+2, r11	; 0x02
    3656:	a3 83       	std	Z+3, r26	; 0x03
    3658:	91 82       	std	Z+1, r9	; 0x01
    365a:	80 82       	st	Z, r8
    365c:	d9 01       	movw	r26, r18
    365e:	6d 93       	st	X+, r22
    3660:	7c 93       	st	X, r23
    3662:	09 c0       	rjmp	.+18     	; 0x3676 <realloc+0xe6>
    3664:	0e 5f       	subi	r16, 0xFE	; 254
    3666:	1f 4f       	sbci	r17, 0xFF	; 255
    3668:	80 0f       	add	r24, r16
    366a:	91 1f       	adc	r25, r17
    366c:	f9 01       	movw	r30, r18
    366e:	91 83       	std	Z+1, r25	; 0x01
    3670:	80 83       	st	Z, r24
    3672:	eb 2d       	mov	r30, r11
    3674:	fa 2f       	mov	r31, r26
    3676:	e1 14       	cp	r14, r1
    3678:	f1 04       	cpc	r15, r1
    367a:	31 f0       	breq	.+12     	; 0x3688 <realloc+0xf8>
    367c:	d7 01       	movw	r26, r14
    367e:	13 96       	adiw	r26, 0x03	; 3
    3680:	fc 93       	st	X, r31
    3682:	ee 93       	st	-X, r30
    3684:	12 97       	sbiw	r26, 0x02	; 2
    3686:	41 c0       	rjmp	.+130    	; 0x370a <realloc+0x17a>
    3688:	f0 93 87 04 	sts	0x0487, r31	; 0x800487 <__flp+0x1>
    368c:	e0 93 86 04 	sts	0x0486, r30	; 0x800486 <__flp>
    3690:	3c c0       	rjmp	.+120    	; 0x370a <realloc+0x17a>
    3692:	68 16       	cp	r6, r24
    3694:	79 06       	cpc	r7, r25
    3696:	08 f4       	brcc	.+2      	; 0x369a <realloc+0x10a>
    3698:	3c 01       	movw	r6, r24
    369a:	7d 01       	movw	r14, r26
    369c:	12 96       	adiw	r26, 0x02	; 2
    369e:	0d 90       	ld	r0, X+
    36a0:	bc 91       	ld	r27, X
    36a2:	a0 2d       	mov	r26, r0
    36a4:	b7 cf       	rjmp	.-146    	; 0x3614 <realloc+0x84>
    36a6:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <__brkval>
    36aa:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <__brkval+0x1>
    36ae:	88 16       	cp	r8, r24
    36b0:	99 06       	cpc	r9, r25
    36b2:	e1 f4       	brne	.+56     	; 0x36ec <realloc+0x15c>
    36b4:	66 16       	cp	r6, r22
    36b6:	77 06       	cpc	r7, r23
    36b8:	c8 f4       	brcc	.+50     	; 0x36ec <realloc+0x15c>
    36ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    36be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    36c2:	00 97       	sbiw	r24, 0x00	; 0
    36c4:	41 f4       	brne	.+16     	; 0x36d6 <realloc+0x146>
    36c6:	8d b7       	in	r24, 0x3d	; 61
    36c8:	9e b7       	in	r25, 0x3e	; 62
    36ca:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    36ce:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    36d2:	84 1b       	sub	r24, r20
    36d4:	95 0b       	sbc	r25, r21
    36d6:	e8 17       	cp	r30, r24
    36d8:	f9 07       	cpc	r31, r25
    36da:	c8 f4       	brcc	.+50     	; 0x370e <realloc+0x17e>
    36dc:	f0 93 85 04 	sts	0x0485, r31	; 0x800485 <__brkval+0x1>
    36e0:	e0 93 84 04 	sts	0x0484, r30	; 0x800484 <__brkval>
    36e4:	f9 01       	movw	r30, r18
    36e6:	71 83       	std	Z+1, r23	; 0x01
    36e8:	60 83       	st	Z, r22
    36ea:	0f c0       	rjmp	.+30     	; 0x370a <realloc+0x17a>
    36ec:	cb 01       	movw	r24, r22
    36ee:	0e 94 a7 19 	call	0x334e	; 0x334e <malloc>
    36f2:	7c 01       	movw	r14, r24
    36f4:	00 97       	sbiw	r24, 0x00	; 0
    36f6:	59 f0       	breq	.+22     	; 0x370e <realloc+0x17e>
    36f8:	a8 01       	movw	r20, r16
    36fa:	be 01       	movw	r22, r28
    36fc:	0e 94 8e 1b 	call	0x371c	; 0x371c <memcpy>
    3700:	ce 01       	movw	r24, r28
    3702:	0e 94 3f 1a 	call	0x347e	; 0x347e <free>
    3706:	c7 01       	movw	r24, r14
    3708:	04 c0       	rjmp	.+8      	; 0x3712 <realloc+0x182>
    370a:	ce 01       	movw	r24, r28
    370c:	02 c0       	rjmp	.+4      	; 0x3712 <realloc+0x182>
    370e:	80 e0       	ldi	r24, 0x00	; 0
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	cd b7       	in	r28, 0x3d	; 61
    3714:	de b7       	in	r29, 0x3e	; 62
    3716:	ee e0       	ldi	r30, 0x0E	; 14
    3718:	0c 94 22 1e 	jmp	0x3c44	; 0x3c44 <__epilogue_restores__+0x8>

0000371c <memcpy>:
    371c:	fb 01       	movw	r30, r22
    371e:	dc 01       	movw	r26, r24
    3720:	02 c0       	rjmp	.+4      	; 0x3726 <memcpy+0xa>
    3722:	01 90       	ld	r0, Z+
    3724:	0d 92       	st	X+, r0
    3726:	41 50       	subi	r20, 0x01	; 1
    3728:	50 40       	sbci	r21, 0x00	; 0
    372a:	d8 f7       	brcc	.-10     	; 0x3722 <memcpy+0x6>
    372c:	08 95       	ret

0000372e <strcpy>:
    372e:	fb 01       	movw	r30, r22
    3730:	dc 01       	movw	r26, r24
    3732:	01 90       	ld	r0, Z+
    3734:	0d 92       	st	X+, r0
    3736:	00 20       	and	r0, r0
    3738:	e1 f7       	brne	.-8      	; 0x3732 <strcpy+0x4>
    373a:	08 95       	ret

0000373c <__ultoa_ncheck>:
    373c:	bb 27       	eor	r27, r27

0000373e <__ultoa_common>:
    373e:	fa 01       	movw	r30, r20
    3740:	a6 2f       	mov	r26, r22
    3742:	62 17       	cp	r22, r18
    3744:	71 05       	cpc	r23, r1
    3746:	81 05       	cpc	r24, r1
    3748:	91 05       	cpc	r25, r1
    374a:	33 0b       	sbc	r19, r19
    374c:	30 fb       	bst	r19, 0
    374e:	66 f0       	brts	.+24     	; 0x3768 <__ultoa_common+0x2a>
    3750:	aa 27       	eor	r26, r26
    3752:	66 0f       	add	r22, r22
    3754:	77 1f       	adc	r23, r23
    3756:	88 1f       	adc	r24, r24
    3758:	99 1f       	adc	r25, r25
    375a:	aa 1f       	adc	r26, r26
    375c:	a2 17       	cp	r26, r18
    375e:	10 f0       	brcs	.+4      	; 0x3764 <__ultoa_common+0x26>
    3760:	a2 1b       	sub	r26, r18
    3762:	63 95       	inc	r22
    3764:	38 50       	subi	r19, 0x08	; 8
    3766:	a9 f7       	brne	.-22     	; 0x3752 <__ultoa_common+0x14>
    3768:	a0 5d       	subi	r26, 0xD0	; 208
    376a:	aa 33       	cpi	r26, 0x3A	; 58
    376c:	08 f0       	brcs	.+2      	; 0x3770 <__ultoa_common+0x32>
    376e:	a9 5d       	subi	r26, 0xD9	; 217
    3770:	a1 93       	st	Z+, r26
    3772:	36 f7       	brtc	.-52     	; 0x3740 <__ultoa_common+0x2>
    3774:	b1 11       	cpse	r27, r1
    3776:	b1 93       	st	Z+, r27
    3778:	10 82       	st	Z, r1
    377a:	ca 01       	movw	r24, r20
    377c:	0c 94 f2 1d 	jmp	0x3be4	; 0x3be4 <strrev>

00003780 <dtoa_prf>:
    3780:	a9 e0       	ldi	r26, 0x09	; 9
    3782:	b0 e0       	ldi	r27, 0x00	; 0
    3784:	e6 ec       	ldi	r30, 0xC6	; 198
    3786:	fb e1       	ldi	r31, 0x1B	; 27
    3788:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <__prologue_saves__+0xc>
    378c:	6a 01       	movw	r12, r20
    378e:	12 2f       	mov	r17, r18
    3790:	b0 2e       	mov	r11, r16
    3792:	2b e3       	ldi	r18, 0x3B	; 59
    3794:	20 17       	cp	r18, r16
    3796:	20 f0       	brcs	.+8      	; 0x37a0 <dtoa_prf+0x20>
    3798:	ff 24       	eor	r15, r15
    379a:	f3 94       	inc	r15
    379c:	f0 0e       	add	r15, r16
    379e:	02 c0       	rjmp	.+4      	; 0x37a4 <dtoa_prf+0x24>
    37a0:	2c e3       	ldi	r18, 0x3C	; 60
    37a2:	f2 2e       	mov	r15, r18
    37a4:	0f 2d       	mov	r16, r15
    37a6:	27 e0       	ldi	r18, 0x07	; 7
    37a8:	ae 01       	movw	r20, r28
    37aa:	4f 5f       	subi	r20, 0xFF	; 255
    37ac:	5f 4f       	sbci	r21, 0xFF	; 255
    37ae:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <__ftoa_engine>
    37b2:	bc 01       	movw	r22, r24
    37b4:	49 81       	ldd	r20, Y+1	; 0x01
    37b6:	84 2f       	mov	r24, r20
    37b8:	89 70       	andi	r24, 0x09	; 9
    37ba:	81 30       	cpi	r24, 0x01	; 1
    37bc:	31 f0       	breq	.+12     	; 0x37ca <dtoa_prf+0x4a>
    37be:	e1 fc       	sbrc	r14, 1
    37c0:	06 c0       	rjmp	.+12     	; 0x37ce <dtoa_prf+0x4e>
    37c2:	e0 fe       	sbrs	r14, 0
    37c4:	06 c0       	rjmp	.+12     	; 0x37d2 <dtoa_prf+0x52>
    37c6:	90 e2       	ldi	r25, 0x20	; 32
    37c8:	05 c0       	rjmp	.+10     	; 0x37d4 <dtoa_prf+0x54>
    37ca:	9d e2       	ldi	r25, 0x2D	; 45
    37cc:	03 c0       	rjmp	.+6      	; 0x37d4 <dtoa_prf+0x54>
    37ce:	9b e2       	ldi	r25, 0x2B	; 43
    37d0:	01 c0       	rjmp	.+2      	; 0x37d4 <dtoa_prf+0x54>
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	5e 2d       	mov	r21, r14
    37d6:	50 71       	andi	r21, 0x10	; 16
    37d8:	43 ff       	sbrs	r20, 3
    37da:	3c c0       	rjmp	.+120    	; 0x3854 <dtoa_prf+0xd4>
    37dc:	91 11       	cpse	r25, r1
    37de:	02 c0       	rjmp	.+4      	; 0x37e4 <dtoa_prf+0x64>
    37e0:	83 e0       	ldi	r24, 0x03	; 3
    37e2:	01 c0       	rjmp	.+2      	; 0x37e6 <dtoa_prf+0x66>
    37e4:	84 e0       	ldi	r24, 0x04	; 4
    37e6:	81 17       	cp	r24, r17
    37e8:	18 f4       	brcc	.+6      	; 0x37f0 <dtoa_prf+0x70>
    37ea:	21 2f       	mov	r18, r17
    37ec:	28 1b       	sub	r18, r24
    37ee:	01 c0       	rjmp	.+2      	; 0x37f2 <dtoa_prf+0x72>
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	51 11       	cpse	r21, r1
    37f4:	0b c0       	rjmp	.+22     	; 0x380c <dtoa_prf+0x8c>
    37f6:	f6 01       	movw	r30, r12
    37f8:	82 2f       	mov	r24, r18
    37fa:	30 e2       	ldi	r19, 0x20	; 32
    37fc:	88 23       	and	r24, r24
    37fe:	19 f0       	breq	.+6      	; 0x3806 <dtoa_prf+0x86>
    3800:	31 93       	st	Z+, r19
    3802:	81 50       	subi	r24, 0x01	; 1
    3804:	fb cf       	rjmp	.-10     	; 0x37fc <dtoa_prf+0x7c>
    3806:	c2 0e       	add	r12, r18
    3808:	d1 1c       	adc	r13, r1
    380a:	20 e0       	ldi	r18, 0x00	; 0
    380c:	99 23       	and	r25, r25
    380e:	29 f0       	breq	.+10     	; 0x381a <dtoa_prf+0x9a>
    3810:	d6 01       	movw	r26, r12
    3812:	9c 93       	st	X, r25
    3814:	f6 01       	movw	r30, r12
    3816:	31 96       	adiw	r30, 0x01	; 1
    3818:	6f 01       	movw	r12, r30
    381a:	c6 01       	movw	r24, r12
    381c:	03 96       	adiw	r24, 0x03	; 3
    381e:	e2 fe       	sbrs	r14, 2
    3820:	0a c0       	rjmp	.+20     	; 0x3836 <dtoa_prf+0xb6>
    3822:	3e e4       	ldi	r19, 0x4E	; 78
    3824:	d6 01       	movw	r26, r12
    3826:	3c 93       	st	X, r19
    3828:	41 e4       	ldi	r20, 0x41	; 65
    382a:	11 96       	adiw	r26, 0x01	; 1
    382c:	4c 93       	st	X, r20
    382e:	11 97       	sbiw	r26, 0x01	; 1
    3830:	12 96       	adiw	r26, 0x02	; 2
    3832:	3c 93       	st	X, r19
    3834:	06 c0       	rjmp	.+12     	; 0x3842 <dtoa_prf+0xc2>
    3836:	3e e6       	ldi	r19, 0x6E	; 110
    3838:	f6 01       	movw	r30, r12
    383a:	30 83       	st	Z, r19
    383c:	41 e6       	ldi	r20, 0x61	; 97
    383e:	41 83       	std	Z+1, r20	; 0x01
    3840:	32 83       	std	Z+2, r19	; 0x02
    3842:	fc 01       	movw	r30, r24
    3844:	32 2f       	mov	r19, r18
    3846:	40 e2       	ldi	r20, 0x20	; 32
    3848:	33 23       	and	r19, r19
    384a:	09 f4       	brne	.+2      	; 0x384e <dtoa_prf+0xce>
    384c:	42 c0       	rjmp	.+132    	; 0x38d2 <dtoa_prf+0x152>
    384e:	41 93       	st	Z+, r20
    3850:	31 50       	subi	r19, 0x01	; 1
    3852:	fa cf       	rjmp	.-12     	; 0x3848 <dtoa_prf+0xc8>
    3854:	42 ff       	sbrs	r20, 2
    3856:	44 c0       	rjmp	.+136    	; 0x38e0 <dtoa_prf+0x160>
    3858:	91 11       	cpse	r25, r1
    385a:	02 c0       	rjmp	.+4      	; 0x3860 <dtoa_prf+0xe0>
    385c:	83 e0       	ldi	r24, 0x03	; 3
    385e:	01 c0       	rjmp	.+2      	; 0x3862 <dtoa_prf+0xe2>
    3860:	84 e0       	ldi	r24, 0x04	; 4
    3862:	81 17       	cp	r24, r17
    3864:	18 f4       	brcc	.+6      	; 0x386c <dtoa_prf+0xec>
    3866:	21 2f       	mov	r18, r17
    3868:	28 1b       	sub	r18, r24
    386a:	01 c0       	rjmp	.+2      	; 0x386e <dtoa_prf+0xee>
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	51 11       	cpse	r21, r1
    3870:	0b c0       	rjmp	.+22     	; 0x3888 <dtoa_prf+0x108>
    3872:	f6 01       	movw	r30, r12
    3874:	82 2f       	mov	r24, r18
    3876:	30 e2       	ldi	r19, 0x20	; 32
    3878:	88 23       	and	r24, r24
    387a:	19 f0       	breq	.+6      	; 0x3882 <dtoa_prf+0x102>
    387c:	31 93       	st	Z+, r19
    387e:	81 50       	subi	r24, 0x01	; 1
    3880:	fb cf       	rjmp	.-10     	; 0x3878 <dtoa_prf+0xf8>
    3882:	c2 0e       	add	r12, r18
    3884:	d1 1c       	adc	r13, r1
    3886:	20 e0       	ldi	r18, 0x00	; 0
    3888:	99 23       	and	r25, r25
    388a:	29 f0       	breq	.+10     	; 0x3896 <dtoa_prf+0x116>
    388c:	d6 01       	movw	r26, r12
    388e:	9c 93       	st	X, r25
    3890:	f6 01       	movw	r30, r12
    3892:	31 96       	adiw	r30, 0x01	; 1
    3894:	6f 01       	movw	r12, r30
    3896:	c6 01       	movw	r24, r12
    3898:	03 96       	adiw	r24, 0x03	; 3
    389a:	e2 fe       	sbrs	r14, 2
    389c:	0b c0       	rjmp	.+22     	; 0x38b4 <dtoa_prf+0x134>
    389e:	39 e4       	ldi	r19, 0x49	; 73
    38a0:	d6 01       	movw	r26, r12
    38a2:	3c 93       	st	X, r19
    38a4:	3e e4       	ldi	r19, 0x4E	; 78
    38a6:	11 96       	adiw	r26, 0x01	; 1
    38a8:	3c 93       	st	X, r19
    38aa:	11 97       	sbiw	r26, 0x01	; 1
    38ac:	36 e4       	ldi	r19, 0x46	; 70
    38ae:	12 96       	adiw	r26, 0x02	; 2
    38b0:	3c 93       	st	X, r19
    38b2:	07 c0       	rjmp	.+14     	; 0x38c2 <dtoa_prf+0x142>
    38b4:	39 e6       	ldi	r19, 0x69	; 105
    38b6:	f6 01       	movw	r30, r12
    38b8:	30 83       	st	Z, r19
    38ba:	3e e6       	ldi	r19, 0x6E	; 110
    38bc:	31 83       	std	Z+1, r19	; 0x01
    38be:	36 e6       	ldi	r19, 0x66	; 102
    38c0:	32 83       	std	Z+2, r19	; 0x02
    38c2:	fc 01       	movw	r30, r24
    38c4:	32 2f       	mov	r19, r18
    38c6:	40 e2       	ldi	r20, 0x20	; 32
    38c8:	33 23       	and	r19, r19
    38ca:	19 f0       	breq	.+6      	; 0x38d2 <dtoa_prf+0x152>
    38cc:	41 93       	st	Z+, r20
    38ce:	31 50       	subi	r19, 0x01	; 1
    38d0:	fb cf       	rjmp	.-10     	; 0x38c8 <dtoa_prf+0x148>
    38d2:	fc 01       	movw	r30, r24
    38d4:	e2 0f       	add	r30, r18
    38d6:	f1 1d       	adc	r31, r1
    38d8:	10 82       	st	Z, r1
    38da:	8e ef       	ldi	r24, 0xFE	; 254
    38dc:	9f ef       	ldi	r25, 0xFF	; 255
    38de:	a6 c0       	rjmp	.+332    	; 0x3a2c <dtoa_prf+0x2ac>
    38e0:	21 e0       	ldi	r18, 0x01	; 1
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	91 11       	cpse	r25, r1
    38e6:	02 c0       	rjmp	.+4      	; 0x38ec <dtoa_prf+0x16c>
    38e8:	20 e0       	ldi	r18, 0x00	; 0
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	16 16       	cp	r1, r22
    38ee:	17 06       	cpc	r1, r23
    38f0:	1c f4       	brge	.+6      	; 0x38f8 <dtoa_prf+0x178>
    38f2:	fb 01       	movw	r30, r22
    38f4:	31 96       	adiw	r30, 0x01	; 1
    38f6:	02 c0       	rjmp	.+4      	; 0x38fc <dtoa_prf+0x17c>
    38f8:	e1 e0       	ldi	r30, 0x01	; 1
    38fa:	f0 e0       	ldi	r31, 0x00	; 0
    38fc:	2e 0f       	add	r18, r30
    38fe:	3f 1f       	adc	r19, r31
    3900:	bb 20       	and	r11, r11
    3902:	21 f0       	breq	.+8      	; 0x390c <dtoa_prf+0x18c>
    3904:	eb 2d       	mov	r30, r11
    3906:	f0 e0       	ldi	r31, 0x00	; 0
    3908:	31 96       	adiw	r30, 0x01	; 1
    390a:	02 c0       	rjmp	.+4      	; 0x3910 <dtoa_prf+0x190>
    390c:	e0 e0       	ldi	r30, 0x00	; 0
    390e:	f0 e0       	ldi	r31, 0x00	; 0
    3910:	2e 0f       	add	r18, r30
    3912:	3f 1f       	adc	r19, r31
    3914:	e1 2f       	mov	r30, r17
    3916:	f0 e0       	ldi	r31, 0x00	; 0
    3918:	2e 17       	cp	r18, r30
    391a:	3f 07       	cpc	r19, r31
    391c:	1c f4       	brge	.+6      	; 0x3924 <dtoa_prf+0x1a4>
    391e:	12 1b       	sub	r17, r18
    3920:	21 2f       	mov	r18, r17
    3922:	01 c0       	rjmp	.+2      	; 0x3926 <dtoa_prf+0x1a6>
    3924:	20 e0       	ldi	r18, 0x00	; 0
    3926:	8e 2d       	mov	r24, r14
    3928:	88 71       	andi	r24, 0x18	; 24
    392a:	59 f4       	brne	.+22     	; 0x3942 <dtoa_prf+0x1c2>
    392c:	f6 01       	movw	r30, r12
    392e:	82 2f       	mov	r24, r18
    3930:	30 e2       	ldi	r19, 0x20	; 32
    3932:	88 23       	and	r24, r24
    3934:	19 f0       	breq	.+6      	; 0x393c <dtoa_prf+0x1bc>
    3936:	31 93       	st	Z+, r19
    3938:	81 50       	subi	r24, 0x01	; 1
    393a:	fb cf       	rjmp	.-10     	; 0x3932 <dtoa_prf+0x1b2>
    393c:	c2 0e       	add	r12, r18
    393e:	d1 1c       	adc	r13, r1
    3940:	20 e0       	ldi	r18, 0x00	; 0
    3942:	99 23       	and	r25, r25
    3944:	29 f0       	breq	.+10     	; 0x3950 <dtoa_prf+0x1d0>
    3946:	d6 01       	movw	r26, r12
    3948:	9c 93       	st	X, r25
    394a:	f6 01       	movw	r30, r12
    394c:	31 96       	adiw	r30, 0x01	; 1
    394e:	6f 01       	movw	r12, r30
    3950:	51 11       	cpse	r21, r1
    3952:	0b c0       	rjmp	.+22     	; 0x396a <dtoa_prf+0x1ea>
    3954:	f6 01       	movw	r30, r12
    3956:	82 2f       	mov	r24, r18
    3958:	90 e3       	ldi	r25, 0x30	; 48
    395a:	88 23       	and	r24, r24
    395c:	19 f0       	breq	.+6      	; 0x3964 <dtoa_prf+0x1e4>
    395e:	91 93       	st	Z+, r25
    3960:	81 50       	subi	r24, 0x01	; 1
    3962:	fb cf       	rjmp	.-10     	; 0x395a <dtoa_prf+0x1da>
    3964:	c2 0e       	add	r12, r18
    3966:	d1 1c       	adc	r13, r1
    3968:	20 e0       	ldi	r18, 0x00	; 0
    396a:	0f 2d       	mov	r16, r15
    396c:	06 0f       	add	r16, r22
    396e:	9a 81       	ldd	r25, Y+2	; 0x02
    3970:	34 2f       	mov	r19, r20
    3972:	30 71       	andi	r19, 0x10	; 16
    3974:	44 ff       	sbrs	r20, 4
    3976:	03 c0       	rjmp	.+6      	; 0x397e <dtoa_prf+0x1fe>
    3978:	91 33       	cpi	r25, 0x31	; 49
    397a:	09 f4       	brne	.+2      	; 0x397e <dtoa_prf+0x1fe>
    397c:	01 50       	subi	r16, 0x01	; 1
    397e:	10 16       	cp	r1, r16
    3980:	24 f4       	brge	.+8      	; 0x398a <dtoa_prf+0x20a>
    3982:	09 30       	cpi	r16, 0x09	; 9
    3984:	18 f0       	brcs	.+6      	; 0x398c <dtoa_prf+0x20c>
    3986:	08 e0       	ldi	r16, 0x08	; 8
    3988:	01 c0       	rjmp	.+2      	; 0x398c <dtoa_prf+0x20c>
    398a:	01 e0       	ldi	r16, 0x01	; 1
    398c:	ab 01       	movw	r20, r22
    398e:	77 ff       	sbrs	r23, 7
    3990:	02 c0       	rjmp	.+4      	; 0x3996 <dtoa_prf+0x216>
    3992:	40 e0       	ldi	r20, 0x00	; 0
    3994:	50 e0       	ldi	r21, 0x00	; 0
    3996:	fb 01       	movw	r30, r22
    3998:	e4 1b       	sub	r30, r20
    399a:	f5 0b       	sbc	r31, r21
    399c:	a1 e0       	ldi	r26, 0x01	; 1
    399e:	b0 e0       	ldi	r27, 0x00	; 0
    39a0:	ac 0f       	add	r26, r28
    39a2:	bd 1f       	adc	r27, r29
    39a4:	ea 0f       	add	r30, r26
    39a6:	fb 1f       	adc	r31, r27
    39a8:	8e e2       	ldi	r24, 0x2E	; 46
    39aa:	a8 2e       	mov	r10, r24
    39ac:	4b 01       	movw	r8, r22
    39ae:	80 1a       	sub	r8, r16
    39b0:	91 08       	sbc	r9, r1
    39b2:	0b 2d       	mov	r16, r11
    39b4:	10 e0       	ldi	r17, 0x00	; 0
    39b6:	11 95       	neg	r17
    39b8:	01 95       	neg	r16
    39ba:	11 09       	sbc	r17, r1
    39bc:	4f 3f       	cpi	r20, 0xFF	; 255
    39be:	bf ef       	ldi	r27, 0xFF	; 255
    39c0:	5b 07       	cpc	r21, r27
    39c2:	21 f4       	brne	.+8      	; 0x39cc <dtoa_prf+0x24c>
    39c4:	d6 01       	movw	r26, r12
    39c6:	ac 92       	st	X, r10
    39c8:	11 96       	adiw	r26, 0x01	; 1
    39ca:	6d 01       	movw	r12, r26
    39cc:	64 17       	cp	r22, r20
    39ce:	75 07       	cpc	r23, r21
    39d0:	2c f0       	brlt	.+10     	; 0x39dc <dtoa_prf+0x25c>
    39d2:	84 16       	cp	r8, r20
    39d4:	95 06       	cpc	r9, r21
    39d6:	14 f4       	brge	.+4      	; 0x39dc <dtoa_prf+0x25c>
    39d8:	81 81       	ldd	r24, Z+1	; 0x01
    39da:	01 c0       	rjmp	.+2      	; 0x39de <dtoa_prf+0x25e>
    39dc:	80 e3       	ldi	r24, 0x30	; 48
    39de:	41 50       	subi	r20, 0x01	; 1
    39e0:	51 09       	sbc	r21, r1
    39e2:	31 96       	adiw	r30, 0x01	; 1
    39e4:	d6 01       	movw	r26, r12
    39e6:	11 96       	adiw	r26, 0x01	; 1
    39e8:	7d 01       	movw	r14, r26
    39ea:	40 17       	cp	r20, r16
    39ec:	51 07       	cpc	r21, r17
    39ee:	24 f0       	brlt	.+8      	; 0x39f8 <dtoa_prf+0x278>
    39f0:	d6 01       	movw	r26, r12
    39f2:	8c 93       	st	X, r24
    39f4:	67 01       	movw	r12, r14
    39f6:	e2 cf       	rjmp	.-60     	; 0x39bc <dtoa_prf+0x23c>
    39f8:	64 17       	cp	r22, r20
    39fa:	75 07       	cpc	r23, r21
    39fc:	39 f4       	brne	.+14     	; 0x3a0c <dtoa_prf+0x28c>
    39fe:	96 33       	cpi	r25, 0x36	; 54
    3a00:	20 f4       	brcc	.+8      	; 0x3a0a <dtoa_prf+0x28a>
    3a02:	95 33       	cpi	r25, 0x35	; 53
    3a04:	19 f4       	brne	.+6      	; 0x3a0c <dtoa_prf+0x28c>
    3a06:	31 11       	cpse	r19, r1
    3a08:	01 c0       	rjmp	.+2      	; 0x3a0c <dtoa_prf+0x28c>
    3a0a:	81 e3       	ldi	r24, 0x31	; 49
    3a0c:	f6 01       	movw	r30, r12
    3a0e:	80 83       	st	Z, r24
    3a10:	f7 01       	movw	r30, r14
    3a12:	82 2f       	mov	r24, r18
    3a14:	90 e2       	ldi	r25, 0x20	; 32
    3a16:	88 23       	and	r24, r24
    3a18:	19 f0       	breq	.+6      	; 0x3a20 <dtoa_prf+0x2a0>
    3a1a:	91 93       	st	Z+, r25
    3a1c:	81 50       	subi	r24, 0x01	; 1
    3a1e:	fb cf       	rjmp	.-10     	; 0x3a16 <dtoa_prf+0x296>
    3a20:	f7 01       	movw	r30, r14
    3a22:	e2 0f       	add	r30, r18
    3a24:	f1 1d       	adc	r31, r1
    3a26:	10 82       	st	Z, r1
    3a28:	80 e0       	ldi	r24, 0x00	; 0
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	29 96       	adiw	r28, 0x09	; 9
    3a2e:	ec e0       	ldi	r30, 0x0C	; 12
    3a30:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <__epilogue_restores__+0xc>

00003a34 <__ftoa_engine>:
    3a34:	28 30       	cpi	r18, 0x08	; 8
    3a36:	08 f0       	brcs	.+2      	; 0x3a3a <__ftoa_engine+0x6>
    3a38:	27 e0       	ldi	r18, 0x07	; 7
    3a3a:	33 27       	eor	r19, r19
    3a3c:	da 01       	movw	r26, r20
    3a3e:	99 0f       	add	r25, r25
    3a40:	31 1d       	adc	r19, r1
    3a42:	87 fd       	sbrc	r24, 7
    3a44:	91 60       	ori	r25, 0x01	; 1
    3a46:	00 96       	adiw	r24, 0x00	; 0
    3a48:	61 05       	cpc	r22, r1
    3a4a:	71 05       	cpc	r23, r1
    3a4c:	39 f4       	brne	.+14     	; 0x3a5c <__ftoa_engine+0x28>
    3a4e:	32 60       	ori	r19, 0x02	; 2
    3a50:	2e 5f       	subi	r18, 0xFE	; 254
    3a52:	3d 93       	st	X+, r19
    3a54:	30 e3       	ldi	r19, 0x30	; 48
    3a56:	2a 95       	dec	r18
    3a58:	e1 f7       	brne	.-8      	; 0x3a52 <__ftoa_engine+0x1e>
    3a5a:	08 95       	ret
    3a5c:	9f 3f       	cpi	r25, 0xFF	; 255
    3a5e:	30 f0       	brcs	.+12     	; 0x3a6c <__ftoa_engine+0x38>
    3a60:	80 38       	cpi	r24, 0x80	; 128
    3a62:	71 05       	cpc	r23, r1
    3a64:	61 05       	cpc	r22, r1
    3a66:	09 f0       	breq	.+2      	; 0x3a6a <__ftoa_engine+0x36>
    3a68:	3c 5f       	subi	r19, 0xFC	; 252
    3a6a:	3c 5f       	subi	r19, 0xFC	; 252
    3a6c:	3d 93       	st	X+, r19
    3a6e:	91 30       	cpi	r25, 0x01	; 1
    3a70:	08 f0       	brcs	.+2      	; 0x3a74 <__ftoa_engine+0x40>
    3a72:	80 68       	ori	r24, 0x80	; 128
    3a74:	91 1d       	adc	r25, r1
    3a76:	df 93       	push	r29
    3a78:	cf 93       	push	r28
    3a7a:	1f 93       	push	r17
    3a7c:	0f 93       	push	r16
    3a7e:	ff 92       	push	r15
    3a80:	ef 92       	push	r14
    3a82:	19 2f       	mov	r17, r25
    3a84:	98 7f       	andi	r25, 0xF8	; 248
    3a86:	96 95       	lsr	r25
    3a88:	e9 2f       	mov	r30, r25
    3a8a:	96 95       	lsr	r25
    3a8c:	96 95       	lsr	r25
    3a8e:	e9 0f       	add	r30, r25
    3a90:	ff 27       	eor	r31, r31
    3a92:	e0 53       	subi	r30, 0x30	; 48
    3a94:	ff 4f       	sbci	r31, 0xFF	; 255
    3a96:	99 27       	eor	r25, r25
    3a98:	33 27       	eor	r19, r19
    3a9a:	ee 24       	eor	r14, r14
    3a9c:	ff 24       	eor	r15, r15
    3a9e:	a7 01       	movw	r20, r14
    3aa0:	e7 01       	movw	r28, r14
    3aa2:	05 90       	lpm	r0, Z+
    3aa4:	08 94       	sec
    3aa6:	07 94       	ror	r0
    3aa8:	28 f4       	brcc	.+10     	; 0x3ab4 <__ftoa_engine+0x80>
    3aaa:	36 0f       	add	r19, r22
    3aac:	e7 1e       	adc	r14, r23
    3aae:	f8 1e       	adc	r15, r24
    3ab0:	49 1f       	adc	r20, r25
    3ab2:	51 1d       	adc	r21, r1
    3ab4:	66 0f       	add	r22, r22
    3ab6:	77 1f       	adc	r23, r23
    3ab8:	88 1f       	adc	r24, r24
    3aba:	99 1f       	adc	r25, r25
    3abc:	06 94       	lsr	r0
    3abe:	a1 f7       	brne	.-24     	; 0x3aa8 <__ftoa_engine+0x74>
    3ac0:	05 90       	lpm	r0, Z+
    3ac2:	07 94       	ror	r0
    3ac4:	28 f4       	brcc	.+10     	; 0x3ad0 <__ftoa_engine+0x9c>
    3ac6:	e7 0e       	add	r14, r23
    3ac8:	f8 1e       	adc	r15, r24
    3aca:	49 1f       	adc	r20, r25
    3acc:	56 1f       	adc	r21, r22
    3ace:	c1 1d       	adc	r28, r1
    3ad0:	77 0f       	add	r23, r23
    3ad2:	88 1f       	adc	r24, r24
    3ad4:	99 1f       	adc	r25, r25
    3ad6:	66 1f       	adc	r22, r22
    3ad8:	06 94       	lsr	r0
    3ada:	a1 f7       	brne	.-24     	; 0x3ac4 <__ftoa_engine+0x90>
    3adc:	05 90       	lpm	r0, Z+
    3ade:	07 94       	ror	r0
    3ae0:	28 f4       	brcc	.+10     	; 0x3aec <__ftoa_engine+0xb8>
    3ae2:	f8 0e       	add	r15, r24
    3ae4:	49 1f       	adc	r20, r25
    3ae6:	56 1f       	adc	r21, r22
    3ae8:	c7 1f       	adc	r28, r23
    3aea:	d1 1d       	adc	r29, r1
    3aec:	88 0f       	add	r24, r24
    3aee:	99 1f       	adc	r25, r25
    3af0:	66 1f       	adc	r22, r22
    3af2:	77 1f       	adc	r23, r23
    3af4:	06 94       	lsr	r0
    3af6:	a1 f7       	brne	.-24     	; 0x3ae0 <__ftoa_engine+0xac>
    3af8:	05 90       	lpm	r0, Z+
    3afa:	07 94       	ror	r0
    3afc:	20 f4       	brcc	.+8      	; 0x3b06 <__ftoa_engine+0xd2>
    3afe:	49 0f       	add	r20, r25
    3b00:	56 1f       	adc	r21, r22
    3b02:	c7 1f       	adc	r28, r23
    3b04:	d8 1f       	adc	r29, r24
    3b06:	99 0f       	add	r25, r25
    3b08:	66 1f       	adc	r22, r22
    3b0a:	77 1f       	adc	r23, r23
    3b0c:	88 1f       	adc	r24, r24
    3b0e:	06 94       	lsr	r0
    3b10:	a9 f7       	brne	.-22     	; 0x3afc <__ftoa_engine+0xc8>
    3b12:	84 91       	lpm	r24, Z
    3b14:	10 95       	com	r17
    3b16:	17 70       	andi	r17, 0x07	; 7
    3b18:	41 f0       	breq	.+16     	; 0x3b2a <__ftoa_engine+0xf6>
    3b1a:	d6 95       	lsr	r29
    3b1c:	c7 95       	ror	r28
    3b1e:	57 95       	ror	r21
    3b20:	47 95       	ror	r20
    3b22:	f7 94       	ror	r15
    3b24:	e7 94       	ror	r14
    3b26:	1a 95       	dec	r17
    3b28:	c1 f7       	brne	.-16     	; 0x3b1a <__ftoa_engine+0xe6>
    3b2a:	e6 e7       	ldi	r30, 0x76	; 118
    3b2c:	f0 e0       	ldi	r31, 0x00	; 0
    3b2e:	68 94       	set
    3b30:	15 90       	lpm	r1, Z+
    3b32:	15 91       	lpm	r17, Z+
    3b34:	35 91       	lpm	r19, Z+
    3b36:	65 91       	lpm	r22, Z+
    3b38:	95 91       	lpm	r25, Z+
    3b3a:	05 90       	lpm	r0, Z+
    3b3c:	7f e2       	ldi	r23, 0x2F	; 47
    3b3e:	73 95       	inc	r23
    3b40:	e1 18       	sub	r14, r1
    3b42:	f1 0a       	sbc	r15, r17
    3b44:	43 0b       	sbc	r20, r19
    3b46:	56 0b       	sbc	r21, r22
    3b48:	c9 0b       	sbc	r28, r25
    3b4a:	d0 09       	sbc	r29, r0
    3b4c:	c0 f7       	brcc	.-16     	; 0x3b3e <__ftoa_engine+0x10a>
    3b4e:	e1 0c       	add	r14, r1
    3b50:	f1 1e       	adc	r15, r17
    3b52:	43 1f       	adc	r20, r19
    3b54:	56 1f       	adc	r21, r22
    3b56:	c9 1f       	adc	r28, r25
    3b58:	d0 1d       	adc	r29, r0
    3b5a:	7e f4       	brtc	.+30     	; 0x3b7a <__ftoa_engine+0x146>
    3b5c:	70 33       	cpi	r23, 0x30	; 48
    3b5e:	11 f4       	brne	.+4      	; 0x3b64 <__ftoa_engine+0x130>
    3b60:	8a 95       	dec	r24
    3b62:	e6 cf       	rjmp	.-52     	; 0x3b30 <__ftoa_engine+0xfc>
    3b64:	e8 94       	clt
    3b66:	01 50       	subi	r16, 0x01	; 1
    3b68:	30 f0       	brcs	.+12     	; 0x3b76 <__ftoa_engine+0x142>
    3b6a:	08 0f       	add	r16, r24
    3b6c:	0a f4       	brpl	.+2      	; 0x3b70 <__ftoa_engine+0x13c>
    3b6e:	00 27       	eor	r16, r16
    3b70:	02 17       	cp	r16, r18
    3b72:	08 f4       	brcc	.+2      	; 0x3b76 <__ftoa_engine+0x142>
    3b74:	20 2f       	mov	r18, r16
    3b76:	23 95       	inc	r18
    3b78:	02 2f       	mov	r16, r18
    3b7a:	7a 33       	cpi	r23, 0x3A	; 58
    3b7c:	28 f0       	brcs	.+10     	; 0x3b88 <__ftoa_engine+0x154>
    3b7e:	79 e3       	ldi	r23, 0x39	; 57
    3b80:	7d 93       	st	X+, r23
    3b82:	2a 95       	dec	r18
    3b84:	e9 f7       	brne	.-6      	; 0x3b80 <__ftoa_engine+0x14c>
    3b86:	10 c0       	rjmp	.+32     	; 0x3ba8 <__ftoa_engine+0x174>
    3b88:	7d 93       	st	X+, r23
    3b8a:	2a 95       	dec	r18
    3b8c:	89 f6       	brne	.-94     	; 0x3b30 <__ftoa_engine+0xfc>
    3b8e:	06 94       	lsr	r0
    3b90:	97 95       	ror	r25
    3b92:	67 95       	ror	r22
    3b94:	37 95       	ror	r19
    3b96:	17 95       	ror	r17
    3b98:	17 94       	ror	r1
    3b9a:	e1 18       	sub	r14, r1
    3b9c:	f1 0a       	sbc	r15, r17
    3b9e:	43 0b       	sbc	r20, r19
    3ba0:	56 0b       	sbc	r21, r22
    3ba2:	c9 0b       	sbc	r28, r25
    3ba4:	d0 09       	sbc	r29, r0
    3ba6:	98 f0       	brcs	.+38     	; 0x3bce <__ftoa_engine+0x19a>
    3ba8:	23 95       	inc	r18
    3baa:	7e 91       	ld	r23, -X
    3bac:	73 95       	inc	r23
    3bae:	7a 33       	cpi	r23, 0x3A	; 58
    3bb0:	08 f0       	brcs	.+2      	; 0x3bb4 <__ftoa_engine+0x180>
    3bb2:	70 e3       	ldi	r23, 0x30	; 48
    3bb4:	7c 93       	st	X, r23
    3bb6:	20 13       	cpse	r18, r16
    3bb8:	b8 f7       	brcc	.-18     	; 0x3ba8 <__ftoa_engine+0x174>
    3bba:	7e 91       	ld	r23, -X
    3bbc:	70 61       	ori	r23, 0x10	; 16
    3bbe:	7d 93       	st	X+, r23
    3bc0:	30 f0       	brcs	.+12     	; 0x3bce <__ftoa_engine+0x19a>
    3bc2:	83 95       	inc	r24
    3bc4:	71 e3       	ldi	r23, 0x31	; 49
    3bc6:	7d 93       	st	X+, r23
    3bc8:	70 e3       	ldi	r23, 0x30	; 48
    3bca:	2a 95       	dec	r18
    3bcc:	e1 f7       	brne	.-8      	; 0x3bc6 <__ftoa_engine+0x192>
    3bce:	11 24       	eor	r1, r1
    3bd0:	ef 90       	pop	r14
    3bd2:	ff 90       	pop	r15
    3bd4:	0f 91       	pop	r16
    3bd6:	1f 91       	pop	r17
    3bd8:	cf 91       	pop	r28
    3bda:	df 91       	pop	r29
    3bdc:	99 27       	eor	r25, r25
    3bde:	87 fd       	sbrc	r24, 7
    3be0:	90 95       	com	r25
    3be2:	08 95       	ret

00003be4 <strrev>:
    3be4:	dc 01       	movw	r26, r24
    3be6:	fc 01       	movw	r30, r24
    3be8:	67 2f       	mov	r22, r23
    3bea:	71 91       	ld	r23, Z+
    3bec:	77 23       	and	r23, r23
    3bee:	e1 f7       	brne	.-8      	; 0x3be8 <strrev+0x4>
    3bf0:	32 97       	sbiw	r30, 0x02	; 2
    3bf2:	04 c0       	rjmp	.+8      	; 0x3bfc <strrev+0x18>
    3bf4:	7c 91       	ld	r23, X
    3bf6:	6d 93       	st	X+, r22
    3bf8:	70 83       	st	Z, r23
    3bfa:	62 91       	ld	r22, -Z
    3bfc:	ae 17       	cp	r26, r30
    3bfe:	bf 07       	cpc	r27, r31
    3c00:	c8 f3       	brcs	.-14     	; 0x3bf4 <strrev+0x10>
    3c02:	08 95       	ret

00003c04 <__prologue_saves__>:
    3c04:	2f 92       	push	r2
    3c06:	3f 92       	push	r3
    3c08:	4f 92       	push	r4
    3c0a:	5f 92       	push	r5
    3c0c:	6f 92       	push	r6
    3c0e:	7f 92       	push	r7
    3c10:	8f 92       	push	r8
    3c12:	9f 92       	push	r9
    3c14:	af 92       	push	r10
    3c16:	bf 92       	push	r11
    3c18:	cf 92       	push	r12
    3c1a:	df 92       	push	r13
    3c1c:	ef 92       	push	r14
    3c1e:	ff 92       	push	r15
    3c20:	0f 93       	push	r16
    3c22:	1f 93       	push	r17
    3c24:	cf 93       	push	r28
    3c26:	df 93       	push	r29
    3c28:	cd b7       	in	r28, 0x3d	; 61
    3c2a:	de b7       	in	r29, 0x3e	; 62
    3c2c:	ca 1b       	sub	r28, r26
    3c2e:	db 0b       	sbc	r29, r27
    3c30:	0f b6       	in	r0, 0x3f	; 63
    3c32:	f8 94       	cli
    3c34:	de bf       	out	0x3e, r29	; 62
    3c36:	0f be       	out	0x3f, r0	; 63
    3c38:	cd bf       	out	0x3d, r28	; 61
    3c3a:	09 94       	ijmp

00003c3c <__epilogue_restores__>:
    3c3c:	2a 88       	ldd	r2, Y+18	; 0x12
    3c3e:	39 88       	ldd	r3, Y+17	; 0x11
    3c40:	48 88       	ldd	r4, Y+16	; 0x10
    3c42:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c44:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c46:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c48:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c4a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c4c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c4e:	b9 84       	ldd	r11, Y+9	; 0x09
    3c50:	c8 84       	ldd	r12, Y+8	; 0x08
    3c52:	df 80       	ldd	r13, Y+7	; 0x07
    3c54:	ee 80       	ldd	r14, Y+6	; 0x06
    3c56:	fd 80       	ldd	r15, Y+5	; 0x05
    3c58:	0c 81       	ldd	r16, Y+4	; 0x04
    3c5a:	1b 81       	ldd	r17, Y+3	; 0x03
    3c5c:	aa 81       	ldd	r26, Y+2	; 0x02
    3c5e:	b9 81       	ldd	r27, Y+1	; 0x01
    3c60:	ce 0f       	add	r28, r30
    3c62:	d1 1d       	adc	r29, r1
    3c64:	0f b6       	in	r0, 0x3f	; 63
    3c66:	f8 94       	cli
    3c68:	de bf       	out	0x3e, r29	; 62
    3c6a:	0f be       	out	0x3f, r0	; 63
    3c6c:	cd bf       	out	0x3d, r28	; 61
    3c6e:	ed 01       	movw	r28, r26
    3c70:	08 95       	ret

00003c72 <__do_global_dtors>:
    3c72:	13 e0       	ldi	r17, 0x03	; 3
    3c74:	c0 e1       	ldi	r28, 0x10	; 16
    3c76:	d3 e0       	ldi	r29, 0x03	; 3
    3c78:	04 c0       	rjmp	.+8      	; 0x3c82 <__do_global_dtors+0x10>
    3c7a:	fe 01       	movw	r30, r28
    3c7c:	0e 94 81 19 	call	0x3302	; 0x3302 <__tablejump2__>
    3c80:	21 96       	adiw	r28, 0x01	; 1
    3c82:	c1 31       	cpi	r28, 0x11	; 17
    3c84:	d1 07       	cpc	r29, r17
    3c86:	c9 f7       	brne	.-14     	; 0x3c7a <__do_global_dtors+0x8>
    3c88:	f8 94       	cli

00003c8a <__stop_program>:
    3c8a:	ff cf       	rjmp	.-2      	; 0x3c8a <__stop_program>
