
heater_controller_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  0000397a  00003a0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000397a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002a5  00800192  00800192  00003aa0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003aa0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003ad0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000d60  00000000  00000000  00003b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00021aa0  00000000  00000000  00004870  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000042f2  00000000  00000000  00026310  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006cdf  00000000  00000000  0002a602  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002d28  00000000  00000000  000312e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000089ae  00000000  00000000  0003400c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000125bd  00000000  00000000  0003c9ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e00  00000000  00000000  0004ef77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0a 03 	jmp	0x614	; 0x614 <__dtors_end>
       4:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__vector_1>
       8:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__vector_2>
       c:	0c 94 32 03 	jmp	0x664	; 0x664 <__bad_interrupt>
      10:	0c 94 32 03 	jmp	0x664	; 0x664 <__bad_interrupt>
      14:	0c 94 32 03 	jmp	0x664	; 0x664 <__bad_interrupt>
      18:	0c 94 32 03 	jmp	0x664	; 0x664 <__bad_interrupt>
      1c:	0c 94 32 03 	jmp	0x664	; 0x664 <__bad_interrupt>
      20:	0c 94 32 03 	jmp	0x664	; 0x664 <__bad_interrupt>
      24:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__vector_9>
      28:	0c 94 32 03 	jmp	0x664	; 0x664 <__bad_interrupt>
      2c:	0c 94 32 03 	jmp	0x664	; 0x664 <__bad_interrupt>
      30:	0c 94 32 03 	jmp	0x664	; 0x664 <__bad_interrupt>
      34:	0c 94 32 03 	jmp	0x664	; 0x664 <__bad_interrupt>
      38:	0c 94 32 03 	jmp	0x664	; 0x664 <__bad_interrupt>
      3c:	0c 94 32 03 	jmp	0x664	; 0x664 <__bad_interrupt>
      40:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__vector_16>
      44:	0c 94 32 03 	jmp	0x664	; 0x664 <__bad_interrupt>
      48:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__vector_18>
      4c:	0c 94 5e 0c 	jmp	0x18bc	; 0x18bc <__vector_19>
      50:	0c 94 32 03 	jmp	0x664	; 0x664 <__bad_interrupt>
      54:	0c 94 32 03 	jmp	0x664	; 0x664 <__bad_interrupt>
      58:	0c 94 32 03 	jmp	0x664	; 0x664 <__bad_interrupt>
      5c:	0c 94 32 03 	jmp	0x664	; 0x664 <__bad_interrupt>
      60:	0c 94 32 03 	jmp	0x664	; 0x664 <__bad_interrupt>
      64:	0c 94 32 03 	jmp	0x664	; 0x664 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	ldd	r0, Z+32	; 0x20
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <_Z16throttleToStringf+0x62>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <_Z13fireAnImpulseff+0x1c>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
      f4:	ba a5       	ldd	r27, Y+42	; 0x2a
      f6:	6f a5       	ldd	r22, Y+47	; 0x2f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <u8g_font_babyr+0x1e2>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <digital_pin_to_port_PGM+0x2>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <u8g_dev_ssd13xx_sleep_on+0x7>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <digital_pin_to_timer_PGM>:
     162:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     172:	00 00 00 00                                         ....

00000176 <digital_pin_to_bit_mask_PGM>:
     176:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     186:	04 08 10 20                                         ... 

0000018a <digital_pin_to_port_PGM>:
     18a:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     19a:	03 03 03 03                                         ....

0000019e <port_to_input_PGM>:
     19e:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000001a8 <port_to_output_PGM>:
     1a8:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000001b2 <port_to_mode_PGM>:
     1b2:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000001bc <u8g_dev_ssd13xx_sleep_off>:
     1bc:	ff e0 ff d1 af ff 32 ff d0 ff fe                    ......2....

000001c7 <u8g_dev_ssd13xx_sleep_on>:
     1c7:	ff e0 ff d1 ae ff d0 ff fe                          .........

000001d0 <u8g_dev_ssd1306_128x64_data_start>:
     1d0:	ff e0 ff d1 10 00 ff fe                             ........

000001d8 <u8g_dev_ssd1306_128x64_adafruit2_init_seq>:
     1d8:	ff d0 ff e0 ff c1 ff d1 ae d5 80 a8 3f d3 00 40     ............?..@
     1e8:	8d 14 20 00 a1 c8 da 12 81 cf d9 f1 db 40 2e a4     .. ..........@..
     1f8:	a6 af ff d0 ff fe                                   ......

000001fe <u8g_font_babyr>:
     1fe:	00 0a 0a ff fe 05 01 6c 02 c8 20 7f fe 07 fe 06     .......l.. .....
     20e:	fe 00 00 00 02 00 00 01 06 06 03 01 00 80 80 80     ................
     21e:	80 00 80 03 03 03 04 00 04 a0 a0 a0 05 05 05 06     ................
     22e:	00 00 50 f8 50 f8 50 03 07 07 04 00 ff 40 60 80     ..P.P.P......@`.
     23e:	40 20 c0 40 05 05 05 06 00 00 c8 d0 20 58 98 05     @ .@........ X..
     24e:	06 06 06 00 00 40 a0 40 a0 90 68 01 03 03 02 00     .....@.@..h.....
     25e:	04 80 80 80 02 07 07 03 00 ff 40 80 80 80 80 80     ..........@.....
     26e:	40 02 07 07 03 00 ff 80 40 40 40 40 40 80 03 03     @.......@@@@@...
     27e:	03 04 00 03 a0 40 a0 03 03 03 05 01 01 40 e0 40     .....@.......@.@
     28e:	02 03 03 03 00 fe c0 40 80 03 01 01 04 00 02 e0     .......@........
     29e:	01 01 01 02 00 00 80 03 06 06 04 00 ff 20 20 40     .............  @
     2ae:	40 80 80 03 05 05 04 00 00 40 a0 a0 a0 40 02 05     @........@...@..
     2be:	05 03 00 00 40 c0 40 40 40 04 05 05 05 00 00 60     ....@.@@@......`
     2ce:	90 20 40 f0 04 05 05 05 00 00 e0 10 60 10 e0 04     . @.........`...
     2de:	05 05 05 00 00 90 90 90 70 10 04 05 05 05 00 00     ........p.......
     2ee:	f0 80 e0 10 e0 04 05 05 05 00 00 60 80 e0 90 60     ...........`...`
     2fe:	04 05 05 05 00 00 f0 10 20 40 80 04 05 05 05 00     ........ @......
     30e:	00 60 90 60 90 60 04 05 05 05 00 00 60 90 70 10     .`.`.`......`.p.
     31e:	60 01 03 03 03 01 00 80 00 80 02 05 05 03 00 fe     `...............
     32e:	40 00 40 40 80 04 05 05 05 00 00 10 60 80 60 10     @.@@........`.`.
     33e:	03 03 03 04 00 01 e0 00 e0 04 05 05 05 00 00 80     ................
     34e:	60 10 60 80 04 06 06 05 00 00 60 90 20 40 00 40     `.`.......`. @.@
     35e:	05 06 06 06 00 00 70 88 a8 b0 80 70 04 05 05 05     ......p....p....
     36e:	00 00 60 90 90 f0 90 04 05 05 05 00 00 e0 90 e0     ..`.............
     37e:	90 e0 04 05 05 05 00 00 60 90 80 90 60 04 05 05     ........`...`...
     38e:	05 00 00 e0 90 90 90 e0 04 05 05 05 00 00 f0 80     ................
     39e:	e0 80 f0 04 05 05 05 00 00 f0 80 e0 80 80 04 05     ................
     3ae:	05 05 00 00 60 80 b0 90 60 04 05 05 05 00 00 90     ....`...`.......
     3be:	90 f0 90 90 03 05 05 04 00 00 e0 40 40 40 e0 04     ...........@@@..
     3ce:	05 05 05 00 00 70 10 10 90 60 04 05 05 05 00 00     .....p...`......
     3de:	90 90 90 e0 90 03 05 05 04 00 00 80 80 80 80 e0     ................
     3ee:	05 05 05 06 00 00 d8 a8 a8 a8 88 04 05 05 05 00     ................
     3fe:	00 90 90 d0 b0 90 04 05 05 05 00 00 60 90 90 90     ............`...
     40e:	60 04 05 05 05 00 00 e0 90 90 e0 80 04 05 05 05     `...............
     41e:	00 00 60 90 90 50 e0 04 05 05 05 00 00 e0 90 90     ..`..P..........
     42e:	e0 90 03 05 05 04 00 00 60 80 40 20 c0 03 05 05     ........`.@ ....
     43e:	04 00 00 e0 40 40 40 40 04 05 05 05 00 00 90 90     ....@@@@........
     44e:	90 90 60 05 05 05 06 00 00 88 50 50 50 20 05 05     ..`.......PPP ..
     45e:	05 06 00 00 88 88 88 a8 50 04 05 05 05 00 00 90     ........P.......
     46e:	90 90 60 90 04 06 06 05 00 ff 90 90 90 70 10 60     ..`..........p.`
     47e:	04 05 05 05 00 00 f0 20 40 80 f0 02 07 07 03 00     ....... @.......
     48e:	ff c0 80 80 80 80 80 c0 03 06 06 04 00 ff 80 80     ................
     49e:	40 40 20 20 02 07 07 03 00 ff c0 40 40 40 40 40     @@  .......@@@@@
     4ae:	c0 03 02 02 04 00 04 40 a0 04 01 01 05 00 ff f0     .......@........
     4be:	02 02 02 03 00 05 80 40 04 04 04 05 00 00 60 90     .......@......`.
     4ce:	90 70 04 05 05 05 00 00 80 e0 90 90 60 03 04 04     .p..........`...
     4de:	04 00 00 60 80 80 60 04 05 05 05 00 00 10 70 90     ...`..`.......p.
     4ee:	90 60 04 04 04 05 00 00 60 90 a0 70 04 05 05 05     .`......`..p....
     4fe:	00 00 60 90 80 c0 80 04 06 06 05 00 fe 60 90 90     ..`..........`..
     50e:	70 10 60 04 05 05 05 00 00 80 e0 90 90 90 01 05     p.`.............
     51e:	05 02 00 00 80 00 80 80 80 03 07 07 03 ff fe 20     ............... 
     52e:	00 20 20 20 20 c0 03 05 05 04 00 00 80 a0 c0 a0     .    ...........
     53e:	a0 01 05 05 02 00 00 80 80 80 80 80 05 04 04 06     ................
     54e:	00 00 d0 a8 a8 88 04 04 04 05 00 00 e0 90 90 90     ................
     55e:	04 04 04 05 00 00 60 90 90 60 04 06 06 05 00 fe     ......`..`......
     56e:	60 90 90 e0 80 80 04 06 06 05 00 fe 60 90 90 70     `...........`..p
     57e:	10 10 04 04 04 05 00 00 e0 90 80 80 04 04 04 05     ................
     58e:	00 00 70 40 20 e0 03 05 05 04 00 00 40 e0 40 40     ..p@ .......@.@@
     59e:	40 04 04 04 05 00 00 90 90 90 70 04 04 04 05 00     @.........p.....
     5ae:	00 90 90 90 60 05 04 04 06 00 00 88 a8 a8 50 04     ....`.........P.
     5be:	04 04 05 00 00 90 90 60 90 04 06 06 05 00 fe 90     .......`........
     5ce:	90 90 70 10 60 04 04 04 05 00 00 f0 20 40 f0 03     ..p.`....... @..
     5de:	07 07 04 00 ff 20 40 40 80 40 40 20 01 07 07 02     ..... @@.@@ ....
     5ee:	00 ff 80 80 80 80 80 80 80 03 07 07 04 00 ff 80     ................
     5fe:	40 40 20 40 40 80 05 03 03 06 00 01 40 a8 10 ff     @@ @@.......@...

0000060e <__ctors_start>:
     60e:	ea 06       	cpc	r14, r26
     610:	8e 0c       	add	r8, r14

00000612 <__ctors_end>:
     612:	61 07       	cpc	r22, r17

00000614 <__dtors_end>:
     614:	11 24       	eor	r1, r1
     616:	1f be       	out	0x3f, r1	; 63
     618:	cf ef       	ldi	r28, 0xFF	; 255
     61a:	d8 e0       	ldi	r29, 0x08	; 8
     61c:	de bf       	out	0x3e, r29	; 62
     61e:	cd bf       	out	0x3d, r28	; 61

00000620 <__do_copy_data>:
     620:	11 e0       	ldi	r17, 0x01	; 1
     622:	a0 e0       	ldi	r26, 0x00	; 0
     624:	b1 e0       	ldi	r27, 0x01	; 1
     626:	ea e7       	ldi	r30, 0x7A	; 122
     628:	f9 e3       	ldi	r31, 0x39	; 57
     62a:	02 c0       	rjmp	.+4      	; 0x630 <__do_copy_data+0x10>
     62c:	05 90       	lpm	r0, Z+
     62e:	0d 92       	st	X+, r0
     630:	a2 39       	cpi	r26, 0x92	; 146
     632:	b1 07       	cpc	r27, r17
     634:	d9 f7       	brne	.-10     	; 0x62c <__do_copy_data+0xc>

00000636 <__do_clear_bss>:
     636:	24 e0       	ldi	r18, 0x04	; 4
     638:	a2 e9       	ldi	r26, 0x92	; 146
     63a:	b1 e0       	ldi	r27, 0x01	; 1
     63c:	01 c0       	rjmp	.+2      	; 0x640 <.do_clear_bss_start>

0000063e <.do_clear_bss_loop>:
     63e:	1d 92       	st	X+, r1

00000640 <.do_clear_bss_start>:
     640:	a7 33       	cpi	r26, 0x37	; 55
     642:	b2 07       	cpc	r27, r18
     644:	e1 f7       	brne	.-8      	; 0x63e <.do_clear_bss_loop>

00000646 <__do_global_ctors>:
     646:	13 e0       	ldi	r17, 0x03	; 3
     648:	c9 e0       	ldi	r28, 0x09	; 9
     64a:	d3 e0       	ldi	r29, 0x03	; 3
     64c:	04 c0       	rjmp	.+8      	; 0x656 <__do_global_ctors+0x10>
     64e:	21 97       	sbiw	r28, 0x01	; 1
     650:	fe 01       	movw	r30, r28
     652:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__tablejump2__>
     656:	c7 30       	cpi	r28, 0x07	; 7
     658:	d1 07       	cpc	r29, r17
     65a:	c9 f7       	brne	.-14     	; 0x64e <__do_global_ctors+0x8>
     65c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <main>
     660:	0c 94 b0 1c 	jmp	0x3960	; 0x3960 <__do_global_dtors>

00000664 <__bad_interrupt>:
     664:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000668 <_Z20doImpulse_button_ISRv>:
	pulseCounter++;
}

void doImpulse_button_ISR()
{
	doImpulse_button.process();
     668:	82 ea       	ldi	r24, 0xA2	; 162
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	0c 94 3e 15 	jmp	0x2a7c	; 0x2a7c <_ZN6Button7processEv>

00000670 <_ZN6U8GLIB5writeEh>:
    u8g_t *getU8g(void) { return &u8g; }
    
    
    /* implementation of the write interface to the print class */
#if defined(ARDUINO) && ARDUINO >= 100
    size_t write(uint8_t c) { tx += u8g_DrawGlyph(&u8g, tx, ty, c); return 1;}
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	ec 01       	movw	r28, r24
     676:	26 2f       	mov	r18, r22
     678:	4c ad       	ldd	r20, Y+60	; 0x3c
     67a:	6b ad       	ldd	r22, Y+59	; 0x3b
     67c:	04 96       	adiw	r24, 0x04	; 4
     67e:	0e 94 55 12 	call	0x24aa	; 0x24aa <u8g_DrawGlyph>
     682:	9b ad       	ldd	r25, Y+59	; 0x3b
     684:	89 0f       	add	r24, r25
     686:	8b af       	std	Y+59, r24	; 0x3b
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <_Z13fireAnImpulseff>:
String throttleToString(float);
String durationToString(float);


void fireAnImpulse(float pulseDuration, float throttle)
{
     692:	cf 92       	push	r12
     694:	df 92       	push	r13
     696:	ef 92       	push	r14
     698:	ff 92       	push	r15
     69a:	0f 93       	push	r16
     69c:	1f 93       	push	r17
     69e:	6b 01       	movw	r12, r22
     6a0:	7c 01       	movw	r14, r24
     6a2:	ca 01       	movw	r24, r20
     6a4:	b9 01       	movw	r22, r18
		//DISABLE_THE_PULSE_TIMING_INTERRUPT();
	//} else
	{

		//set the duty cycle for the pwm signal according to throttle.
		OCR2B = throttle * 255;
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	4f e7       	ldi	r20, 0x7F	; 127
     6ac:	53 e4       	ldi	r21, 0x43	; 67
     6ae:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     6b2:	0e 94 ae 09 	call	0x135c	; 0x135c <__fixunssfsi>
     6b6:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>

		//compute numberOfPwmCycles
		unsigned long numberOfPwmCycles;
		numberOfPwmCycles = pulseDuration/pwmPeriod;  //should we round up or down in a consistent way?
		remainingNumberOfPwmCyclesInTheCurrentPulse += numberOfPwmCycles;
     6ba:	21 ea       	ldi	r18, 0xA1	; 161
     6bc:	34 ef       	ldi	r19, 0xF4	; 244
     6be:	45 e0       	ldi	r20, 0x05	; 5
     6c0:	5b e3       	ldi	r21, 0x3B	; 59
     6c2:	c7 01       	movw	r24, r14
     6c4:	b6 01       	movw	r22, r12
     6c6:	0e 94 35 09 	call	0x126a	; 0x126a <__divsf3>
     6ca:	0e 94 ae 09 	call	0x135c	; 0x135c <__fixunssfsi>
     6ce:	00 91 38 02 	lds	r16, 0x0238	; 0x800238 <remainingNumberOfPwmCyclesInTheCurrentPulse>
     6d2:	10 91 39 02 	lds	r17, 0x0239	; 0x800239 <remainingNumberOfPwmCyclesInTheCurrentPulse+0x1>
     6d6:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <remainingNumberOfPwmCyclesInTheCurrentPulse+0x2>
     6da:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <remainingNumberOfPwmCyclesInTheCurrentPulse+0x3>
     6de:	dc 01       	movw	r26, r24
     6e0:	cb 01       	movw	r24, r22
     6e2:	80 0f       	add	r24, r16
     6e4:	91 1f       	adc	r25, r17
     6e6:	a2 1f       	adc	r26, r18
     6e8:	b3 1f       	adc	r27, r19
     6ea:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <remainingNumberOfPwmCyclesInTheCurrentPulse>
     6ee:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <remainingNumberOfPwmCyclesInTheCurrentPulse+0x1>
     6f2:	a0 93 3a 02 	sts	0x023A, r26	; 0x80023a <remainingNumberOfPwmCyclesInTheCurrentPulse+0x2>
     6f6:	b0 93 3b 02 	sts	0x023B, r27	; 0x80023b <remainingNumberOfPwmCyclesInTheCurrentPulse+0x3>
		ENABLE_THE_PULSE_TIMING_INTERRUPT();
     6fa:	e0 e7       	ldi	r30, 0x70	; 112
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	80 81       	ld	r24, Z
     700:	81 60       	ori	r24, 0x01	; 1
     702:	80 83       	st	Z, r24
	}
}
     704:	1f 91       	pop	r17
     706:	0f 91       	pop	r16
     708:	ff 90       	pop	r15
     70a:	ef 90       	pop	r14
     70c:	df 90       	pop	r13
     70e:	cf 90       	pop	r12
     710:	08 95       	ret

00000712 <_Z24doImpulse_button_onPressR6Button>:


void doImpulse_button_onPress(Button& b)
{

	fireAnImpulse(pulseDuration, throttle);
     712:	20 91 f3 01 	lds	r18, 0x01F3	; 0x8001f3 <throttle>
     716:	30 91 f4 01 	lds	r19, 0x01F4	; 0x8001f4 <throttle+0x1>
     71a:	40 91 f5 01 	lds	r20, 0x01F5	; 0x8001f5 <throttle+0x2>
     71e:	50 91 f6 01 	lds	r21, 0x01F6	; 0x8001f6 <throttle+0x3>
     722:	60 91 ef 01 	lds	r22, 0x01EF	; 0x8001ef <pulseDuration>
     726:	70 91 f0 01 	lds	r23, 0x01F0	; 0x8001f0 <pulseDuration+0x1>
     72a:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <pulseDuration+0x2>
     72e:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <pulseDuration+0x3>
     732:	0e 94 49 03 	call	0x692	; 0x692 <_Z13fireAnImpulseff>

	//update the statistics about the last pulse, to be presented to the user by the display functions.
	lastPulseDuration = pulseDuration;
     736:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <pulseDuration>
     73a:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <pulseDuration+0x1>
     73e:	a0 91 f1 01 	lds	r26, 0x01F1	; 0x8001f1 <pulseDuration+0x2>
     742:	b0 91 f2 01 	lds	r27, 0x01F2	; 0x8001f2 <pulseDuration+0x3>
     746:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <lastPulseDuration>
     74a:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <lastPulseDuration+0x1>
     74e:	a0 93 fd 01 	sts	0x01FD, r26	; 0x8001fd <lastPulseDuration+0x2>
     752:	b0 93 fe 01 	sts	0x01FE, r27	; 0x8001fe <lastPulseDuration+0x3>
	lastPulseThrottle = throttle;
     756:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <throttle>
     75a:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <throttle+0x1>
     75e:	a0 91 f5 01 	lds	r26, 0x01F5	; 0x8001f5 <throttle+0x2>
     762:	b0 91 f6 01 	lds	r27, 0x01F6	; 0x8001f6 <throttle+0x3>
     766:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <lastPulseThrottle>
     76a:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <lastPulseThrottle+0x1>
     76e:	a0 93 f9 01 	sts	0x01F9, r26	; 0x8001f9 <lastPulseThrottle+0x2>
     772:	b0 93 fa 01 	sts	0x01FA, r27	; 0x8001fa <lastPulseThrottle+0x3>
	lastPulseTime = millis();
     776:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <millis>
     77a:	60 93 ff 01 	sts	0x01FF, r22	; 0x8001ff <lastPulseTime>
     77e:	70 93 00 02 	sts	0x0200, r23	; 0x800200 <lastPulseTime+0x1>
     782:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <lastPulseTime+0x2>
     786:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <lastPulseTime+0x3>
	pulseCounter++;
     78a:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <pulseCounter>
     78e:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <pulseCounter+0x1>
     792:	a0 91 05 02 	lds	r26, 0x0205	; 0x800205 <pulseCounter+0x2>
     796:	b0 91 06 02 	lds	r27, 0x0206	; 0x800206 <pulseCounter+0x3>
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	a1 1d       	adc	r26, r1
     79e:	b1 1d       	adc	r27, r1
     7a0:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <pulseCounter>
     7a4:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <pulseCounter+0x1>
     7a8:	a0 93 05 02 	sts	0x0205, r26	; 0x800205 <pulseCounter+0x2>
     7ac:	b0 93 06 02 	sts	0x0206, r27	; 0x800206 <pulseCounter+0x3>
     7b0:	08 95       	ret

000007b2 <_Z12turnOnHeaterv>:
	}
}

void turnOnHeater()
{
	sbi(TCCR2A, COM2B1); //tell the timer to seize control of the output pin
     7b2:	e0 eb       	ldi	r30, 0xB0	; 176
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	80 81       	ld	r24, Z
     7b8:	80 62       	ori	r24, 0x20	; 32
     7ba:	80 83       	st	Z, r24
	pinMode(heater_pin, OUTPUT); //set the ouput pin direction to OUTPUT.
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	83 e0       	ldi	r24, 0x03	; 3
     7c0:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <pinMode>
	heaterIsOn = true;
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <heaterIsOn>
     7ca:	08 95       	ret

000007cc <_Z13turnOffHeaterv>:
}

void turnOffHeater()
{
	digitalWrite(heater_pin, LOW);
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	83 e0       	ldi	r24, 0x03	; 3
     7d0:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <digitalWrite>
	pinMode(heater_pin, INPUT);
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	83 e0       	ldi	r24, 0x03	; 3
     7d8:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <pinMode>
	heaterIsOn = false;
     7dc:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <heaterIsOn>
     7e0:	08 95       	ret

000007e2 <__vector_9>:
	}
}

// this is the interrupt routine that is in charge of starting and stopping the impulse.
ISR(TIMER2_OVF_vect) //void pulseTimingInterruptRoutine()
{
     7e2:	1f 92       	push	r1
     7e4:	0f 92       	push	r0
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	0f 92       	push	r0
     7ea:	11 24       	eor	r1, r1
     7ec:	2f 93       	push	r18
     7ee:	3f 93       	push	r19
     7f0:	4f 93       	push	r20
     7f2:	5f 93       	push	r21
     7f4:	6f 93       	push	r22
     7f6:	7f 93       	push	r23
     7f8:	8f 93       	push	r24
     7fa:	9f 93       	push	r25
     7fc:	af 93       	push	r26
     7fe:	bf 93       	push	r27
     800:	ef 93       	push	r30
     802:	ff 93       	push	r31
	if(!heaterIsOn)
     804:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <heaterIsOn>
     808:	81 11       	cpse	r24, r1
     80a:	03 c0       	rjmp	.+6      	; 0x812 <__vector_9+0x30>
	{
		turnOnHeater();
     80c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <_Z12turnOnHeaterv>
     810:	1f c0       	rjmp	.+62     	; 0x850 <__vector_9+0x6e>
	} else 
	{
		if(remainingNumberOfPwmCyclesInTheCurrentPulse == 0)
     812:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <remainingNumberOfPwmCyclesInTheCurrentPulse>
     816:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <remainingNumberOfPwmCyclesInTheCurrentPulse+0x1>
     81a:	a0 91 3a 02 	lds	r26, 0x023A	; 0x80023a <remainingNumberOfPwmCyclesInTheCurrentPulse+0x2>
     81e:	b0 91 3b 02 	lds	r27, 0x023B	; 0x80023b <remainingNumberOfPwmCyclesInTheCurrentPulse+0x3>
     822:	00 97       	sbiw	r24, 0x00	; 0
     824:	a1 05       	cpc	r26, r1
     826:	b1 05       	cpc	r27, r1
     828:	41 f4       	brne	.+16     	; 0x83a <__vector_9+0x58>
		{
			turnOffHeater();
     82a:	0e 94 e6 03 	call	0x7cc	; 0x7cc <_Z13turnOffHeaterv>
			DISABLE_THE_PULSE_TIMING_INTERRUPT();  //I hope that it's ok to turn off the interrupt enable bit within the interrupt routine.
     82e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     832:	8e 7f       	andi	r24, 0xFE	; 254
     834:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     838:	0b c0       	rjmp	.+22     	; 0x850 <__vector_9+0x6e>
		} 	else	
		{
			remainingNumberOfPwmCyclesInTheCurrentPulse--;
     83a:	01 97       	sbiw	r24, 0x01	; 1
     83c:	a1 09       	sbc	r26, r1
     83e:	b1 09       	sbc	r27, r1
     840:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <remainingNumberOfPwmCyclesInTheCurrentPulse>
     844:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <remainingNumberOfPwmCyclesInTheCurrentPulse+0x1>
     848:	a0 93 3a 02 	sts	0x023A, r26	; 0x80023a <remainingNumberOfPwmCyclesInTheCurrentPulse+0x2>
     84c:	b0 93 3b 02 	sts	0x023B, r27	; 0x80023b <remainingNumberOfPwmCyclesInTheCurrentPulse+0x3>
		}
	}
}
     850:	ff 91       	pop	r31
     852:	ef 91       	pop	r30
     854:	bf 91       	pop	r27
     856:	af 91       	pop	r26
     858:	9f 91       	pop	r25
     85a:	8f 91       	pop	r24
     85c:	7f 91       	pop	r23
     85e:	6f 91       	pop	r22
     860:	5f 91       	pop	r21
     862:	4f 91       	pop	r20
     864:	3f 91       	pop	r19
     866:	2f 91       	pop	r18
     868:	0f 90       	pop	r0
     86a:	0f be       	out	0x3f, r0	; 63
     86c:	0f 90       	pop	r0
     86e:	1f 90       	pop	r1
     870:	18 95       	reti

00000872 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     872:	26 e0       	ldi	r18, 0x06	; 6
     874:	40 e0       	ldi	r20, 0x00	; 0
     876:	52 ec       	ldi	r21, 0xC2	; 194
     878:	61 e0       	ldi	r22, 0x01	; 1
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	8a e0       	ldi	r24, 0x0A	; 10
     87e:	93 e0       	ldi	r25, 0x03	; 3
     880:	0e 94 c7 0b 	call	0x178e	; 0x178e <_ZN14HardwareSerial5beginEmh>


void setup()
{
  Serial.begin(115200);
  throttleReading.init();
     884:	84 ed       	ldi	r24, 0xD4	; 212
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	0e 94 9d 08 	call	0x113a	; 0x113a <_ZN19SmoothedAnalogInput4initEv>
  pulseDurationReading.init();
     88c:	8d eb       	ldi	r24, 0xBD	; 189
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	0e 94 9d 08 	call	0x113a	; 0x113a <_ZN19SmoothedAnalogInput4initEv>

  pinMode(heater_pin,OUTPUT);
     894:	61 e0       	ldi	r22, 0x01	; 1
     896:	83 e0       	ldi	r24, 0x03	; 3
     898:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <pinMode>
  doImpulse_button.pressHandler(doImpulse_button_onPress);
     89c:	69 e8       	ldi	r22, 0x89	; 137
     89e:	73 e0       	ldi	r23, 0x03	; 3
     8a0:	82 ea       	ldi	r24, 0xA2	; 162
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <_ZN6Button12pressHandlerEPFvRS_E>

  attachInterrupt(digitalPinToInterrupt(doImpulse_button.pin), doImpulse_button_ISR, CHANGE);
     8a8:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <doImpulse_button>
     8ac:	82 30       	cpi	r24, 0x02	; 2
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <setup+0x46>
     8b0:	83 30       	cpi	r24, 0x03	; 3
     8b2:	21 f0       	breq	.+8      	; 0x8bc <setup+0x4a>
     8b4:	8f ef       	ldi	r24, 0xFF	; 255
     8b6:	03 c0       	rjmp	.+6      	; 0x8be <setup+0x4c>
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	01 c0       	rjmp	.+2      	; 0x8be <setup+0x4c>
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	41 e0       	ldi	r20, 0x01	; 1
     8c0:	50 e0       	ldi	r21, 0x00	; 0
     8c2:	64 e3       	ldi	r22, 0x34	; 52
     8c4:	73 e0       	ldi	r23, 0x03	; 3
     8c6:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <attachInterrupt>

  DISABLE_THE_PULSE_TIMING_INTERRUPT(); //probably not strictly necessary here, just want to be sure that the impulse is off.
     8ca:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     8ce:	8e 7f       	andi	r24, 0xFE	; 254
     8d0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  turnOffHeater();
     8d4:	0e 94 e6 03 	call	0x7cc	; 0x7cc <_Z13turnOffHeaterv>
    U8GLIB(u8g_dev_t *dev, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7, uint8_t en, uint8_t cs1, uint8_t cs2, uint8_t di, uint8_t rw, uint8_t reset) 
      { init8Bit(dev, d0, d1, d2, d3, d4, d5, d6, d7, en, cs1, cs2, di, rw, reset); }
    U8GLIB(u8g_dev_t *dev, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7, uint8_t cs, uint8_t a0, uint8_t wr, uint8_t rd, uint8_t reset) 
      { initRW8Bit(dev, d0, d1, d2, d3, d4, d5, d6, d7, cs, a0, wr, rd, reset); }

    uint8_t begin(void) { is_begin = 1; return u8g_Begin(&u8g); }
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <u8g+0x3d>
     8de:	80 ed       	ldi	r24, 0xD0	; 208
     8e0:	92 e0       	ldi	r25, 0x02	; 2
     8e2:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <u8g_Begin>

000008e6 <_Z14refreshDisplayv>:
	lastMicros = currentMicros;
}


void refreshDisplay()
{
     8e6:	0f 93       	push	r16
     8e8:	1f 93       	push	r17
     8ea:	cf 93       	push	r28
    void setColorEntry(uint8_t color_index, uint8_t r, uint8_t g, uint8_t b) { u8g_SetColorEntry(&u8g, color_index, r, g, b); }
    void setHiColor(uint16_t  rgb) { u8g_SetHiColor(&u8g, rgb); }
    void setHiColorByRGB(uint8_t r, uint8_t g, uint8_t b) { u8g_SetHiColorByRGB(&u8g, r, g, b); }
    void setRGB(uint8_t r, uint8_t g, uint8_t b) { u8g_SetRGB(&u8g, r, g, b); }
    
    void setColorIndex(uint8_t color_index) { u8g_SetColorIndex(&u8g, color_index); }
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	80 ed       	ldi	r24, 0xD0	; 208
     8f0:	92 e0       	ldi	r25, 0x02	; 2
     8f2:	0e 94 fe 13 	call	0x27fc	; 0x27fc <u8g_SetColorIndex>
    u8g_t u8g;
    u8g_uint_t tx, ty;          // current position for the Print base class procedures
    uint8_t is_begin;

    void prepare(void) { tx = 0; ty = 0; is_begin = 0; }
    void cbegin(void) { if ( is_begin == 0 ) { is_begin = 1; u8g_Begin(&u8g); } }
     8f6:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <u8g+0x3d>
     8fa:	81 11       	cpse	r24, r1
     8fc:	07 c0       	rjmp	.+14     	; 0x90c <__stack+0xd>
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <u8g+0x3d>
     904:	80 ed       	ldi	r24, 0xD0	; 208
     906:	92 e0       	ldi	r25, 0x02	; 2
     908:	0e 94 b4 13 	call	0x2768	; 0x2768 <u8g_Begin>
     /* screen scaling */
    void undoScale(void) { u8g_UndoScale(&u8g); }
    void setScale2x2(void) { u8g_SetScale2x2(&u8g); }
    
     /* picture loop */
    void firstPage(void) { cbegin(); u8g_FirstPage(&u8g); }
     90c:	80 ed       	ldi	r24, 0xD0	; 208
     90e:	92 e0       	ldi	r25, 0x02	; 2
     910:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <u8g_FirstPage>
    void drawXBMP(u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, const u8g_pgm_uint8_t *bitmap)
      { u8g_DrawXBMP(&u8g, x, y, w, h, bitmap); }
    
      
    /* font handling */
    void setFont(const u8g_fntpgm_uint8_t *font) {u8g_SetFont(&u8g, font); }
     914:	6e ef       	ldi	r22, 0xFE	; 254
     916:	71 e0       	ldi	r23, 0x01	; 1
     918:	80 ed       	ldi	r24, 0xD0	; 208
     91a:	92 e0       	ldi	r25, 0x02	; 2
     91c:	0e 94 bc 12 	call	0x2578	; 0x2578 <u8g_SetFont>
     920:	07 e0       	ldi	r16, 0x07	; 7
     922:	12 e0       	ldi	r17, 0x02	; 2
     924:	c1 e0       	ldi	r28, 0x01	; 1
	
	printPositionX=0; printPositionY=0;
	u8g.setFont(u8g_font_babyr); u8g.setPrintPos(printPositionX, printPositionY += u8g.getFontLineSpacing());
	for(int lineNumber=1;lineNumber<=numDisplayLines;lineNumber++)
	{
		u8g.setPrintPos(0,u8g.getFontLineSpacing()*lineNumber);
     926:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <u8g+0x1f>
     92a:	c8 9f       	mul	r28, r24
     92c:	80 2d       	mov	r24, r0
     92e:	11 24       	eor	r1, r1
    U8GLIB(u8g_dev_t *dev, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7, uint8_t cs, uint8_t a0, uint8_t wr, uint8_t rd, uint8_t reset) 
      { initRW8Bit(dev, d0, d1, d2, d3, d4, d5, d6, d7, cs, a0, wr, rd, reset); }

    uint8_t begin(void) { is_begin = 1; return u8g_Begin(&u8g); }
      
    void setPrintPos(u8g_uint_t x, u8g_uint_t y) { tx = x; ty = y; }
     930:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <u8g+0x3b>
     934:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <u8g+0x3c>
		u8g.print(displayLines[lineNumber-1]);
     938:	b8 01       	movw	r22, r16
     93a:	8c ec       	ldi	r24, 0xCC	; 204
     93c:	92 e0       	ldi	r25, 0x02	; 2
     93e:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <_ZN5Print5printERK6String>
     942:	cf 5f       	subi	r28, 0xFF	; 255
     944:	0a 5f       	subi	r16, 0xFA	; 250
     946:	1f 4f       	sbci	r17, 0xFF	; 255
	// u8g.drawBox(63,0,1,34); //upper vertical line
	// u8g.drawBox(47,35,1,29); //lower vertical line
	
	printPositionX=0; printPositionY=0;
	u8g.setFont(u8g_font_babyr); u8g.setPrintPos(printPositionX, printPositionY += u8g.getFontLineSpacing());
	for(int lineNumber=1;lineNumber<=numDisplayLines;lineNumber++)
     948:	c9 30       	cpi	r28, 0x09	; 9
     94a:	69 f7       	brne	.-38     	; 0x926 <__stack+0x27>
    void undoScale(void) { u8g_UndoScale(&u8g); }
    void setScale2x2(void) { u8g_SetScale2x2(&u8g); }
    
     /* picture loop */
    void firstPage(void) { cbegin(); u8g_FirstPage(&u8g); }
    uint8_t nextPage(void) { return u8g_NextPage(&u8g); }
     94c:	80 ed       	ldi	r24, 0xD0	; 208
     94e:	92 e0       	ldi	r25, 0x02	; 2
     950:	0e 94 de 13 	call	0x27bc	; 0x27bc <u8g_NextPage>
{

   int printPositionX, printPositionY; // used to keep track of current print position (for doing newlines)
   u8g.setColorIndex(1);
   u8g.firstPage();  
    do {
     954:	81 11       	cpse	r24, r1
     956:	de cf       	rjmp	.-68     	; 0x914 <__stack+0x15>
	{
		u8g.setPrintPos(0,u8g.getFontLineSpacing()*lineNumber);
		u8g.print(displayLines[lineNumber-1]);
	}
  } while( u8g.nextPage() );
}
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	08 95       	ret

00000960 <_Z16throttleToStringf>:




String throttleToString(float throttle)
{
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	2c 97       	sbiw	r28, 0x0c	; 12
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	de bf       	out	0x3e, r29	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	cd bf       	out	0x3d, r28	; 61
     978:	8c 01       	movw	r16, r24
     97a:	cb 01       	movw	r24, r22
     97c:	ba 01       	movw	r22, r20
	return String(throttle*100,1) + "%";
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	48 ec       	ldi	r20, 0xC8	; 200
     984:	52 e4       	ldi	r21, 0x42	; 66
     986:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     98a:	ab 01       	movw	r20, r22
     98c:	bc 01       	movw	r22, r24
     98e:	21 e0       	ldi	r18, 0x01	; 1
     990:	ce 01       	movw	r24, r28
     992:	07 96       	adiw	r24, 0x07	; 7
     994:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <_ZN6StringC1Efh>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
     998:	be 01       	movw	r22, r28
     99a:	69 5f       	subi	r22, 0xF9	; 249
     99c:	7f 4f       	sbci	r23, 0xFF	; 255
     99e:	ce 01       	movw	r24, r28
     9a0:	01 96       	adiw	r24, 0x01	; 1
     9a2:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <_ZN6StringC1ERKS_>
     9a6:	69 e1       	ldi	r22, 0x19	; 25
     9a8:	71 e0       	ldi	r23, 0x01	; 1
     9aa:	ce 01       	movw	r24, r28
     9ac:	01 96       	adiw	r24, 0x01	; 1
     9ae:	0e 94 5e 10 	call	0x20bc	; 0x20bc <_ZplRK15StringSumHelperPKc>
     9b2:	bc 01       	movw	r22, r24
     9b4:	c8 01       	movw	r24, r16
     9b6:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <_ZN6StringC1ERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     9ba:	ce 01       	movw	r24, r28
     9bc:	01 96       	adiw	r24, 0x01	; 1
     9be:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN6StringD1Ev>
     9c2:	ce 01       	movw	r24, r28
     9c4:	07 96       	adiw	r24, 0x07	; 7
     9c6:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN6StringD1Ev>
}
     9ca:	c8 01       	movw	r24, r16
     9cc:	2c 96       	adiw	r28, 0x0c	; 12
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	de bf       	out	0x3e, r29	; 62
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	cd bf       	out	0x3d, r28	; 61
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	0f 91       	pop	r16
     9e0:	08 95       	ret

000009e2 <_Z16durationToStringf>:

String durationToString(float pulseDuration)
{
     9e2:	0f 93       	push	r16
     9e4:	1f 93       	push	r17
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	cd b7       	in	r28, 0x3d	; 61
     9ec:	de b7       	in	r29, 0x3e	; 62
     9ee:	2c 97       	sbiw	r28, 0x0c	; 12
     9f0:	0f b6       	in	r0, 0x3f	; 63
     9f2:	f8 94       	cli
     9f4:	de bf       	out	0x3e, r29	; 62
     9f6:	0f be       	out	0x3f, r0	; 63
     9f8:	cd bf       	out	0x3d, r28	; 61
     9fa:	8c 01       	movw	r16, r24
     9fc:	cb 01       	movw	r24, r22
     9fe:	ba 01       	movw	r22, r20
	return String(pulseDuration * 1000, 1) + "ms";
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	4a e7       	ldi	r20, 0x7A	; 122
     a06:	54 e4       	ldi	r21, 0x44	; 68
     a08:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     a0c:	ab 01       	movw	r20, r22
     a0e:	bc 01       	movw	r22, r24
     a10:	21 e0       	ldi	r18, 0x01	; 1
     a12:	ce 01       	movw	r24, r28
     a14:	07 96       	adiw	r24, 0x07	; 7
     a16:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <_ZN6StringC1Efh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
     a1a:	be 01       	movw	r22, r28
     a1c:	69 5f       	subi	r22, 0xF9	; 249
     a1e:	7f 4f       	sbci	r23, 0xFF	; 255
     a20:	ce 01       	movw	r24, r28
     a22:	01 96       	adiw	r24, 0x01	; 1
     a24:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <_ZN6StringC1ERKS_>
     a28:	6b e1       	ldi	r22, 0x1B	; 27
     a2a:	71 e0       	ldi	r23, 0x01	; 1
     a2c:	ce 01       	movw	r24, r28
     a2e:	01 96       	adiw	r24, 0x01	; 1
     a30:	0e 94 5e 10 	call	0x20bc	; 0x20bc <_ZplRK15StringSumHelperPKc>
     a34:	bc 01       	movw	r22, r24
     a36:	c8 01       	movw	r24, r16
     a38:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <_ZN6StringC1ERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     a3c:	ce 01       	movw	r24, r28
     a3e:	01 96       	adiw	r24, 0x01	; 1
     a40:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN6StringD1Ev>
     a44:	ce 01       	movw	r24, r28
     a46:	07 96       	adiw	r24, 0x07	; 7
     a48:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN6StringD1Ev>
     a4c:	c8 01       	movw	r24, r16
     a4e:	2c 96       	adiw	r28, 0x0c	; 12
     a50:	0f b6       	in	r0, 0x3f	; 63
     a52:	f8 94       	cli
     a54:	de bf       	out	0x3e, r29	; 62
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	cd bf       	out	0x3d, r28	; 61
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	1f 91       	pop	r17
     a60:	0f 91       	pop	r16
     a62:	08 95       	ret

00000a64 <loop>:
  
  u8g.begin();
}

void loop()
{
     a64:	cf 92       	push	r12
     a66:	df 92       	push	r13
     a68:	ef 92       	push	r14
     a6a:	ff 92       	push	r15
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
     a70:	cd b7       	in	r28, 0x3d	; 61
     a72:	de b7       	in	r29, 0x3e	; 62
     a74:	62 97       	sbiw	r28, 0x12	; 18
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	de bf       	out	0x3e, r29	; 62
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	cd bf       	out	0x3d, r28	; 61
	static unsigned long lastMillis, currentMillis, deltaMillis;
	static unsigned long lastMicros, currentMicros, deltaMicros;
	
	currentMillis = millis();
     a80:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <millis>
     a84:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <_ZZ4loopE13currentMillis>
     a88:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <_ZZ4loopE13currentMillis+0x1>
     a8c:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <_ZZ4loopE13currentMillis+0x2>
     a90:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <_ZZ4loopE13currentMillis+0x3>
	currentMicros = micros();
     a94:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <micros>
     a98:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <_ZZ4loopE13currentMicros>
     a9c:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <_ZZ4loopE13currentMicros+0x1>
     aa0:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <_ZZ4loopE13currentMicros+0x2>
     aa4:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <_ZZ4loopE13currentMicros+0x3>

	deltaMillis = currentMillis - lastMillis;
	deltaMicros = currentMicros - lastMicros;
	currentTime=millis();
     aa8:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <millis>
     aac:	60 93 eb 01 	sts	0x01EB, r22	; 0x8001eb <currentTime>
     ab0:	70 93 ec 01 	sts	0x01EC, r23	; 0x8001ec <currentTime+0x1>
     ab4:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <currentTime+0x2>
     ab8:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <currentTime+0x3>
	//Debugger.update();

	throttleReading.update();
     abc:	84 ed       	ldi	r24, 0xD4	; 212
     abe:	91 e0       	ldi	r25, 0x01	; 1
     ac0:	0e 94 99 08 	call	0x1132	; 0x1132 <_ZN19SmoothedAnalogInput6updateEv>
	pulseDurationReading.update();
     ac4:	8d eb       	ldi	r24, 0xBD	; 189
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	0e 94 99 08 	call	0x1132	; 0x1132 <_ZN19SmoothedAnalogInput6updateEv>

	//TODO: document and standardize the mapping from ADC reading to parameter values.  For now, I am simply throwing in a couple of likely literal values, but this does not make for very clean, intelligible code.
	throttle = round(throttleReading.value())/1023.0;
     acc:	84 ed       	ldi	r24, 0xD4	; 212
     ace:	91 e0       	ldi	r25, 0x01	; 1
     ad0:	0e 94 be 07 	call	0xf7c	; 0xf7c <_ZN19SmoothedAnalogInput5valueEv>
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	a9 01       	movw	r20, r18
     ada:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__gesf2>
     ade:	87 fd       	sbrc	r24, 7
     ae0:	0b c0       	rjmp	.+22     	; 0xaf8 <loop+0x94>
     ae2:	84 ed       	ldi	r24, 0xD4	; 212
     ae4:	91 e0       	ldi	r25, 0x01	; 1
     ae6:	0e 94 be 07 	call	0xf7c	; 0xf7c <_ZN19SmoothedAnalogInput5valueEv>
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	40 e0       	ldi	r20, 0x00	; 0
     af0:	5f e3       	ldi	r21, 0x3F	; 63
     af2:	0e 94 c9 08 	call	0x1192	; 0x1192 <__addsf3>
     af6:	0a c0       	rjmp	.+20     	; 0xb0c <loop+0xa8>
     af8:	84 ed       	ldi	r24, 0xD4	; 212
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	0e 94 be 07 	call	0xf7c	; 0xf7c <_ZN19SmoothedAnalogInput5valueEv>
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	40 e0       	ldi	r20, 0x00	; 0
     b06:	5f e3       	ldi	r21, 0x3F	; 63
     b08:	0e 94 c8 08 	call	0x1190	; 0x1190 <__subsf3>
     b0c:	0e 94 a7 09 	call	0x134e	; 0x134e <__fixsfsi>
     b10:	0e 94 df 09 	call	0x13be	; 0x13be <__floatsisf>
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	30 ec       	ldi	r19, 0xC0	; 192
     b18:	4f e7       	ldi	r20, 0x7F	; 127
     b1a:	54 e4       	ldi	r21, 0x44	; 68
     b1c:	0e 94 35 09 	call	0x126a	; 0x126a <__divsf3>
     b20:	60 93 f3 01 	sts	0x01F3, r22	; 0x8001f3 <throttle>
     b24:	70 93 f4 01 	sts	0x01F4, r23	; 0x8001f4 <throttle+0x1>
     b28:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <throttle+0x2>
     b2c:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <throttle+0x3>
	pulseDuration = round(pulseDurationReading.value())/1000.0;
     b30:	8d eb       	ldi	r24, 0xBD	; 189
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	0e 94 be 07 	call	0xf7c	; 0xf7c <_ZN19SmoothedAnalogInput5valueEv>
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	a9 01       	movw	r20, r18
     b3e:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__gesf2>
     b42:	87 fd       	sbrc	r24, 7
     b44:	0b c0       	rjmp	.+22     	; 0xb5c <loop+0xf8>
     b46:	8d eb       	ldi	r24, 0xBD	; 189
     b48:	91 e0       	ldi	r25, 0x01	; 1
     b4a:	0e 94 be 07 	call	0xf7c	; 0xf7c <_ZN19SmoothedAnalogInput5valueEv>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	5f e3       	ldi	r21, 0x3F	; 63
     b56:	0e 94 c9 08 	call	0x1192	; 0x1192 <__addsf3>
     b5a:	0a c0       	rjmp	.+20     	; 0xb70 <loop+0x10c>
     b5c:	8d eb       	ldi	r24, 0xBD	; 189
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	0e 94 be 07 	call	0xf7c	; 0xf7c <_ZN19SmoothedAnalogInput5valueEv>
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	5f e3       	ldi	r21, 0x3F	; 63
     b6c:	0e 94 c8 08 	call	0x1190	; 0x1190 <__subsf3>
     b70:	0e 94 a7 09 	call	0x134e	; 0x134e <__fixsfsi>
     b74:	0e 94 df 09 	call	0x13be	; 0x13be <__floatsisf>
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	4a e7       	ldi	r20, 0x7A	; 122
     b7e:	54 e4       	ldi	r21, 0x44	; 68
     b80:	0e 94 35 09 	call	0x126a	; 0x126a <__divsf3>
     b84:	60 93 ef 01 	sts	0x01EF, r22	; 0x8001ef <pulseDuration>
     b88:	70 93 f0 01 	sts	0x01F0, r23	; 0x8001f0 <pulseDuration+0x1>
     b8c:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <pulseDuration+0x2>
     b90:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <pulseDuration+0x3>

	



	if(heaterIsOn)
     b94:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <heaterIsOn>
     b98:	88 23       	and	r24, r24
     b9a:	09 f4       	brne	.+2      	; 0xb9e <loop+0x13a>
     b9c:	40 c0       	rjmp	.+128    	; 0xc1e <loop+0x1ba>
	{
		float timeRemainingInCurrentPulse = remainingNumberOfPwmCyclesInTheCurrentPulse * pwmPeriod;
		displayLines[lineIndex++] = String("heater is ON. ") + durationToString(timeRemainingInCurrentPulse) + " to go";
     b9e:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <remainingNumberOfPwmCyclesInTheCurrentPulse>
     ba2:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <remainingNumberOfPwmCyclesInTheCurrentPulse+0x1>
     ba6:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <remainingNumberOfPwmCyclesInTheCurrentPulse+0x2>
     baa:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <remainingNumberOfPwmCyclesInTheCurrentPulse+0x3>
     bae:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__floatunsisf>
     bb2:	21 ea       	ldi	r18, 0xA1	; 161
     bb4:	34 ef       	ldi	r19, 0xF4	; 244
     bb6:	45 e0       	ldi	r20, 0x05	; 5
     bb8:	5b e3       	ldi	r21, 0x3B	; 59
     bba:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     bbe:	ab 01       	movw	r20, r22
     bc0:	bc 01       	movw	r22, r24
     bc2:	ce 01       	movw	r24, r28
     bc4:	07 96       	adiw	r24, 0x07	; 7
     bc6:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_Z16durationToStringf>
     bca:	6e e1       	ldi	r22, 0x1E	; 30
     bcc:	71 e0       	ldi	r23, 0x01	; 1
     bce:	ce 01       	movw	r24, r28
     bd0:	0d 96       	adiw	r24, 0x0d	; 13
     bd2:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <_ZN6StringC1EPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
     bd6:	be 01       	movw	r22, r28
     bd8:	63 5f       	subi	r22, 0xF3	; 243
     bda:	7f 4f       	sbci	r23, 0xFF	; 255
     bdc:	ce 01       	movw	r24, r28
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <_ZN6StringC1ERKS_>
     be4:	be 01       	movw	r22, r28
     be6:	69 5f       	subi	r22, 0xF9	; 249
     be8:	7f 4f       	sbci	r23, 0xFF	; 255
     bea:	ce 01       	movw	r24, r28
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	0e 94 4b 10 	call	0x2096	; 0x2096 <_ZplRK15StringSumHelperRK6String>
     bf2:	6d e2       	ldi	r22, 0x2D	; 45
     bf4:	71 e0       	ldi	r23, 0x01	; 1
     bf6:	0e 94 5e 10 	call	0x20bc	; 0x20bc <_ZplRK15StringSumHelperPKc>
     bfa:	bc 01       	movw	r22, r24
     bfc:	87 e0       	ldi	r24, 0x07	; 7
     bfe:	92 e0       	ldi	r25, 0x02	; 2
     c00:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     c04:	ce 01       	movw	r24, r28
     c06:	01 96       	adiw	r24, 0x01	; 1
     c08:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN6StringD1Ev>
     c0c:	ce 01       	movw	r24, r28
     c0e:	0d 96       	adiw	r24, 0x0d	; 13
     c10:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN6StringD1Ev>
     c14:	ce 01       	movw	r24, r28
     c16:	07 96       	adiw	r24, 0x07	; 7
     c18:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN6StringD1Ev>
     c1c:	06 c0       	rjmp	.+12     	; 0xc2a <loop+0x1c6>
	} else
	{
		displayLines[lineIndex++] = "heater is OFF.";
     c1e:	64 e3       	ldi	r22, 0x34	; 52
     c20:	71 e0       	ldi	r23, 0x01	; 1
     c22:	87 e0       	ldi	r24, 0x07	; 7
     c24:	92 e0       	ldi	r25, 0x02	; 2
     c26:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN6StringaSEPKc>
	}
	displayLines[lineIndex++] = String("pulseCounter: ") + pulseCounter;
     c2a:	c0 90 03 02 	lds	r12, 0x0203	; 0x800203 <pulseCounter>
     c2e:	d0 90 04 02 	lds	r13, 0x0204	; 0x800204 <pulseCounter+0x1>
     c32:	e0 90 05 02 	lds	r14, 0x0205	; 0x800205 <pulseCounter+0x2>
     c36:	f0 90 06 02 	lds	r15, 0x0206	; 0x800206 <pulseCounter+0x3>
     c3a:	63 e4       	ldi	r22, 0x43	; 67
     c3c:	71 e0       	ldi	r23, 0x01	; 1
     c3e:	ce 01       	movw	r24, r28
     c40:	07 96       	adiw	r24, 0x07	; 7
     c42:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <_ZN6StringC1EPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
     c46:	be 01       	movw	r22, r28
     c48:	69 5f       	subi	r22, 0xF9	; 249
     c4a:	7f 4f       	sbci	r23, 0xFF	; 255
     c4c:	ce 01       	movw	r24, r28
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <_ZN6StringC1ERKS_>
     c54:	b7 01       	movw	r22, r14
     c56:	a6 01       	movw	r20, r12
     c58:	ce 01       	movw	r24, r28
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	0e 94 77 10 	call	0x20ee	; 0x20ee <_ZplRK15StringSumHelperm>
     c60:	bc 01       	movw	r22, r24
     c62:	8d e0       	ldi	r24, 0x0D	; 13
     c64:	92 e0       	ldi	r25, 0x02	; 2
     c66:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     c6a:	ce 01       	movw	r24, r28
     c6c:	01 96       	adiw	r24, 0x01	; 1
     c6e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN6StringD1Ev>
     c72:	ce 01       	movw	r24, r28
     c74:	07 96       	adiw	r24, 0x07	; 7
     c76:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN6StringD1Ev>
	displayLines[lineIndex++] = "last pulse: " + durationToString(lastPulseDuration) +  " at "  +  throttleToString(lastPulseThrottle);
     c7a:	40 91 f7 01 	lds	r20, 0x01F7	; 0x8001f7 <lastPulseThrottle>
     c7e:	50 91 f8 01 	lds	r21, 0x01F8	; 0x8001f8 <lastPulseThrottle+0x1>
     c82:	60 91 f9 01 	lds	r22, 0x01F9	; 0x8001f9 <lastPulseThrottle+0x2>
     c86:	70 91 fa 01 	lds	r23, 0x01FA	; 0x8001fa <lastPulseThrottle+0x3>
     c8a:	ce 01       	movw	r24, r28
     c8c:	01 96       	adiw	r24, 0x01	; 1
     c8e:	0e 94 b0 04 	call	0x960	; 0x960 <_Z16throttleToStringf>
     c92:	40 91 fb 01 	lds	r20, 0x01FB	; 0x8001fb <lastPulseDuration>
     c96:	50 91 fc 01 	lds	r21, 0x01FC	; 0x8001fc <lastPulseDuration+0x1>
     c9a:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <lastPulseDuration+0x2>
     c9e:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <lastPulseDuration+0x3>
     ca2:	ce 01       	movw	r24, r28
     ca4:	0d 96       	adiw	r24, 0x0d	; 13
     ca6:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_Z16durationToStringf>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     caa:	62 e5       	ldi	r22, 0x52	; 82
     cac:	71 e0       	ldi	r23, 0x01	; 1
     cae:	ce 01       	movw	r24, r28
     cb0:	07 96       	adiw	r24, 0x07	; 7
     cb2:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <_ZN6StringC1EPKc>
     cb6:	be 01       	movw	r22, r28
     cb8:	63 5f       	subi	r22, 0xF3	; 243
     cba:	7f 4f       	sbci	r23, 0xFF	; 255
     cbc:	ce 01       	movw	r24, r28
     cbe:	07 96       	adiw	r24, 0x07	; 7
     cc0:	0e 94 4b 10 	call	0x2096	; 0x2096 <_ZplRK15StringSumHelperRK6String>
     cc4:	6f e5       	ldi	r22, 0x5F	; 95
     cc6:	71 e0       	ldi	r23, 0x01	; 1
     cc8:	0e 94 5e 10 	call	0x20bc	; 0x20bc <_ZplRK15StringSumHelperPKc>
     ccc:	be 01       	movw	r22, r28
     cce:	6f 5f       	subi	r22, 0xFF	; 255
     cd0:	7f 4f       	sbci	r23, 0xFF	; 255
     cd2:	0e 94 4b 10 	call	0x2096	; 0x2096 <_ZplRK15StringSumHelperRK6String>
     cd6:	bc 01       	movw	r22, r24
     cd8:	83 e1       	ldi	r24, 0x13	; 19
     cda:	92 e0       	ldi	r25, 0x02	; 2
     cdc:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     ce0:	ce 01       	movw	r24, r28
     ce2:	07 96       	adiw	r24, 0x07	; 7
     ce4:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN6StringD1Ev>
     ce8:	ce 01       	movw	r24, r28
     cea:	0d 96       	adiw	r24, 0x0d	; 13
     cec:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN6StringD1Ev>
     cf0:	ce 01       	movw	r24, r28
     cf2:	01 96       	adiw	r24, 0x01	; 1
     cf4:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN6StringD1Ev>
	displayLines[lineIndex++] = "next pulse: " + durationToString(pulseDuration)     +  " at "  +  throttleToString(throttle);
     cf8:	40 91 f3 01 	lds	r20, 0x01F3	; 0x8001f3 <throttle>
     cfc:	50 91 f4 01 	lds	r21, 0x01F4	; 0x8001f4 <throttle+0x1>
     d00:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <throttle+0x2>
     d04:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <throttle+0x3>
     d08:	ce 01       	movw	r24, r28
     d0a:	01 96       	adiw	r24, 0x01	; 1
     d0c:	0e 94 b0 04 	call	0x960	; 0x960 <_Z16throttleToStringf>
     d10:	40 91 ef 01 	lds	r20, 0x01EF	; 0x8001ef <pulseDuration>
     d14:	50 91 f0 01 	lds	r21, 0x01F0	; 0x8001f0 <pulseDuration+0x1>
     d18:	60 91 f1 01 	lds	r22, 0x01F1	; 0x8001f1 <pulseDuration+0x2>
     d1c:	70 91 f2 01 	lds	r23, 0x01F2	; 0x8001f2 <pulseDuration+0x3>
     d20:	ce 01       	movw	r24, r28
     d22:	0d 96       	adiw	r24, 0x0d	; 13
     d24:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_Z16durationToStringf>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     d28:	64 e6       	ldi	r22, 0x64	; 100
     d2a:	71 e0       	ldi	r23, 0x01	; 1
     d2c:	ce 01       	movw	r24, r28
     d2e:	07 96       	adiw	r24, 0x07	; 7
     d30:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <_ZN6StringC1EPKc>
     d34:	be 01       	movw	r22, r28
     d36:	63 5f       	subi	r22, 0xF3	; 243
     d38:	7f 4f       	sbci	r23, 0xFF	; 255
     d3a:	ce 01       	movw	r24, r28
     d3c:	07 96       	adiw	r24, 0x07	; 7
     d3e:	0e 94 4b 10 	call	0x2096	; 0x2096 <_ZplRK15StringSumHelperRK6String>
     d42:	6f e5       	ldi	r22, 0x5F	; 95
     d44:	71 e0       	ldi	r23, 0x01	; 1
     d46:	0e 94 5e 10 	call	0x20bc	; 0x20bc <_ZplRK15StringSumHelperPKc>
     d4a:	be 01       	movw	r22, r28
     d4c:	6f 5f       	subi	r22, 0xFF	; 255
     d4e:	7f 4f       	sbci	r23, 0xFF	; 255
     d50:	0e 94 4b 10 	call	0x2096	; 0x2096 <_ZplRK15StringSumHelperRK6String>
     d54:	bc 01       	movw	r22, r24
     d56:	89 e1       	ldi	r24, 0x19	; 25
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     d5e:	ce 01       	movw	r24, r28
     d60:	07 96       	adiw	r24, 0x07	; 7
     d62:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN6StringD1Ev>
     d66:	ce 01       	movw	r24, r28
     d68:	0d 96       	adiw	r24, 0x0d	; 13
     d6a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN6StringD1Ev>
     d6e:	ce 01       	movw	r24, r28
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN6StringD1Ev>
		
	refreshDisplay();
     d76:	0e 94 73 04 	call	0x8e6	; 0x8e6 <_Z14refreshDisplayv>

	lastMillis = currentMillis;
     d7a:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <_ZZ4loopE13currentMillis>
     d7e:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <_ZZ4loopE13currentMillis+0x1>
     d82:	a0 91 a0 01 	lds	r26, 0x01A0	; 0x8001a0 <_ZZ4loopE13currentMillis+0x2>
     d86:	b0 91 a1 01 	lds	r27, 0x01A1	; 0x8001a1 <_ZZ4loopE13currentMillis+0x3>
     d8a:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <_ZZ4loopE10lastMillis>
     d8e:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <_ZZ4loopE10lastMillis+0x1>
     d92:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <_ZZ4loopE10lastMillis+0x2>
     d96:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <_ZZ4loopE10lastMillis+0x3>
	lastMicros = currentMicros;
     d9a:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <_ZZ4loopE13currentMicros>
     d9e:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <_ZZ4loopE13currentMicros+0x1>
     da2:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <_ZZ4loopE13currentMicros+0x2>
     da6:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <_ZZ4loopE13currentMicros+0x3>
     daa:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
     dae:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__data_end+0x1>
     db2:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <__data_end+0x2>
     db6:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <__data_end+0x3>
}
     dba:	62 96       	adiw	r28, 0x12	; 18
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	ff 90       	pop	r15
     dcc:	ef 90       	pop	r14
     dce:	df 90       	pop	r13
     dd0:	cf 90       	pop	r12
     dd2:	08 95       	ret

00000dd4 <_GLOBAL__sub_I_u8g>:
}

String durationToString(float pulseDuration)
{
	return String(pulseDuration * 1000, 1) + "ms";
     dd4:	0f 93       	push	r16
     dd6:	1f 93       	push	r17
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     ddc:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <u8g+0x3>
     de0:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <u8g+0x2>
    U8GLIB(u8g_dev_t *dev, uint8_t sck, uint8_t mosi, uint8_t cs, uint8_t a0, uint8_t reset) 
      { initSPI(dev, sck, mosi, cs, a0, reset); }
    U8GLIB(u8g_dev_t *dev, uint8_t cs, uint8_t a0, uint8_t reset) 
      { initHWSPI(dev, cs, a0, reset); }
    U8GLIB(u8g_dev_t *dev, uint8_t options) 
      { initI2C(dev, options); }
     de4:	85 e7       	ldi	r24, 0x75	; 117
     de6:	91 e0       	ldi	r25, 0x01	; 1
     de8:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <u8g+0x1>
     dec:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <u8g>
     df0:	42 e1       	ldi	r20, 0x12	; 18
     df2:	6b e0       	ldi	r22, 0x0B	; 11
     df4:	71 e0       	ldi	r23, 0x01	; 1
     df6:	8c ec       	ldi	r24, 0xCC	; 204
     df8:	92 e0       	ldi	r25, 0x02	; 2
     dfa:	0e 94 85 10 	call	0x210a	; 0x210a <_ZN6U8GLIB7initI2CEP10_u8g_dev_th>
      { }
    U8GLIB_SSD1306_128X64(uint8_t cs, uint8_t a0, uint8_t reset = U8G_PIN_NONE) 
      : U8GLIB(&u8g_dev_ssd1306_128x64_hw_spi, cs, a0, reset)
      { }
    U8GLIB_SSD1306_128X64(uint8_t options = U8G_I2C_OPT_NONE) 
      : U8GLIB(&u8g_dev_ssd1306_128x64_i2c, options)
     dfe:	8d e7       	ldi	r24, 0x7D	; 125
     e00:	91 e0       	ldi	r25, 0x01	; 1
     e02:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <u8g+0x1>
     e06:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <u8g>
			 }
		};
				
		debugger_t()
		{
			numberOfWatchedItems = 0;
     e0a:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <Debugger+0x1>
     e0e:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <Debugger>
			timeOfLastDisplayRefresh = currentTime;
     e12:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <currentTime>
     e16:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <currentTime+0x1>
     e1a:	a0 91 ed 01 	lds	r26, 0x01ED	; 0x8001ed <currentTime+0x2>
     e1e:	b0 91 ee 01 	lds	r27, 0x01EE	; 0x8001ee <currentTime+0x3>
     e22:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <Debugger+0x2>
     e26:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <Debugger+0x3>
     e2a:	a0 93 40 02 	sts	0x0240, r26	; 0x800240 <Debugger+0x4>
     e2e:	b0 93 41 02 	sts	0x0241, r27	; 0x800241 <Debugger+0x5>
			displayRefreshInterval = 250;
     e32:	8a ef       	ldi	r24, 0xFA	; 250
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	a0 e0       	ldi	r26, 0x00	; 0
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <Debugger+0xa>
     e3e:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <Debugger+0xb>
     e42:	a0 93 48 02 	sts	0x0248, r26	; 0x800248 <Debugger+0xc>
     e46:	b0 93 49 02 	sts	0x0249, r27	; 0x800249 <Debugger+0xd>
			formRedrawInterval = 5000;
     e4a:	88 e8       	ldi	r24, 0x88	; 136
     e4c:	93 e1       	ldi	r25, 0x13	; 19
     e4e:	a0 e0       	ldi	r26, 0x00	; 0
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <Debugger+0xe>
     e56:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <Debugger+0xf>
     e5a:	a0 93 4c 02 	sts	0x024C, r26	; 0x80024c <Debugger+0x10>
     e5e:	b0 93 4d 02 	sts	0x024D, r27	; 0x80024d <Debugger+0x11>
			formNeedsToBeRedrawn = true;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <Debugger+0x12>
     e68:	c7 e0       	ldi	r28, 0x07	; 7
     e6a:	d2 e0       	ldi	r29, 0x02	; 2
     e6c:	07 e3       	ldi	r16, 0x37	; 55
     e6e:	12 e0       	ldi	r17, 0x02	; 2
unsigned long remainingNumberOfPwmCyclesInTheCurrentPulse;
bool heaterIsOn;

const int smoothingBufferSize = 6;
const int numDisplayLines=8;
String displayLines[numDisplayLines];
     e70:	6c e2       	ldi	r22, 0x2C	; 44
     e72:	71 e0       	ldi	r23, 0x01	; 1
     e74:	ce 01       	movw	r24, r28
     e76:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <_ZN6StringC1EPKc>
     e7a:	26 96       	adiw	r28, 0x06	; 6
     e7c:	0c 17       	cp	r16, r28
     e7e:	1d 07       	cpc	r17, r29
     e80:	b9 f7       	brne	.-18     	; 0xe70 <_GLOBAL__sub_I_u8g+0x9c>
float pulseDuration;

unsigned long currentTime; //every pass through the loop, we update this to millis();


SmoothedAnalogInput throttleReading =
     e82:	26 e0       	ldi	r18, 0x06	; 6
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	40 e0       	ldi	r20, 0x00	; 0
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	6f e0       	ldi	r22, 0x0F	; 15
     e8c:	84 ed       	ldi	r24, 0xD4	; 212
     e8e:	91 e0       	ldi	r25, 0x01	; 1
     e90:	0e 94 7c 07 	call	0xef8	; 0xef8 <_ZN19SmoothedAnalogInputC1Ehm>
	SmoothedAnalogInput(
		throttle_pin,	//pinNumber
		smoothingBufferSize				//bufferSize
	);
SmoothedAnalogInput pulseDurationReading =
     e94:	26 e0       	ldi	r18, 0x06	; 6
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	40 e0       	ldi	r20, 0x00	; 0
     e9a:	50 e0       	ldi	r21, 0x00	; 0
     e9c:	6e e0       	ldi	r22, 0x0E	; 14
     e9e:	8d eb       	ldi	r24, 0xBD	; 189
     ea0:	91 e0       	ldi	r25, 0x01	; 1
     ea2:	0e 94 7c 07 	call	0xef8	; 0xef8 <_ZN19SmoothedAnalogInputC1Ehm>
	SmoothedAnalogInput(
		pulseDuration_pin,	//pinNumber
		smoothingBufferSize 				//bufferSize
	);

Button doImpulse_button =
     ea6:	04 e1       	ldi	r16, 0x14	; 20
     ea8:	10 e0       	ldi	r17, 0x00	; 0
     eaa:	21 e0       	ldi	r18, 0x01	; 1
     eac:	42 e0       	ldi	r20, 0x02	; 2
     eae:	62 e0       	ldi	r22, 0x02	; 2
     eb0:	82 ea       	ldi	r24, 0xA2	; 162
     eb2:	91 e0       	ldi	r25, 0x01	; 1
     eb4:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <_ZN6ButtonC1Ehhbi>
}

String durationToString(float pulseDuration)
{
	return String(pulseDuration * 1000, 1) + "ms";
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	1f 91       	pop	r17
     ebe:	0f 91       	pop	r16
     ec0:	08 95       	ret

00000ec2 <_GLOBAL__sub_D_u8g>:
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
        _store[i] = 0;
    }
}

template <class T> Average<T>::~Average() {
    free(_store);
     ec6:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <pulseDurationReading+0x1>
     eca:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <pulseDurationReading+0x2>
     ece:	0e 94 b6 18 	call	0x316c	; 0x316c <free>
     ed2:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <throttleReading+0x1>
     ed6:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <throttleReading+0x2>
     eda:	0e 94 b6 18 	call	0x316c	; 0x316c <free>
unsigned long remainingNumberOfPwmCyclesInTheCurrentPulse;
bool heaterIsOn;

const int smoothingBufferSize = 6;
const int numDisplayLines=8;
String displayLines[numDisplayLines];
     ede:	c7 e3       	ldi	r28, 0x37	; 55
     ee0:	d2 e0       	ldi	r29, 0x02	; 2
     ee2:	26 97       	sbiw	r28, 0x06	; 6
     ee4:	ce 01       	movw	r24, r28
     ee6:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN6StringD1Ev>
     eea:	82 e0       	ldi	r24, 0x02	; 2
     eec:	c7 30       	cpi	r28, 0x07	; 7
     eee:	d8 07       	cpc	r29, r24
     ef0:	c1 f7       	brne	.-16     	; 0xee2 <_GLOBAL__sub_D_u8g+0x20>
}

String durationToString(float pulseDuration)
{
	return String(pulseDuration * 1000, 1) + "ms";
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	08 95       	ret

00000ef8 <_ZN19SmoothedAnalogInputC1Ehm>:
#include <Arduino.h>
#include "SmoothedAnalogInput.h"



SmoothedAnalogInput::SmoothedAnalogInput(uint8_t pinNumber, uint32_t bufferSize) : 	dataSet(bufferSize)
     ef8:	cf 92       	push	r12
     efa:	df 92       	push	r13
     efc:	ef 92       	push	r14
     efe:	ff 92       	push	r15
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	ec 01       	movw	r28, r24
     f08:	16 2f       	mov	r17, r22
     f0a:	69 01       	movw	r12, r18
     f0c:	7a 01       	movw	r14, r20
template <class T> int Average<T>::getCount() {
    return _count;
}

template <class T> Average<T>::Average(uint32_t size) {
    _size = size;
     f0e:	2f 87       	std	Y+15, r18	; 0x0f
     f10:	38 8b       	std	Y+16, r19	; 0x10
     f12:	49 8b       	std	Y+17, r20	; 0x11
     f14:	5a 8b       	std	Y+18, r21	; 0x12
    _count = 0;
     f16:	1b 86       	std	Y+11, r1	; 0x0b
     f18:	1c 86       	std	Y+12, r1	; 0x0c
     f1a:	1d 86       	std	Y+13, r1	; 0x0d
     f1c:	1e 86       	std	Y+14, r1	; 0x0e
    _store = (T *)malloc(sizeof(T) * size);
     f1e:	c9 01       	movw	r24, r18
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	0e 94 1e 18 	call	0x303c	; 0x303c <malloc>
     f2c:	89 83       	std	Y+1, r24	; 0x01
     f2e:	9a 83       	std	Y+2, r25	; 0x02
    _position = 0;                                            // track position for circular storage
     f30:	1f 82       	std	Y+7, r1	; 0x07
     f32:	18 86       	std	Y+8, r1	; 0x08
     f34:	19 86       	std	Y+9, r1	; 0x09
     f36:	1a 86       	std	Y+10, r1	; 0x0a
    _sum = 0;                                                 // track sum for fast mean calculation
     f38:	1b 82       	std	Y+3, r1	; 0x03
     f3a:	1c 82       	std	Y+4, r1	; 0x04
     f3c:	1d 82       	std	Y+5, r1	; 0x05
     f3e:	1e 82       	std	Y+6, r1	; 0x06
     f40:	fc 01       	movw	r30, r24
    for (uint32_t i = 0; i < size; i++) {
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	dc 01       	movw	r26, r24
     f48:	c8 16       	cp	r12, r24
     f4a:	d9 06       	cpc	r13, r25
     f4c:	ea 06       	cpc	r14, r26
     f4e:	fb 06       	cpc	r15, r27
     f50:	41 f0       	breq	.+16     	; 0xf62 <_ZN19SmoothedAnalogInputC1Ehm+0x6a>
        _store[i] = 0;
     f52:	11 92       	st	Z+, r1
     f54:	11 92       	st	Z+, r1
     f56:	11 92       	st	Z+, r1
     f58:	11 92       	st	Z+, r1
    _size = size;
    _count = 0;
    _store = (T *)malloc(sizeof(T) * size);
    _position = 0;                                            // track position for circular storage
    _sum = 0;                                                 // track sum for fast mean calculation
    for (uint32_t i = 0; i < size; i++) {
     f5a:	01 96       	adiw	r24, 0x01	; 1
     f5c:	a1 1d       	adc	r26, r1
     f5e:	b1 1d       	adc	r27, r1
     f60:	f3 cf       	rjmp	.-26     	; 0xf48 <_ZN19SmoothedAnalogInputC1Ehm+0x50>
{
	this->pinNumber=pinNumber;
     f62:	18 83       	st	Y, r17
	this->bufferSize=bufferSize;
     f64:	cb 8a       	std	Y+19, r12	; 0x13
     f66:	dc 8a       	std	Y+20, r13	; 0x14
     f68:	ed 8a       	std	Y+21, r14	; 0x15
     f6a:	fe 8a       	std	Y+22, r15	; 0x16
}
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	df 90       	pop	r13
     f78:	cf 90       	pop	r12
     f7a:	08 95       	ret

00000f7c <_ZN19SmoothedAnalogInput5valueEv>:
		update();
	}
}

float SmoothedAnalogInput::value()
{
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	fc 01       	movw	r30, r24
    push(entry);
    return mean();
}

template <class T> float Average<T>::mean() {
    if (_count == 0) {
     f82:	63 85       	ldd	r22, Z+11	; 0x0b
     f84:	74 85       	ldd	r23, Z+12	; 0x0c
     f86:	85 85       	ldd	r24, Z+13	; 0x0d
     f88:	96 85       	ldd	r25, Z+14	; 0x0e
     f8a:	61 15       	cp	r22, r1
     f8c:	71 05       	cpc	r23, r1
     f8e:	81 05       	cpc	r24, r1
     f90:	91 05       	cpc	r25, r1
     f92:	61 f0       	breq	.+24     	; 0xfac <_ZN19SmoothedAnalogInput5valueEv+0x30>
     f94:	ef 01       	movw	r28, r30
        return 0;
    }
    return (float(_sum) / (float)_count);                     // mean calculation based on _sum
     f96:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__floatunsisf>
     f9a:	9b 01       	movw	r18, r22
     f9c:	ac 01       	movw	r20, r24
     f9e:	6b 81       	ldd	r22, Y+3	; 0x03
     fa0:	7c 81       	ldd	r23, Y+4	; 0x04
     fa2:	8d 81       	ldd	r24, Y+5	; 0x05
     fa4:	9e 81       	ldd	r25, Y+6	; 0x06
     fa6:	0e 94 35 09 	call	0x126a	; 0x126a <__divsf3>
     faa:	03 c0       	rjmp	.+6      	; 0xfb2 <_ZN19SmoothedAnalogInput5valueEv+0x36>
    return mean();
}

template <class T> float Average<T>::mean() {
    if (_count == 0) {
        return 0;
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	cb 01       	movw	r24, r22
	return dataSet.mean();
}
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	08 95       	ret

00000fb8 <_ZN19SmoothedAnalogInput6updateEi>:

void SmoothedAnalogInput::update(int numTimes)
{
     fb8:	2f 92       	push	r2
     fba:	3f 92       	push	r3
     fbc:	4f 92       	push	r4
     fbe:	5f 92       	push	r5
     fc0:	6f 92       	push	r6
     fc2:	7f 92       	push	r7
     fc4:	8f 92       	push	r8
     fc6:	9f 92       	push	r9
     fc8:	af 92       	push	r10
     fca:	bf 92       	push	r11
     fcc:	cf 92       	push	r12
     fce:	df 92       	push	r13
     fd0:	ef 92       	push	r14
     fd2:	ff 92       	push	r15
     fd4:	0f 93       	push	r16
     fd6:	1f 93       	push	r17
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	00 d0       	rcall	.+0      	; 0xfde <_ZN19SmoothedAnalogInput6updateEi+0x26>
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <_ZN19SmoothedAnalogInput6updateEi+0x28>
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	9c 83       	std	Y+4, r25	; 0x04
     fe6:	8b 83       	std	Y+3, r24	; 0x03
     fe8:	7a 83       	std	Y+2, r23	; 0x02
     fea:	69 83       	std	Y+1, r22	; 0x01
	for(int i = 0; i<numTimes; i++ )
     fec:	00 e0       	ldi	r16, 0x00	; 0
     fee:	10 e0       	ldi	r17, 0x00	; 0
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	9a 81       	ldd	r25, Y+2	; 0x02
     ff4:	08 17       	cp	r16, r24
     ff6:	19 07       	cpc	r17, r25
     ff8:	0c f0       	brlt	.+2      	; 0xffc <_ZN19SmoothedAnalogInput6updateEi+0x44>
     ffa:	84 c0       	rjmp	.+264    	; 0x1104 <_ZN19SmoothedAnalogInput6updateEi+0x14c>
	{
		dataSet.push(analogRead(pinNumber));
     ffc:	ab 81       	ldd	r26, Y+3	; 0x03
     ffe:	bc 81       	ldd	r27, Y+4	; 0x04
    1000:	8c 91       	ld	r24, X
    1002:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <analogRead>
    1006:	bc 01       	movw	r22, r24
    1008:	99 0f       	add	r25, r25
    100a:	88 0b       	sbc	r24, r24
    100c:	99 0b       	sbc	r25, r25
    100e:	0e 94 df 09 	call	0x13be	; 0x13be <__floatsisf>
    1012:	2b 01       	movw	r4, r22
    1014:	3c 01       	movw	r6, r24
template <class T> Average<T>::~Average() {
    free(_store);
}

template <class T> void Average<T>::push(T entry) {
    if (_count < _size) {                                     // adding new values to array
    1016:	eb 81       	ldd	r30, Y+3	; 0x03
    1018:	fc 81       	ldd	r31, Y+4	; 0x04
    101a:	83 85       	ldd	r24, Z+11	; 0x0b
    101c:	94 85       	ldd	r25, Z+12	; 0x0c
    101e:	a5 85       	ldd	r26, Z+13	; 0x0d
    1020:	b6 85       	ldd	r27, Z+14	; 0x0e
    1022:	87 84       	ldd	r8, Z+15	; 0x0f
    1024:	90 88       	ldd	r9, Z+16	; 0x10
    1026:	a1 88       	ldd	r10, Z+17	; 0x11
    1028:	b2 88       	ldd	r11, Z+18	; 0x12
    102a:	21 80       	ldd	r2, Z+1	; 0x01
    102c:	32 80       	ldd	r3, Z+2	; 0x02
    102e:	88 15       	cp	r24, r8
    1030:	99 05       	cpc	r25, r9
    1032:	aa 05       	cpc	r26, r10
    1034:	bb 05       	cpc	r27, r11
    1036:	40 f4       	brcc	.+16     	; 0x1048 <_ZN19SmoothedAnalogInput6updateEi+0x90>
        _count++;                                             // count number of values in array
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	a1 1d       	adc	r26, r1
    103c:	b1 1d       	adc	r27, r1
    103e:	83 87       	std	Z+11, r24	; 0x0b
    1040:	94 87       	std	Z+12, r25	; 0x0c
    1042:	a5 87       	std	Z+13, r26	; 0x0d
    1044:	b6 87       	std	Z+14, r27	; 0x0e
    1046:	1e c0       	rjmp	.+60     	; 0x1084 <_ZN19SmoothedAnalogInput6updateEi+0xcc>
    }
    else {                                                    // overwriting old values
        _sum = _sum -_store[_position];                       // remove old value from _sum
    1048:	ab 81       	ldd	r26, Y+3	; 0x03
    104a:	bc 81       	ldd	r27, Y+4	; 0x04
    104c:	17 96       	adiw	r26, 0x07	; 7
    104e:	ed 91       	ld	r30, X+
    1050:	fc 91       	ld	r31, X
    1052:	18 97       	sbiw	r26, 0x08	; 8
    1054:	ee 0f       	add	r30, r30
    1056:	ff 1f       	adc	r31, r31
    1058:	ee 0f       	add	r30, r30
    105a:	ff 1f       	adc	r31, r31
    105c:	e2 0d       	add	r30, r2
    105e:	f3 1d       	adc	r31, r3
    1060:	20 81       	ld	r18, Z
    1062:	31 81       	ldd	r19, Z+1	; 0x01
    1064:	42 81       	ldd	r20, Z+2	; 0x02
    1066:	53 81       	ldd	r21, Z+3	; 0x03
    1068:	13 96       	adiw	r26, 0x03	; 3
    106a:	6d 91       	ld	r22, X+
    106c:	7d 91       	ld	r23, X+
    106e:	8d 91       	ld	r24, X+
    1070:	9c 91       	ld	r25, X
    1072:	16 97       	sbiw	r26, 0x06	; 6
    1074:	0e 94 c8 08 	call	0x1190	; 0x1190 <__subsf3>
    1078:	eb 81       	ldd	r30, Y+3	; 0x03
    107a:	fc 81       	ldd	r31, Y+4	; 0x04
    107c:	63 83       	std	Z+3, r22	; 0x03
    107e:	74 83       	std	Z+4, r23	; 0x04
    1080:	85 83       	std	Z+5, r24	; 0x05
    1082:	96 83       	std	Z+6, r25	; 0x06
    }
    _store[_position] = entry;                                // store new value in array
    1084:	ab 81       	ldd	r26, Y+3	; 0x03
    1086:	bc 81       	ldd	r27, Y+4	; 0x04
    1088:	17 96       	adiw	r26, 0x07	; 7
    108a:	cd 90       	ld	r12, X+
    108c:	dd 90       	ld	r13, X+
    108e:	ed 90       	ld	r14, X+
    1090:	fc 90       	ld	r15, X
    1092:	1a 97       	sbiw	r26, 0x0a	; 10
    1094:	c6 01       	movw	r24, r12
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	f1 01       	movw	r30, r2
    10a0:	e8 0f       	add	r30, r24
    10a2:	f9 1f       	adc	r31, r25
    10a4:	40 82       	st	Z, r4
    10a6:	51 82       	std	Z+1, r5	; 0x01
    10a8:	62 82       	std	Z+2, r6	; 0x02
    10aa:	73 82       	std	Z+3, r7	; 0x03
    _sum += entry;                                            // add the new value to _sum
    10ac:	a3 01       	movw	r20, r6
    10ae:	92 01       	movw	r18, r4
    10b0:	13 96       	adiw	r26, 0x03	; 3
    10b2:	6d 91       	ld	r22, X+
    10b4:	7d 91       	ld	r23, X+
    10b6:	8d 91       	ld	r24, X+
    10b8:	9c 91       	ld	r25, X
    10ba:	16 97       	sbiw	r26, 0x06	; 6
    10bc:	0e 94 c9 08 	call	0x1192	; 0x1192 <__addsf3>
    10c0:	eb 81       	ldd	r30, Y+3	; 0x03
    10c2:	fc 81       	ldd	r31, Y+4	; 0x04
    10c4:	63 83       	std	Z+3, r22	; 0x03
    10c6:	74 83       	std	Z+4, r23	; 0x04
    10c8:	85 83       	std	Z+5, r24	; 0x05
    10ca:	96 83       	std	Z+6, r25	; 0x06
    _position += 1;                                           // increment the position counter
    10cc:	ff ef       	ldi	r31, 0xFF	; 255
    10ce:	cf 1a       	sub	r12, r31
    10d0:	df 0a       	sbc	r13, r31
    10d2:	ef 0a       	sbc	r14, r31
    10d4:	ff 0a       	sbc	r15, r31
    if (_position >= _size) _position = 0;                    // loop the position counter
    10d6:	c8 14       	cp	r12, r8
    10d8:	d9 04       	cpc	r13, r9
    10da:	ea 04       	cpc	r14, r10
    10dc:	fb 04       	cpc	r15, r11
    10de:	48 f4       	brcc	.+18     	; 0x10f2 <_ZN19SmoothedAnalogInput6updateEi+0x13a>
    else {                                                    // overwriting old values
        _sum = _sum -_store[_position];                       // remove old value from _sum
    }
    _store[_position] = entry;                                // store new value in array
    _sum += entry;                                            // add the new value to _sum
    _position += 1;                                           // increment the position counter
    10e0:	ab 81       	ldd	r26, Y+3	; 0x03
    10e2:	bc 81       	ldd	r27, Y+4	; 0x04
    10e4:	17 96       	adiw	r26, 0x07	; 7
    10e6:	cd 92       	st	X+, r12
    10e8:	dd 92       	st	X+, r13
    10ea:	ed 92       	st	X+, r14
    10ec:	fc 92       	st	X, r15
    10ee:	1a 97       	sbiw	r26, 0x0a	; 10
    10f0:	06 c0       	rjmp	.+12     	; 0x10fe <_ZN19SmoothedAnalogInput6updateEi+0x146>
    if (_position >= _size) _position = 0;                    // loop the position counter
    10f2:	eb 81       	ldd	r30, Y+3	; 0x03
    10f4:	fc 81       	ldd	r31, Y+4	; 0x04
    10f6:	17 82       	std	Z+7, r1	; 0x07
    10f8:	10 86       	std	Z+8, r1	; 0x08
    10fa:	11 86       	std	Z+9, r1	; 0x09
    10fc:	12 86       	std	Z+10, r1	; 0x0a
	return dataSet.mean();
}

void SmoothedAnalogInput::update(int numTimes)
{
	for(int i = 0; i<numTimes; i++ )
    10fe:	0f 5f       	subi	r16, 0xFF	; 255
    1100:	1f 4f       	sbci	r17, 0xFF	; 255
    1102:	76 cf       	rjmp	.-276    	; 0xff0 <_ZN19SmoothedAnalogInput6updateEi+0x38>
	{
		dataSet.push(analogRead(pinNumber));
	}
}
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	1f 91       	pop	r17
    1112:	0f 91       	pop	r16
    1114:	ff 90       	pop	r15
    1116:	ef 90       	pop	r14
    1118:	df 90       	pop	r13
    111a:	cf 90       	pop	r12
    111c:	bf 90       	pop	r11
    111e:	af 90       	pop	r10
    1120:	9f 90       	pop	r9
    1122:	8f 90       	pop	r8
    1124:	7f 90       	pop	r7
    1126:	6f 90       	pop	r6
    1128:	5f 90       	pop	r5
    112a:	4f 90       	pop	r4
    112c:	3f 90       	pop	r3
    112e:	2f 90       	pop	r2
    1130:	08 95       	ret

00001132 <_ZN19SmoothedAnalogInput6updateEv>:
void SmoothedAnalogInput::update()
{
	update(1);
    1132:	61 e0       	ldi	r22, 0x01	; 1
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <_ZN19SmoothedAnalogInput6updateEi>

0000113a <_ZN19SmoothedAnalogInput4initEv>:
	this->pinNumber=pinNumber;
	this->bufferSize=bufferSize;
}

void SmoothedAnalogInput::init()
{
    113a:	cf 92       	push	r12
    113c:	df 92       	push	r13
    113e:	ef 92       	push	r14
    1140:	ff 92       	push	r15
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	ec 01       	movw	r28, r24
	pinMode(pinNumber, INPUT);
    1148:	60 e0       	ldi	r22, 0x00	; 0
    114a:	88 81       	ld	r24, Y
    114c:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <pinMode>
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	dc 01       	movw	r26, r24
    1156:	6c 01       	movw	r12, r24
    1158:	7d 01       	movw	r14, r26
    115a:	2f ef       	ldi	r18, 0xFF	; 255
    115c:	c2 1a       	sub	r12, r18
    115e:	d2 0a       	sbc	r13, r18
    1160:	e2 0a       	sbc	r14, r18
    1162:	f2 0a       	sbc	r15, r18
	for(int i=0;i<bufferSize;i++)
    1164:	4b 89       	ldd	r20, Y+19	; 0x13
    1166:	5c 89       	ldd	r21, Y+20	; 0x14
    1168:	6d 89       	ldd	r22, Y+21	; 0x15
    116a:	7e 89       	ldd	r23, Y+22	; 0x16
    116c:	84 17       	cp	r24, r20
    116e:	95 07       	cpc	r25, r21
    1170:	a6 07       	cpc	r26, r22
    1172:	b7 07       	cpc	r27, r23
    1174:	30 f4       	brcc	.+12     	; 0x1182 <_ZN19SmoothedAnalogInput4initEv+0x48>
	{
		update();
    1176:	ce 01       	movw	r24, r28
    1178:	0e 94 99 08 	call	0x1132	; 0x1132 <_ZN19SmoothedAnalogInput6updateEv>
}

void SmoothedAnalogInput::init()
{
	pinMode(pinNumber, INPUT);
	for(int i=0;i<bufferSize;i++)
    117c:	d7 01       	movw	r26, r14
    117e:	c6 01       	movw	r24, r12
    1180:	ea cf       	rjmp	.-44     	; 0x1156 <_ZN19SmoothedAnalogInput4initEv+0x1c>
	{
		update();
	}
}
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	ff 90       	pop	r15
    1188:	ef 90       	pop	r14
    118a:	df 90       	pop	r13
    118c:	cf 90       	pop	r12
    118e:	08 95       	ret

00001190 <__subsf3>:
    1190:	50 58       	subi	r21, 0x80	; 128

00001192 <__addsf3>:
    1192:	bb 27       	eor	r27, r27
    1194:	aa 27       	eor	r26, r26
    1196:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__addsf3x>
    119a:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <__fp_round>
    119e:	0e 94 23 0a 	call	0x1446	; 0x1446 <__fp_pscA>
    11a2:	38 f0       	brcs	.+14     	; 0x11b2 <__addsf3+0x20>
    11a4:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__fp_pscB>
    11a8:	20 f0       	brcs	.+8      	; 0x11b2 <__addsf3+0x20>
    11aa:	39 f4       	brne	.+14     	; 0x11ba <__addsf3+0x28>
    11ac:	9f 3f       	cpi	r25, 0xFF	; 255
    11ae:	19 f4       	brne	.+6      	; 0x11b6 <__addsf3+0x24>
    11b0:	26 f4       	brtc	.+8      	; 0x11ba <__addsf3+0x28>
    11b2:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <__fp_nan>
    11b6:	0e f4       	brtc	.+2      	; 0x11ba <__addsf3+0x28>
    11b8:	e0 95       	com	r30
    11ba:	e7 fb       	bst	r30, 7
    11bc:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__fp_inf>

000011c0 <__addsf3x>:
    11c0:	e9 2f       	mov	r30, r25
    11c2:	0e 94 42 0a 	call	0x1484	; 0x1484 <__fp_split3>
    11c6:	58 f3       	brcs	.-42     	; 0x119e <__addsf3+0xc>
    11c8:	ba 17       	cp	r27, r26
    11ca:	62 07       	cpc	r22, r18
    11cc:	73 07       	cpc	r23, r19
    11ce:	84 07       	cpc	r24, r20
    11d0:	95 07       	cpc	r25, r21
    11d2:	20 f0       	brcs	.+8      	; 0x11dc <__addsf3x+0x1c>
    11d4:	79 f4       	brne	.+30     	; 0x11f4 <__addsf3x+0x34>
    11d6:	a6 f5       	brtc	.+104    	; 0x1240 <__addsf3x+0x80>
    11d8:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__fp_zero>
    11dc:	0e f4       	brtc	.+2      	; 0x11e0 <__addsf3x+0x20>
    11de:	e0 95       	com	r30
    11e0:	0b 2e       	mov	r0, r27
    11e2:	ba 2f       	mov	r27, r26
    11e4:	a0 2d       	mov	r26, r0
    11e6:	0b 01       	movw	r0, r22
    11e8:	b9 01       	movw	r22, r18
    11ea:	90 01       	movw	r18, r0
    11ec:	0c 01       	movw	r0, r24
    11ee:	ca 01       	movw	r24, r20
    11f0:	a0 01       	movw	r20, r0
    11f2:	11 24       	eor	r1, r1
    11f4:	ff 27       	eor	r31, r31
    11f6:	59 1b       	sub	r21, r25
    11f8:	99 f0       	breq	.+38     	; 0x1220 <__addsf3x+0x60>
    11fa:	59 3f       	cpi	r21, 0xF9	; 249
    11fc:	50 f4       	brcc	.+20     	; 0x1212 <__addsf3x+0x52>
    11fe:	50 3e       	cpi	r21, 0xE0	; 224
    1200:	68 f1       	brcs	.+90     	; 0x125c <__addsf3x+0x9c>
    1202:	1a 16       	cp	r1, r26
    1204:	f0 40       	sbci	r31, 0x00	; 0
    1206:	a2 2f       	mov	r26, r18
    1208:	23 2f       	mov	r18, r19
    120a:	34 2f       	mov	r19, r20
    120c:	44 27       	eor	r20, r20
    120e:	58 5f       	subi	r21, 0xF8	; 248
    1210:	f3 cf       	rjmp	.-26     	; 0x11f8 <__addsf3x+0x38>
    1212:	46 95       	lsr	r20
    1214:	37 95       	ror	r19
    1216:	27 95       	ror	r18
    1218:	a7 95       	ror	r26
    121a:	f0 40       	sbci	r31, 0x00	; 0
    121c:	53 95       	inc	r21
    121e:	c9 f7       	brne	.-14     	; 0x1212 <__addsf3x+0x52>
    1220:	7e f4       	brtc	.+30     	; 0x1240 <__addsf3x+0x80>
    1222:	1f 16       	cp	r1, r31
    1224:	ba 0b       	sbc	r27, r26
    1226:	62 0b       	sbc	r22, r18
    1228:	73 0b       	sbc	r23, r19
    122a:	84 0b       	sbc	r24, r20
    122c:	ba f0       	brmi	.+46     	; 0x125c <__addsf3x+0x9c>
    122e:	91 50       	subi	r25, 0x01	; 1
    1230:	a1 f0       	breq	.+40     	; 0x125a <__addsf3x+0x9a>
    1232:	ff 0f       	add	r31, r31
    1234:	bb 1f       	adc	r27, r27
    1236:	66 1f       	adc	r22, r22
    1238:	77 1f       	adc	r23, r23
    123a:	88 1f       	adc	r24, r24
    123c:	c2 f7       	brpl	.-16     	; 0x122e <__addsf3x+0x6e>
    123e:	0e c0       	rjmp	.+28     	; 0x125c <__addsf3x+0x9c>
    1240:	ba 0f       	add	r27, r26
    1242:	62 1f       	adc	r22, r18
    1244:	73 1f       	adc	r23, r19
    1246:	84 1f       	adc	r24, r20
    1248:	48 f4       	brcc	.+18     	; 0x125c <__addsf3x+0x9c>
    124a:	87 95       	ror	r24
    124c:	77 95       	ror	r23
    124e:	67 95       	ror	r22
    1250:	b7 95       	ror	r27
    1252:	f7 95       	ror	r31
    1254:	9e 3f       	cpi	r25, 0xFE	; 254
    1256:	08 f0       	brcs	.+2      	; 0x125a <__addsf3x+0x9a>
    1258:	b0 cf       	rjmp	.-160    	; 0x11ba <__addsf3+0x28>
    125a:	93 95       	inc	r25
    125c:	88 0f       	add	r24, r24
    125e:	08 f0       	brcs	.+2      	; 0x1262 <__addsf3x+0xa2>
    1260:	99 27       	eor	r25, r25
    1262:	ee 0f       	add	r30, r30
    1264:	97 95       	ror	r25
    1266:	87 95       	ror	r24
    1268:	08 95       	ret

0000126a <__divsf3>:
    126a:	0e 94 49 09 	call	0x1292	; 0x1292 <__divsf3x>
    126e:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <__fp_round>
    1272:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__fp_pscB>
    1276:	58 f0       	brcs	.+22     	; 0x128e <__divsf3+0x24>
    1278:	0e 94 23 0a 	call	0x1446	; 0x1446 <__fp_pscA>
    127c:	40 f0       	brcs	.+16     	; 0x128e <__divsf3+0x24>
    127e:	29 f4       	brne	.+10     	; 0x128a <__divsf3+0x20>
    1280:	5f 3f       	cpi	r21, 0xFF	; 255
    1282:	29 f0       	breq	.+10     	; 0x128e <__divsf3+0x24>
    1284:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__fp_inf>
    1288:	51 11       	cpse	r21, r1
    128a:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <__fp_szero>
    128e:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <__fp_nan>

00001292 <__divsf3x>:
    1292:	0e 94 42 0a 	call	0x1484	; 0x1484 <__fp_split3>
    1296:	68 f3       	brcs	.-38     	; 0x1272 <__divsf3+0x8>

00001298 <__divsf3_pse>:
    1298:	99 23       	and	r25, r25
    129a:	b1 f3       	breq	.-20     	; 0x1288 <__divsf3+0x1e>
    129c:	55 23       	and	r21, r21
    129e:	91 f3       	breq	.-28     	; 0x1284 <__divsf3+0x1a>
    12a0:	95 1b       	sub	r25, r21
    12a2:	55 0b       	sbc	r21, r21
    12a4:	bb 27       	eor	r27, r27
    12a6:	aa 27       	eor	r26, r26
    12a8:	62 17       	cp	r22, r18
    12aa:	73 07       	cpc	r23, r19
    12ac:	84 07       	cpc	r24, r20
    12ae:	38 f0       	brcs	.+14     	; 0x12be <__divsf3_pse+0x26>
    12b0:	9f 5f       	subi	r25, 0xFF	; 255
    12b2:	5f 4f       	sbci	r21, 0xFF	; 255
    12b4:	22 0f       	add	r18, r18
    12b6:	33 1f       	adc	r19, r19
    12b8:	44 1f       	adc	r20, r20
    12ba:	aa 1f       	adc	r26, r26
    12bc:	a9 f3       	breq	.-22     	; 0x12a8 <__divsf3_pse+0x10>
    12be:	35 d0       	rcall	.+106    	; 0x132a <__divsf3_pse+0x92>
    12c0:	0e 2e       	mov	r0, r30
    12c2:	3a f0       	brmi	.+14     	; 0x12d2 <__divsf3_pse+0x3a>
    12c4:	e0 e8       	ldi	r30, 0x80	; 128
    12c6:	32 d0       	rcall	.+100    	; 0x132c <__divsf3_pse+0x94>
    12c8:	91 50       	subi	r25, 0x01	; 1
    12ca:	50 40       	sbci	r21, 0x00	; 0
    12cc:	e6 95       	lsr	r30
    12ce:	00 1c       	adc	r0, r0
    12d0:	ca f7       	brpl	.-14     	; 0x12c4 <__divsf3_pse+0x2c>
    12d2:	2b d0       	rcall	.+86     	; 0x132a <__divsf3_pse+0x92>
    12d4:	fe 2f       	mov	r31, r30
    12d6:	29 d0       	rcall	.+82     	; 0x132a <__divsf3_pse+0x92>
    12d8:	66 0f       	add	r22, r22
    12da:	77 1f       	adc	r23, r23
    12dc:	88 1f       	adc	r24, r24
    12de:	bb 1f       	adc	r27, r27
    12e0:	26 17       	cp	r18, r22
    12e2:	37 07       	cpc	r19, r23
    12e4:	48 07       	cpc	r20, r24
    12e6:	ab 07       	cpc	r26, r27
    12e8:	b0 e8       	ldi	r27, 0x80	; 128
    12ea:	09 f0       	breq	.+2      	; 0x12ee <__divsf3_pse+0x56>
    12ec:	bb 0b       	sbc	r27, r27
    12ee:	80 2d       	mov	r24, r0
    12f0:	bf 01       	movw	r22, r30
    12f2:	ff 27       	eor	r31, r31
    12f4:	93 58       	subi	r25, 0x83	; 131
    12f6:	5f 4f       	sbci	r21, 0xFF	; 255
    12f8:	3a f0       	brmi	.+14     	; 0x1308 <__divsf3_pse+0x70>
    12fa:	9e 3f       	cpi	r25, 0xFE	; 254
    12fc:	51 05       	cpc	r21, r1
    12fe:	78 f0       	brcs	.+30     	; 0x131e <__divsf3_pse+0x86>
    1300:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__fp_inf>
    1304:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <__fp_szero>
    1308:	5f 3f       	cpi	r21, 0xFF	; 255
    130a:	e4 f3       	brlt	.-8      	; 0x1304 <__divsf3_pse+0x6c>
    130c:	98 3e       	cpi	r25, 0xE8	; 232
    130e:	d4 f3       	brlt	.-12     	; 0x1304 <__divsf3_pse+0x6c>
    1310:	86 95       	lsr	r24
    1312:	77 95       	ror	r23
    1314:	67 95       	ror	r22
    1316:	b7 95       	ror	r27
    1318:	f7 95       	ror	r31
    131a:	9f 5f       	subi	r25, 0xFF	; 255
    131c:	c9 f7       	brne	.-14     	; 0x1310 <__divsf3_pse+0x78>
    131e:	88 0f       	add	r24, r24
    1320:	91 1d       	adc	r25, r1
    1322:	96 95       	lsr	r25
    1324:	87 95       	ror	r24
    1326:	97 f9       	bld	r25, 7
    1328:	08 95       	ret
    132a:	e1 e0       	ldi	r30, 0x01	; 1
    132c:	66 0f       	add	r22, r22
    132e:	77 1f       	adc	r23, r23
    1330:	88 1f       	adc	r24, r24
    1332:	bb 1f       	adc	r27, r27
    1334:	62 17       	cp	r22, r18
    1336:	73 07       	cpc	r23, r19
    1338:	84 07       	cpc	r24, r20
    133a:	ba 07       	cpc	r27, r26
    133c:	20 f0       	brcs	.+8      	; 0x1346 <__divsf3_pse+0xae>
    133e:	62 1b       	sub	r22, r18
    1340:	73 0b       	sbc	r23, r19
    1342:	84 0b       	sbc	r24, r20
    1344:	ba 0b       	sbc	r27, r26
    1346:	ee 1f       	adc	r30, r30
    1348:	88 f7       	brcc	.-30     	; 0x132c <__divsf3_pse+0x94>
    134a:	e0 95       	com	r30
    134c:	08 95       	ret

0000134e <__fixsfsi>:
    134e:	0e 94 ae 09 	call	0x135c	; 0x135c <__fixunssfsi>
    1352:	68 94       	set
    1354:	b1 11       	cpse	r27, r1
    1356:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <__fp_szero>
    135a:	08 95       	ret

0000135c <__fixunssfsi>:
    135c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fp_splitA>
    1360:	88 f0       	brcs	.+34     	; 0x1384 <__fixunssfsi+0x28>
    1362:	9f 57       	subi	r25, 0x7F	; 127
    1364:	98 f0       	brcs	.+38     	; 0x138c <__fixunssfsi+0x30>
    1366:	b9 2f       	mov	r27, r25
    1368:	99 27       	eor	r25, r25
    136a:	b7 51       	subi	r27, 0x17	; 23
    136c:	b0 f0       	brcs	.+44     	; 0x139a <__fixunssfsi+0x3e>
    136e:	e1 f0       	breq	.+56     	; 0x13a8 <__fixunssfsi+0x4c>
    1370:	66 0f       	add	r22, r22
    1372:	77 1f       	adc	r23, r23
    1374:	88 1f       	adc	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	1a f0       	brmi	.+6      	; 0x1380 <__fixunssfsi+0x24>
    137a:	ba 95       	dec	r27
    137c:	c9 f7       	brne	.-14     	; 0x1370 <__fixunssfsi+0x14>
    137e:	14 c0       	rjmp	.+40     	; 0x13a8 <__fixunssfsi+0x4c>
    1380:	b1 30       	cpi	r27, 0x01	; 1
    1382:	91 f0       	breq	.+36     	; 0x13a8 <__fixunssfsi+0x4c>
    1384:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__fp_zero>
    1388:	b1 e0       	ldi	r27, 0x01	; 1
    138a:	08 95       	ret
    138c:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__fp_zero>
    1390:	67 2f       	mov	r22, r23
    1392:	78 2f       	mov	r23, r24
    1394:	88 27       	eor	r24, r24
    1396:	b8 5f       	subi	r27, 0xF8	; 248
    1398:	39 f0       	breq	.+14     	; 0x13a8 <__fixunssfsi+0x4c>
    139a:	b9 3f       	cpi	r27, 0xF9	; 249
    139c:	cc f3       	brlt	.-14     	; 0x1390 <__fixunssfsi+0x34>
    139e:	86 95       	lsr	r24
    13a0:	77 95       	ror	r23
    13a2:	67 95       	ror	r22
    13a4:	b3 95       	inc	r27
    13a6:	d9 f7       	brne	.-10     	; 0x139e <__fixunssfsi+0x42>
    13a8:	3e f4       	brtc	.+14     	; 0x13b8 <__fixunssfsi+0x5c>
    13aa:	90 95       	com	r25
    13ac:	80 95       	com	r24
    13ae:	70 95       	com	r23
    13b0:	61 95       	neg	r22
    13b2:	7f 4f       	sbci	r23, 0xFF	; 255
    13b4:	8f 4f       	sbci	r24, 0xFF	; 255
    13b6:	9f 4f       	sbci	r25, 0xFF	; 255
    13b8:	08 95       	ret

000013ba <__floatunsisf>:
    13ba:	e8 94       	clt
    13bc:	09 c0       	rjmp	.+18     	; 0x13d0 <__floatsisf+0x12>

000013be <__floatsisf>:
    13be:	97 fb       	bst	r25, 7
    13c0:	3e f4       	brtc	.+14     	; 0x13d0 <__floatsisf+0x12>
    13c2:	90 95       	com	r25
    13c4:	80 95       	com	r24
    13c6:	70 95       	com	r23
    13c8:	61 95       	neg	r22
    13ca:	7f 4f       	sbci	r23, 0xFF	; 255
    13cc:	8f 4f       	sbci	r24, 0xFF	; 255
    13ce:	9f 4f       	sbci	r25, 0xFF	; 255
    13d0:	99 23       	and	r25, r25
    13d2:	a9 f0       	breq	.+42     	; 0x13fe <__floatsisf+0x40>
    13d4:	f9 2f       	mov	r31, r25
    13d6:	96 e9       	ldi	r25, 0x96	; 150
    13d8:	bb 27       	eor	r27, r27
    13da:	93 95       	inc	r25
    13dc:	f6 95       	lsr	r31
    13de:	87 95       	ror	r24
    13e0:	77 95       	ror	r23
    13e2:	67 95       	ror	r22
    13e4:	b7 95       	ror	r27
    13e6:	f1 11       	cpse	r31, r1
    13e8:	f8 cf       	rjmp	.-16     	; 0x13da <__floatsisf+0x1c>
    13ea:	fa f4       	brpl	.+62     	; 0x142a <__floatsisf+0x6c>
    13ec:	bb 0f       	add	r27, r27
    13ee:	11 f4       	brne	.+4      	; 0x13f4 <__floatsisf+0x36>
    13f0:	60 ff       	sbrs	r22, 0
    13f2:	1b c0       	rjmp	.+54     	; 0x142a <__floatsisf+0x6c>
    13f4:	6f 5f       	subi	r22, 0xFF	; 255
    13f6:	7f 4f       	sbci	r23, 0xFF	; 255
    13f8:	8f 4f       	sbci	r24, 0xFF	; 255
    13fa:	9f 4f       	sbci	r25, 0xFF	; 255
    13fc:	16 c0       	rjmp	.+44     	; 0x142a <__floatsisf+0x6c>
    13fe:	88 23       	and	r24, r24
    1400:	11 f0       	breq	.+4      	; 0x1406 <__floatsisf+0x48>
    1402:	96 e9       	ldi	r25, 0x96	; 150
    1404:	11 c0       	rjmp	.+34     	; 0x1428 <__floatsisf+0x6a>
    1406:	77 23       	and	r23, r23
    1408:	21 f0       	breq	.+8      	; 0x1412 <__floatsisf+0x54>
    140a:	9e e8       	ldi	r25, 0x8E	; 142
    140c:	87 2f       	mov	r24, r23
    140e:	76 2f       	mov	r23, r22
    1410:	05 c0       	rjmp	.+10     	; 0x141c <__floatsisf+0x5e>
    1412:	66 23       	and	r22, r22
    1414:	71 f0       	breq	.+28     	; 0x1432 <__floatsisf+0x74>
    1416:	96 e8       	ldi	r25, 0x86	; 134
    1418:	86 2f       	mov	r24, r22
    141a:	70 e0       	ldi	r23, 0x00	; 0
    141c:	60 e0       	ldi	r22, 0x00	; 0
    141e:	2a f0       	brmi	.+10     	; 0x142a <__floatsisf+0x6c>
    1420:	9a 95       	dec	r25
    1422:	66 0f       	add	r22, r22
    1424:	77 1f       	adc	r23, r23
    1426:	88 1f       	adc	r24, r24
    1428:	da f7       	brpl	.-10     	; 0x1420 <__floatsisf+0x62>
    142a:	88 0f       	add	r24, r24
    142c:	96 95       	lsr	r25
    142e:	87 95       	ror	r24
    1430:	97 f9       	bld	r25, 7
    1432:	08 95       	ret

00001434 <__fp_inf>:
    1434:	97 f9       	bld	r25, 7
    1436:	9f 67       	ori	r25, 0x7F	; 127
    1438:	80 e8       	ldi	r24, 0x80	; 128
    143a:	70 e0       	ldi	r23, 0x00	; 0
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	08 95       	ret

00001440 <__fp_nan>:
    1440:	9f ef       	ldi	r25, 0xFF	; 255
    1442:	80 ec       	ldi	r24, 0xC0	; 192
    1444:	08 95       	ret

00001446 <__fp_pscA>:
    1446:	00 24       	eor	r0, r0
    1448:	0a 94       	dec	r0
    144a:	16 16       	cp	r1, r22
    144c:	17 06       	cpc	r1, r23
    144e:	18 06       	cpc	r1, r24
    1450:	09 06       	cpc	r0, r25
    1452:	08 95       	ret

00001454 <__fp_pscB>:
    1454:	00 24       	eor	r0, r0
    1456:	0a 94       	dec	r0
    1458:	12 16       	cp	r1, r18
    145a:	13 06       	cpc	r1, r19
    145c:	14 06       	cpc	r1, r20
    145e:	05 06       	cpc	r0, r21
    1460:	08 95       	ret

00001462 <__fp_round>:
    1462:	09 2e       	mov	r0, r25
    1464:	03 94       	inc	r0
    1466:	00 0c       	add	r0, r0
    1468:	11 f4       	brne	.+4      	; 0x146e <__fp_round+0xc>
    146a:	88 23       	and	r24, r24
    146c:	52 f0       	brmi	.+20     	; 0x1482 <__fp_round+0x20>
    146e:	bb 0f       	add	r27, r27
    1470:	40 f4       	brcc	.+16     	; 0x1482 <__fp_round+0x20>
    1472:	bf 2b       	or	r27, r31
    1474:	11 f4       	brne	.+4      	; 0x147a <__fp_round+0x18>
    1476:	60 ff       	sbrs	r22, 0
    1478:	04 c0       	rjmp	.+8      	; 0x1482 <__fp_round+0x20>
    147a:	6f 5f       	subi	r22, 0xFF	; 255
    147c:	7f 4f       	sbci	r23, 0xFF	; 255
    147e:	8f 4f       	sbci	r24, 0xFF	; 255
    1480:	9f 4f       	sbci	r25, 0xFF	; 255
    1482:	08 95       	ret

00001484 <__fp_split3>:
    1484:	57 fd       	sbrc	r21, 7
    1486:	90 58       	subi	r25, 0x80	; 128
    1488:	44 0f       	add	r20, r20
    148a:	55 1f       	adc	r21, r21
    148c:	59 f0       	breq	.+22     	; 0x14a4 <__fp_splitA+0x10>
    148e:	5f 3f       	cpi	r21, 0xFF	; 255
    1490:	71 f0       	breq	.+28     	; 0x14ae <__fp_splitA+0x1a>
    1492:	47 95       	ror	r20

00001494 <__fp_splitA>:
    1494:	88 0f       	add	r24, r24
    1496:	97 fb       	bst	r25, 7
    1498:	99 1f       	adc	r25, r25
    149a:	61 f0       	breq	.+24     	; 0x14b4 <__fp_splitA+0x20>
    149c:	9f 3f       	cpi	r25, 0xFF	; 255
    149e:	79 f0       	breq	.+30     	; 0x14be <__fp_splitA+0x2a>
    14a0:	87 95       	ror	r24
    14a2:	08 95       	ret
    14a4:	12 16       	cp	r1, r18
    14a6:	13 06       	cpc	r1, r19
    14a8:	14 06       	cpc	r1, r20
    14aa:	55 1f       	adc	r21, r21
    14ac:	f2 cf       	rjmp	.-28     	; 0x1492 <__fp_split3+0xe>
    14ae:	46 95       	lsr	r20
    14b0:	f1 df       	rcall	.-30     	; 0x1494 <__fp_splitA>
    14b2:	08 c0       	rjmp	.+16     	; 0x14c4 <__fp_splitA+0x30>
    14b4:	16 16       	cp	r1, r22
    14b6:	17 06       	cpc	r1, r23
    14b8:	18 06       	cpc	r1, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	f1 cf       	rjmp	.-30     	; 0x14a0 <__fp_splitA+0xc>
    14be:	86 95       	lsr	r24
    14c0:	71 05       	cpc	r23, r1
    14c2:	61 05       	cpc	r22, r1
    14c4:	08 94       	sec
    14c6:	08 95       	ret

000014c8 <__fp_zero>:
    14c8:	e8 94       	clt

000014ca <__fp_szero>:
    14ca:	bb 27       	eor	r27, r27
    14cc:	66 27       	eor	r22, r22
    14ce:	77 27       	eor	r23, r23
    14d0:	cb 01       	movw	r24, r22
    14d2:	97 f9       	bld	r25, 7
    14d4:	08 95       	ret

000014d6 <__gesf2>:
    14d6:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__fp_cmp>
    14da:	08 f4       	brcc	.+2      	; 0x14de <__gesf2+0x8>
    14dc:	8f ef       	ldi	r24, 0xFF	; 255
    14de:	08 95       	ret

000014e0 <__mulsf3>:
    14e0:	0e 94 83 0a 	call	0x1506	; 0x1506 <__mulsf3x>
    14e4:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <__fp_round>
    14e8:	0e 94 23 0a 	call	0x1446	; 0x1446 <__fp_pscA>
    14ec:	38 f0       	brcs	.+14     	; 0x14fc <__mulsf3+0x1c>
    14ee:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__fp_pscB>
    14f2:	20 f0       	brcs	.+8      	; 0x14fc <__mulsf3+0x1c>
    14f4:	95 23       	and	r25, r21
    14f6:	11 f0       	breq	.+4      	; 0x14fc <__mulsf3+0x1c>
    14f8:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__fp_inf>
    14fc:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <__fp_nan>
    1500:	11 24       	eor	r1, r1
    1502:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <__fp_szero>

00001506 <__mulsf3x>:
    1506:	0e 94 42 0a 	call	0x1484	; 0x1484 <__fp_split3>
    150a:	70 f3       	brcs	.-36     	; 0x14e8 <__mulsf3+0x8>

0000150c <__mulsf3_pse>:
    150c:	95 9f       	mul	r25, r21
    150e:	c1 f3       	breq	.-16     	; 0x1500 <__mulsf3+0x20>
    1510:	95 0f       	add	r25, r21
    1512:	50 e0       	ldi	r21, 0x00	; 0
    1514:	55 1f       	adc	r21, r21
    1516:	62 9f       	mul	r22, r18
    1518:	f0 01       	movw	r30, r0
    151a:	72 9f       	mul	r23, r18
    151c:	bb 27       	eor	r27, r27
    151e:	f0 0d       	add	r31, r0
    1520:	b1 1d       	adc	r27, r1
    1522:	63 9f       	mul	r22, r19
    1524:	aa 27       	eor	r26, r26
    1526:	f0 0d       	add	r31, r0
    1528:	b1 1d       	adc	r27, r1
    152a:	aa 1f       	adc	r26, r26
    152c:	64 9f       	mul	r22, r20
    152e:	66 27       	eor	r22, r22
    1530:	b0 0d       	add	r27, r0
    1532:	a1 1d       	adc	r26, r1
    1534:	66 1f       	adc	r22, r22
    1536:	82 9f       	mul	r24, r18
    1538:	22 27       	eor	r18, r18
    153a:	b0 0d       	add	r27, r0
    153c:	a1 1d       	adc	r26, r1
    153e:	62 1f       	adc	r22, r18
    1540:	73 9f       	mul	r23, r19
    1542:	b0 0d       	add	r27, r0
    1544:	a1 1d       	adc	r26, r1
    1546:	62 1f       	adc	r22, r18
    1548:	83 9f       	mul	r24, r19
    154a:	a0 0d       	add	r26, r0
    154c:	61 1d       	adc	r22, r1
    154e:	22 1f       	adc	r18, r18
    1550:	74 9f       	mul	r23, r20
    1552:	33 27       	eor	r19, r19
    1554:	a0 0d       	add	r26, r0
    1556:	61 1d       	adc	r22, r1
    1558:	23 1f       	adc	r18, r19
    155a:	84 9f       	mul	r24, r20
    155c:	60 0d       	add	r22, r0
    155e:	21 1d       	adc	r18, r1
    1560:	82 2f       	mov	r24, r18
    1562:	76 2f       	mov	r23, r22
    1564:	6a 2f       	mov	r22, r26
    1566:	11 24       	eor	r1, r1
    1568:	9f 57       	subi	r25, 0x7F	; 127
    156a:	50 40       	sbci	r21, 0x00	; 0
    156c:	9a f0       	brmi	.+38     	; 0x1594 <__mulsf3_pse+0x88>
    156e:	f1 f0       	breq	.+60     	; 0x15ac <__mulsf3_pse+0xa0>
    1570:	88 23       	and	r24, r24
    1572:	4a f0       	brmi	.+18     	; 0x1586 <__mulsf3_pse+0x7a>
    1574:	ee 0f       	add	r30, r30
    1576:	ff 1f       	adc	r31, r31
    1578:	bb 1f       	adc	r27, r27
    157a:	66 1f       	adc	r22, r22
    157c:	77 1f       	adc	r23, r23
    157e:	88 1f       	adc	r24, r24
    1580:	91 50       	subi	r25, 0x01	; 1
    1582:	50 40       	sbci	r21, 0x00	; 0
    1584:	a9 f7       	brne	.-22     	; 0x1570 <__mulsf3_pse+0x64>
    1586:	9e 3f       	cpi	r25, 0xFE	; 254
    1588:	51 05       	cpc	r21, r1
    158a:	80 f0       	brcs	.+32     	; 0x15ac <__mulsf3_pse+0xa0>
    158c:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__fp_inf>
    1590:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <__fp_szero>
    1594:	5f 3f       	cpi	r21, 0xFF	; 255
    1596:	e4 f3       	brlt	.-8      	; 0x1590 <__mulsf3_pse+0x84>
    1598:	98 3e       	cpi	r25, 0xE8	; 232
    159a:	d4 f3       	brlt	.-12     	; 0x1590 <__mulsf3_pse+0x84>
    159c:	86 95       	lsr	r24
    159e:	77 95       	ror	r23
    15a0:	67 95       	ror	r22
    15a2:	b7 95       	ror	r27
    15a4:	f7 95       	ror	r31
    15a6:	e7 95       	ror	r30
    15a8:	9f 5f       	subi	r25, 0xFF	; 255
    15aa:	c1 f7       	brne	.-16     	; 0x159c <__mulsf3_pse+0x90>
    15ac:	fe 2b       	or	r31, r30
    15ae:	88 0f       	add	r24, r24
    15b0:	91 1d       	adc	r25, r1
    15b2:	96 95       	lsr	r25
    15b4:	87 95       	ror	r24
    15b6:	97 f9       	bld	r25, 7
    15b8:	08 95       	ret

000015ba <__fp_cmp>:
    15ba:	99 0f       	add	r25, r25
    15bc:	00 08       	sbc	r0, r0
    15be:	55 0f       	add	r21, r21
    15c0:	aa 0b       	sbc	r26, r26
    15c2:	e0 e8       	ldi	r30, 0x80	; 128
    15c4:	fe ef       	ldi	r31, 0xFE	; 254
    15c6:	16 16       	cp	r1, r22
    15c8:	17 06       	cpc	r1, r23
    15ca:	e8 07       	cpc	r30, r24
    15cc:	f9 07       	cpc	r31, r25
    15ce:	c0 f0       	brcs	.+48     	; 0x1600 <__fp_cmp+0x46>
    15d0:	12 16       	cp	r1, r18
    15d2:	13 06       	cpc	r1, r19
    15d4:	e4 07       	cpc	r30, r20
    15d6:	f5 07       	cpc	r31, r21
    15d8:	98 f0       	brcs	.+38     	; 0x1600 <__fp_cmp+0x46>
    15da:	62 1b       	sub	r22, r18
    15dc:	73 0b       	sbc	r23, r19
    15de:	84 0b       	sbc	r24, r20
    15e0:	95 0b       	sbc	r25, r21
    15e2:	39 f4       	brne	.+14     	; 0x15f2 <__fp_cmp+0x38>
    15e4:	0a 26       	eor	r0, r26
    15e6:	61 f0       	breq	.+24     	; 0x1600 <__fp_cmp+0x46>
    15e8:	23 2b       	or	r18, r19
    15ea:	24 2b       	or	r18, r20
    15ec:	25 2b       	or	r18, r21
    15ee:	21 f4       	brne	.+8      	; 0x15f8 <__fp_cmp+0x3e>
    15f0:	08 95       	ret
    15f2:	0a 26       	eor	r0, r26
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <__fp_cmp+0x3e>
    15f6:	a1 40       	sbci	r26, 0x01	; 1
    15f8:	a6 95       	lsr	r26
    15fa:	8f ef       	ldi	r24, 0xFF	; 255
    15fc:	81 1d       	adc	r24, r1
    15fe:	81 1d       	adc	r24, r1
    1600:	08 95       	ret

00001602 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1602:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1604:	91 8d       	ldd	r25, Z+25	; 0x19
    1606:	22 8d       	ldd	r18, Z+26	; 0x1a
    1608:	89 2f       	mov	r24, r25
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	80 5c       	subi	r24, 0xC0	; 192
    160e:	9f 4f       	sbci	r25, 0xFF	; 255
    1610:	82 1b       	sub	r24, r18
    1612:	91 09       	sbc	r25, r1
}
    1614:	8f 73       	andi	r24, 0x3F	; 63
    1616:	99 27       	eor	r25, r25
    1618:	08 95       	ret

0000161a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    161a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    161c:	91 8d       	ldd	r25, Z+25	; 0x19
    161e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1620:	98 17       	cp	r25, r24
    1622:	31 f0       	breq	.+12     	; 0x1630 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1624:	82 8d       	ldd	r24, Z+26	; 0x1a
    1626:	e8 0f       	add	r30, r24
    1628:	f1 1d       	adc	r31, r1
    162a:	85 8d       	ldd	r24, Z+29	; 0x1d
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1630:	8f ef       	ldi	r24, 0xFF	; 255
    1632:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1634:	08 95       	ret

00001636 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1636:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1638:	91 8d       	ldd	r25, Z+25	; 0x19
    163a:	82 8d       	ldd	r24, Z+26	; 0x1a
    163c:	98 17       	cp	r25, r24
    163e:	61 f0       	breq	.+24     	; 0x1658 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1640:	82 8d       	ldd	r24, Z+26	; 0x1a
    1642:	df 01       	movw	r26, r30
    1644:	a8 0f       	add	r26, r24
    1646:	b1 1d       	adc	r27, r1
    1648:	5d 96       	adiw	r26, 0x1d	; 29
    164a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    164c:	92 8d       	ldd	r25, Z+26	; 0x1a
    164e:	9f 5f       	subi	r25, 0xFF	; 255
    1650:	9f 73       	andi	r25, 0x3F	; 63
    1652:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1658:	8f ef       	ldi	r24, 0xFF	; 255
    165a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    165c:	08 95       	ret

0000165e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    165e:	84 e8       	ldi	r24, 0x84	; 132
    1660:	9c e0       	ldi	r25, 0x0C	; 12
    1662:	89 2b       	or	r24, r25
    1664:	49 f0       	breq	.+18     	; 0x1678 <_Z14serialEventRunv+0x1a>
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	89 2b       	or	r24, r25
    166c:	29 f0       	breq	.+10     	; 0x1678 <_Z14serialEventRunv+0x1a>
    166e:	0e 94 84 0c 	call	0x1908	; 0x1908 <_Z17Serial0_availablev>
    1672:	81 11       	cpse	r24, r1
    1674:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1678:	08 95       	ret

0000167a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    167a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    167c:	84 8d       	ldd	r24, Z+28	; 0x1c
    167e:	df 01       	movw	r26, r30
    1680:	a8 0f       	add	r26, r24
    1682:	b1 1d       	adc	r27, r1
    1684:	a3 5a       	subi	r26, 0xA3	; 163
    1686:	bf 4f       	sbci	r27, 0xFF	; 255
    1688:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    168a:	84 8d       	ldd	r24, Z+28	; 0x1c
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	01 96       	adiw	r24, 0x01	; 1
    1690:	8f 73       	andi	r24, 0x3F	; 63
    1692:	99 27       	eor	r25, r25
    1694:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1696:	a6 89       	ldd	r26, Z+22	; 0x16
    1698:	b7 89       	ldd	r27, Z+23	; 0x17
    169a:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    169c:	a0 89       	ldd	r26, Z+16	; 0x10
    169e:	b1 89       	ldd	r27, Z+17	; 0x11
    16a0:	8c 91       	ld	r24, X
    16a2:	80 64       	ori	r24, 0x40	; 64
    16a4:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    16a6:	93 8d       	ldd	r25, Z+27	; 0x1b
    16a8:	84 8d       	ldd	r24, Z+28	; 0x1c
    16aa:	98 13       	cpse	r25, r24
    16ac:	06 c0       	rjmp	.+12     	; 0x16ba <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    16ae:	02 88       	ldd	r0, Z+18	; 0x12
    16b0:	f3 89       	ldd	r31, Z+19	; 0x13
    16b2:	e0 2d       	mov	r30, r0
    16b4:	80 81       	ld	r24, Z
    16b6:	8f 7d       	andi	r24, 0xDF	; 223
    16b8:	80 83       	st	Z, r24
    16ba:	08 95       	ret

000016bc <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    16bc:	ef 92       	push	r14
    16be:	ff 92       	push	r15
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	ec 01       	movw	r28, r24
  _written = true;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    16ce:	9b 8d       	ldd	r25, Y+27	; 0x1b
    16d0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16d2:	98 13       	cpse	r25, r24
    16d4:	05 c0       	rjmp	.+10     	; 0x16e0 <_ZN14HardwareSerial5writeEh+0x24>
    16d6:	e8 89       	ldd	r30, Y+16	; 0x10
    16d8:	f9 89       	ldd	r31, Y+17	; 0x11
    16da:	80 81       	ld	r24, Z
    16dc:	85 fd       	sbrc	r24, 5
    16de:	24 c0       	rjmp	.+72     	; 0x1728 <_ZN14HardwareSerial5writeEh+0x6c>
    16e0:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    16e2:	0b 8d       	ldd	r16, Y+27	; 0x1b
    16e4:	10 e0       	ldi	r17, 0x00	; 0
    16e6:	0f 5f       	subi	r16, 0xFF	; 255
    16e8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ea:	0f 73       	andi	r16, 0x3F	; 63
    16ec:	11 27       	eor	r17, r17
    16ee:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    16f0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16f2:	e8 12       	cpse	r14, r24
    16f4:	0c c0       	rjmp	.+24     	; 0x170e <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	07 fc       	sbrc	r0, 7
    16fa:	fa cf       	rjmp	.-12     	; 0x16f0 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    16fc:	e8 89       	ldd	r30, Y+16	; 0x10
    16fe:	f9 89       	ldd	r31, Y+17	; 0x11
    1700:	80 81       	ld	r24, Z
    1702:	85 ff       	sbrs	r24, 5
    1704:	f5 cf       	rjmp	.-22     	; 0x16f0 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1706:	ce 01       	movw	r24, r28
    1708:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    170c:	f1 cf       	rjmp	.-30     	; 0x16f0 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    170e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1710:	fe 01       	movw	r30, r28
    1712:	e8 0f       	add	r30, r24
    1714:	f1 1d       	adc	r31, r1
    1716:	e3 5a       	subi	r30, 0xA3	; 163
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    171c:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    171e:	ea 89       	ldd	r30, Y+18	; 0x12
    1720:	fb 89       	ldd	r31, Y+19	; 0x13
    1722:	80 81       	ld	r24, Z
    1724:	80 62       	ori	r24, 0x20	; 32
    1726:	07 c0       	rjmp	.+14     	; 0x1736 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1728:	ee 89       	ldd	r30, Y+22	; 0x16
    172a:	ff 89       	ldd	r31, Y+23	; 0x17
    172c:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    172e:	e8 89       	ldd	r30, Y+16	; 0x10
    1730:	f9 89       	ldd	r31, Y+17	; 0x11
    1732:	80 81       	ld	r24, Z
    1734:	80 64       	ori	r24, 0x40	; 64
    1736:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	1f 91       	pop	r17
    1742:	0f 91       	pop	r16
    1744:	ff 90       	pop	r15
    1746:	ef 90       	pop	r14
    1748:	08 95       	ret

0000174a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1750:	88 8d       	ldd	r24, Y+24	; 0x18
    1752:	88 23       	and	r24, r24
    1754:	c9 f0       	breq	.+50     	; 0x1788 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1756:	ea 89       	ldd	r30, Y+18	; 0x12
    1758:	fb 89       	ldd	r31, Y+19	; 0x13
    175a:	80 81       	ld	r24, Z
    175c:	85 fd       	sbrc	r24, 5
    175e:	05 c0       	rjmp	.+10     	; 0x176a <_ZN14HardwareSerial5flushEv+0x20>
    1760:	a8 89       	ldd	r26, Y+16	; 0x10
    1762:	b9 89       	ldd	r27, Y+17	; 0x11
    1764:	8c 91       	ld	r24, X
    1766:	86 fd       	sbrc	r24, 6
    1768:	0f c0       	rjmp	.+30     	; 0x1788 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	07 fc       	sbrc	r0, 7
    176e:	f5 cf       	rjmp	.-22     	; 0x175a <_ZN14HardwareSerial5flushEv+0x10>
    1770:	80 81       	ld	r24, Z
    1772:	85 ff       	sbrs	r24, 5
    1774:	f2 cf       	rjmp	.-28     	; 0x175a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1776:	a8 89       	ldd	r26, Y+16	; 0x10
    1778:	b9 89       	ldd	r27, Y+17	; 0x11
    177a:	8c 91       	ld	r24, X
    177c:	85 ff       	sbrs	r24, 5
    177e:	ed cf       	rjmp	.-38     	; 0x175a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1780:	ce 01       	movw	r24, r28
    1782:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1786:	e7 cf       	rjmp	.-50     	; 0x1756 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	08 95       	ret

0000178e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    178e:	cf 92       	push	r12
    1790:	df 92       	push	r13
    1792:	ef 92       	push	r14
    1794:	ff 92       	push	r15
    1796:	1f 93       	push	r17
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29
    179c:	ec 01       	movw	r28, r24
    179e:	6a 01       	movw	r12, r20
    17a0:	7b 01       	movw	r14, r22
    17a2:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    17a4:	e8 89       	ldd	r30, Y+16	; 0x10
    17a6:	f9 89       	ldd	r31, Y+17	; 0x11
    17a8:	82 e0       	ldi	r24, 0x02	; 2
    17aa:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    17ac:	41 15       	cp	r20, r1
    17ae:	51 4e       	sbci	r21, 0xE1	; 225
    17b0:	61 05       	cpc	r22, r1
    17b2:	71 05       	cpc	r23, r1
    17b4:	b1 f0       	breq	.+44     	; 0x17e2 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	79 e0       	ldi	r23, 0x09	; 9
    17ba:	8d e3       	ldi	r24, 0x3D	; 61
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	a7 01       	movw	r20, r14
    17c0:	96 01       	movw	r18, r12
    17c2:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__udivmodsi4>
    17c6:	da 01       	movw	r26, r20
    17c8:	c9 01       	movw	r24, r18
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	a1 09       	sbc	r26, r1
    17ce:	b1 09       	sbc	r27, r1
    17d0:	b6 95       	lsr	r27
    17d2:	a7 95       	ror	r26
    17d4:	97 95       	ror	r25
    17d6:	87 95       	ror	r24
    17d8:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    17da:	21 15       	cp	r18, r1
    17dc:	80 e1       	ldi	r24, 0x10	; 16
    17de:	38 07       	cpc	r19, r24
    17e0:	a8 f0       	brcs	.+42     	; 0x180c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    17e2:	e8 89       	ldd	r30, Y+16	; 0x10
    17e4:	f9 89       	ldd	r31, Y+17	; 0x11
    17e6:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    17e8:	60 e8       	ldi	r22, 0x80	; 128
    17ea:	74 e8       	ldi	r23, 0x84	; 132
    17ec:	8e e1       	ldi	r24, 0x1E	; 30
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	a7 01       	movw	r20, r14
    17f2:	96 01       	movw	r18, r12
    17f4:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__udivmodsi4>
    17f8:	da 01       	movw	r26, r20
    17fa:	c9 01       	movw	r24, r18
    17fc:	01 97       	sbiw	r24, 0x01	; 1
    17fe:	a1 09       	sbc	r26, r1
    1800:	b1 09       	sbc	r27, r1
    1802:	b6 95       	lsr	r27
    1804:	a7 95       	ror	r26
    1806:	97 95       	ror	r25
    1808:	87 95       	ror	r24
    180a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    180c:	ec 85       	ldd	r30, Y+12	; 0x0c
    180e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1810:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1812:	ee 85       	ldd	r30, Y+14	; 0x0e
    1814:	ff 85       	ldd	r31, Y+15	; 0x0f
    1816:	20 83       	st	Z, r18

  _written = false;
    1818:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    181a:	ec 89       	ldd	r30, Y+20	; 0x14
    181c:	fd 89       	ldd	r31, Y+21	; 0x15
    181e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1820:	ea 89       	ldd	r30, Y+18	; 0x12
    1822:	fb 89       	ldd	r31, Y+19	; 0x13
    1824:	80 81       	ld	r24, Z
    1826:	80 61       	ori	r24, 0x10	; 16
    1828:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    182a:	ea 89       	ldd	r30, Y+18	; 0x12
    182c:	fb 89       	ldd	r31, Y+19	; 0x13
    182e:	80 81       	ld	r24, Z
    1830:	88 60       	ori	r24, 0x08	; 8
    1832:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1834:	ea 89       	ldd	r30, Y+18	; 0x12
    1836:	fb 89       	ldd	r31, Y+19	; 0x13
    1838:	80 81       	ld	r24, Z
    183a:	80 68       	ori	r24, 0x80	; 128
    183c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    183e:	ea 89       	ldd	r30, Y+18	; 0x12
    1840:	fb 89       	ldd	r31, Y+19	; 0x13
    1842:	80 81       	ld	r24, Z
    1844:	8f 7d       	andi	r24, 0xDF	; 223
    1846:	80 83       	st	Z, r24
}
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	1f 91       	pop	r17
    184e:	ff 90       	pop	r15
    1850:	ef 90       	pop	r14
    1852:	df 90       	pop	r13
    1854:	cf 90       	pop	r12
    1856:	08 95       	ret

00001858 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1858:	1f 92       	push	r1
    185a:	0f 92       	push	r0
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	0f 92       	push	r0
    1860:	11 24       	eor	r1, r1
    1862:	2f 93       	push	r18
    1864:	8f 93       	push	r24
    1866:	9f 93       	push	r25
    1868:	ef 93       	push	r30
    186a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    186c:	e0 91 1a 03 	lds	r30, 0x031A	; 0x80031a <Serial+0x10>
    1870:	f0 91 1b 03 	lds	r31, 0x031B	; 0x80031b <Serial+0x11>
    1874:	80 81       	ld	r24, Z
    1876:	e0 91 20 03 	lds	r30, 0x0320	; 0x800320 <Serial+0x16>
    187a:	f0 91 21 03 	lds	r31, 0x0321	; 0x800321 <Serial+0x17>
    187e:	82 fd       	sbrc	r24, 2
    1880:	12 c0       	rjmp	.+36     	; 0x18a6 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1882:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1884:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <Serial+0x19>
    1888:	8f 5f       	subi	r24, 0xFF	; 255
    188a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    188c:	20 91 24 03 	lds	r18, 0x0324	; 0x800324 <Serial+0x1a>
    1890:	82 17       	cp	r24, r18
    1892:	51 f0       	breq	.+20     	; 0x18a8 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1894:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <Serial+0x19>
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	e6 5f       	subi	r30, 0xF6	; 246
    189c:	fc 4f       	sbci	r31, 0xFC	; 252
    189e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    18a0:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <Serial+0x19>
    18a4:	01 c0       	rjmp	.+2      	; 0x18a8 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    18a6:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    18a8:	ff 91       	pop	r31
    18aa:	ef 91       	pop	r30
    18ac:	9f 91       	pop	r25
    18ae:	8f 91       	pop	r24
    18b0:	2f 91       	pop	r18
    18b2:	0f 90       	pop	r0
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	0f 90       	pop	r0
    18b8:	1f 90       	pop	r1
    18ba:	18 95       	reti

000018bc <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    18bc:	1f 92       	push	r1
    18be:	0f 92       	push	r0
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	0f 92       	push	r0
    18c4:	11 24       	eor	r1, r1
    18c6:	2f 93       	push	r18
    18c8:	3f 93       	push	r19
    18ca:	4f 93       	push	r20
    18cc:	5f 93       	push	r21
    18ce:	6f 93       	push	r22
    18d0:	7f 93       	push	r23
    18d2:	8f 93       	push	r24
    18d4:	9f 93       	push	r25
    18d6:	af 93       	push	r26
    18d8:	bf 93       	push	r27
    18da:	ef 93       	push	r30
    18dc:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    18de:	8a e0       	ldi	r24, 0x0A	; 10
    18e0:	93 e0       	ldi	r25, 0x03	; 3
    18e2:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    18e6:	ff 91       	pop	r31
    18e8:	ef 91       	pop	r30
    18ea:	bf 91       	pop	r27
    18ec:	af 91       	pop	r26
    18ee:	9f 91       	pop	r25
    18f0:	8f 91       	pop	r24
    18f2:	7f 91       	pop	r23
    18f4:	6f 91       	pop	r22
    18f6:	5f 91       	pop	r21
    18f8:	4f 91       	pop	r20
    18fa:	3f 91       	pop	r19
    18fc:	2f 91       	pop	r18
    18fe:	0f 90       	pop	r0
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	0f 90       	pop	r0
    1904:	1f 90       	pop	r1
    1906:	18 95       	reti

00001908 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1908:	8a e0       	ldi	r24, 0x0A	; 10
    190a:	93 e0       	ldi	r25, 0x03	; 3
    190c:	0e 94 01 0b 	call	0x1602	; 0x1602 <_ZN14HardwareSerial9availableEv>
    1910:	21 e0       	ldi	r18, 0x01	; 1
    1912:	89 2b       	or	r24, r25
    1914:	09 f4       	brne	.+2      	; 0x1918 <_Z17Serial0_availablev+0x10>
    1916:	20 e0       	ldi	r18, 0x00	; 0
}
    1918:	82 2f       	mov	r24, r18
    191a:	08 95       	ret

0000191c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    191c:	ea e0       	ldi	r30, 0x0A	; 10
    191e:	f3 e0       	ldi	r31, 0x03	; 3
    1920:	13 82       	std	Z+3, r1	; 0x03
    1922:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1924:	88 ee       	ldi	r24, 0xE8	; 232
    1926:	93 e0       	ldi	r25, 0x03	; 3
    1928:	a0 e0       	ldi	r26, 0x00	; 0
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	84 83       	std	Z+4, r24	; 0x04
    192e:	95 83       	std	Z+5, r25	; 0x05
    1930:	a6 83       	std	Z+6, r26	; 0x06
    1932:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1934:	85 e8       	ldi	r24, 0x85	; 133
    1936:	91 e0       	ldi	r25, 0x01	; 1
    1938:	91 83       	std	Z+1, r25	; 0x01
    193a:	80 83       	st	Z, r24
    193c:	85 ec       	ldi	r24, 0xC5	; 197
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	95 87       	std	Z+13, r25	; 0x0d
    1942:	84 87       	std	Z+12, r24	; 0x0c
    1944:	84 ec       	ldi	r24, 0xC4	; 196
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	97 87       	std	Z+15, r25	; 0x0f
    194a:	86 87       	std	Z+14, r24	; 0x0e
    194c:	80 ec       	ldi	r24, 0xC0	; 192
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	91 8b       	std	Z+17, r25	; 0x11
    1952:	80 8b       	std	Z+16, r24	; 0x10
    1954:	81 ec       	ldi	r24, 0xC1	; 193
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	93 8b       	std	Z+19, r25	; 0x13
    195a:	82 8b       	std	Z+18, r24	; 0x12
    195c:	82 ec       	ldi	r24, 0xC2	; 194
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	95 8b       	std	Z+21, r25	; 0x15
    1962:	84 8b       	std	Z+20, r24	; 0x14
    1964:	86 ec       	ldi	r24, 0xC6	; 198
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	97 8b       	std	Z+23, r25	; 0x17
    196a:	86 8b       	std	Z+22, r24	; 0x16
    196c:	11 8e       	std	Z+25, r1	; 0x19
    196e:	12 8e       	std	Z+26, r1	; 0x1a
    1970:	13 8e       	std	Z+27, r1	; 0x1b
    1972:	14 8e       	std	Z+28, r1	; 0x1c
    1974:	08 95       	ret

00001976 <initVariant>:
    1976:	08 95       	ret

00001978 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1978:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <init>

	initVariant();
    197c:	0e 94 bb 0c 	call	0x1976	; 0x1976 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1980:	0e 94 39 04 	call	0x872	; 0x872 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1984:	cf e2       	ldi	r28, 0x2F	; 47
    1986:	db e0       	ldi	r29, 0x0B	; 11
#endif
	
	setup();
    
	for (;;) {
		loop();
    1988:	0e 94 32 05 	call	0xa64	; 0xa64 <loop>
		if (serialEventRun) serialEventRun();
    198c:	20 97       	sbiw	r28, 0x00	; 0
    198e:	e1 f3       	breq	.-8      	; 0x1988 <main+0x10>
    1990:	0e 94 2f 0b 	call	0x165e	; 0x165e <_Z14serialEventRunv>
    1994:	f9 cf       	rjmp	.-14     	; 0x1988 <main+0x10>

00001996 <_ZN5Print5writeEPKhj>:
    if (c == 0) break;
    if (write(c)) n++;
    else break;
  }
  return n;
}
    1996:	cf 92       	push	r12
    1998:	df 92       	push	r13
    199a:	ef 92       	push	r14
    199c:	ff 92       	push	r15
    199e:	0f 93       	push	r16
    19a0:	1f 93       	push	r17
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	6c 01       	movw	r12, r24
    19a8:	7a 01       	movw	r14, r20
    19aa:	8b 01       	movw	r16, r22
    19ac:	c0 e0       	ldi	r28, 0x00	; 0
    19ae:	d0 e0       	ldi	r29, 0x00	; 0
    19b0:	ce 15       	cp	r28, r14
    19b2:	df 05       	cpc	r29, r15
    19b4:	81 f0       	breq	.+32     	; 0x19d6 <_ZN5Print5writeEPKhj+0x40>
    19b6:	d8 01       	movw	r26, r16
    19b8:	6d 91       	ld	r22, X+
    19ba:	8d 01       	movw	r16, r26
    19bc:	d6 01       	movw	r26, r12
    19be:	ed 91       	ld	r30, X+
    19c0:	fc 91       	ld	r31, X
    19c2:	01 90       	ld	r0, Z+
    19c4:	f0 81       	ld	r31, Z
    19c6:	e0 2d       	mov	r30, r0
    19c8:	c6 01       	movw	r24, r12
    19ca:	09 95       	icall
    19cc:	89 2b       	or	r24, r25
    19ce:	11 f0       	breq	.+4      	; 0x19d4 <_ZN5Print5writeEPKhj+0x3e>
    19d0:	21 96       	adiw	r28, 0x01	; 1
    19d2:	ee cf       	rjmp	.-36     	; 0x19b0 <_ZN5Print5writeEPKhj+0x1a>
    19d4:	7e 01       	movw	r14, r28
    19d6:	c7 01       	movw	r24, r14
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	1f 91       	pop	r17
    19de:	0f 91       	pop	r16
    19e0:	ff 90       	pop	r15
    19e2:	ef 90       	pop	r14
    19e4:	df 90       	pop	r13
    19e6:	cf 90       	pop	r12
    19e8:	08 95       	ret

000019ea <_ZN5Print5printERK6String>:
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    19ea:	db 01       	movw	r26, r22
    19ec:	14 96       	adiw	r26, 0x04	; 4
    19ee:	4d 91       	ld	r20, X+
    19f0:	5c 91       	ld	r21, X
    19f2:	15 97       	sbiw	r26, 0x05	; 5
    19f4:	6d 91       	ld	r22, X+
    19f6:	7c 91       	ld	r23, X
    19f8:	dc 01       	movw	r26, r24
    19fa:	ed 91       	ld	r30, X+
    19fc:	fc 91       	ld	r31, X
    19fe:	02 80       	ldd	r0, Z+2	; 0x02
    1a00:	f3 81       	ldd	r31, Z+3	; 0x03
    1a02:	e0 2d       	mov	r30, r0
    1a04:	09 94       	ijmp

00001a06 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    1a06:	08 95       	ret

00001a08 <attachInterrupt>:
    1a08:	82 30       	cpi	r24, 0x02	; 2
    1a0a:	e8 f4       	brcc	.+58     	; 0x1a46 <attachInterrupt+0x3e>
    1a0c:	e8 2f       	mov	r30, r24
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	ee 0f       	add	r30, r30
    1a12:	ff 1f       	adc	r31, r31
    1a14:	ea 5f       	subi	r30, 0xFA	; 250
    1a16:	fe 4f       	sbci	r31, 0xFE	; 254
    1a18:	71 83       	std	Z+1, r23	; 0x01
    1a1a:	60 83       	st	Z, r22
    1a1c:	81 30       	cpi	r24, 0x01	; 1
    1a1e:	41 f0       	breq	.+16     	; 0x1a30 <attachInterrupt+0x28>
    1a20:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1a24:	8c 7f       	andi	r24, 0xFC	; 252
    1a26:	48 2b       	or	r20, r24
    1a28:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1a2c:	e8 9a       	sbi	0x1d, 0	; 29
    1a2e:	08 95       	ret
    1a30:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1a34:	83 7f       	andi	r24, 0xF3	; 243
    1a36:	44 0f       	add	r20, r20
    1a38:	55 1f       	adc	r21, r21
    1a3a:	44 0f       	add	r20, r20
    1a3c:	55 1f       	adc	r21, r21
    1a3e:	48 2b       	or	r20, r24
    1a40:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1a44:	e9 9a       	sbi	0x1d, 1	; 29
    1a46:	08 95       	ret

00001a48 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    1a48:	1f 92       	push	r1
    1a4a:	0f 92       	push	r0
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	0f 92       	push	r0
    1a50:	11 24       	eor	r1, r1
    1a52:	2f 93       	push	r18
    1a54:	3f 93       	push	r19
    1a56:	4f 93       	push	r20
    1a58:	5f 93       	push	r21
    1a5a:	6f 93       	push	r22
    1a5c:	7f 93       	push	r23
    1a5e:	8f 93       	push	r24
    1a60:	9f 93       	push	r25
    1a62:	af 93       	push	r26
    1a64:	bf 93       	push	r27
    1a66:	ef 93       	push	r30
    1a68:	ff 93       	push	r31
    1a6a:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <intFunc>
    1a6e:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <intFunc+0x1>
    1a72:	09 95       	icall
    1a74:	ff 91       	pop	r31
    1a76:	ef 91       	pop	r30
    1a78:	bf 91       	pop	r27
    1a7a:	af 91       	pop	r26
    1a7c:	9f 91       	pop	r25
    1a7e:	8f 91       	pop	r24
    1a80:	7f 91       	pop	r23
    1a82:	6f 91       	pop	r22
    1a84:	5f 91       	pop	r21
    1a86:	4f 91       	pop	r20
    1a88:	3f 91       	pop	r19
    1a8a:	2f 91       	pop	r18
    1a8c:	0f 90       	pop	r0
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	0f 90       	pop	r0
    1a92:	1f 90       	pop	r1
    1a94:	18 95       	reti

00001a96 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    1a96:	1f 92       	push	r1
    1a98:	0f 92       	push	r0
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	0f 92       	push	r0
    1a9e:	11 24       	eor	r1, r1
    1aa0:	2f 93       	push	r18
    1aa2:	3f 93       	push	r19
    1aa4:	4f 93       	push	r20
    1aa6:	5f 93       	push	r21
    1aa8:	6f 93       	push	r22
    1aaa:	7f 93       	push	r23
    1aac:	8f 93       	push	r24
    1aae:	9f 93       	push	r25
    1ab0:	af 93       	push	r26
    1ab2:	bf 93       	push	r27
    1ab4:	ef 93       	push	r30
    1ab6:	ff 93       	push	r31
    1ab8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <intFunc+0x2>
    1abc:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <intFunc+0x3>
    1ac0:	09 95       	icall
    1ac2:	ff 91       	pop	r31
    1ac4:	ef 91       	pop	r30
    1ac6:	bf 91       	pop	r27
    1ac8:	af 91       	pop	r26
    1aca:	9f 91       	pop	r25
    1acc:	8f 91       	pop	r24
    1ace:	7f 91       	pop	r23
    1ad0:	6f 91       	pop	r22
    1ad2:	5f 91       	pop	r21
    1ad4:	4f 91       	pop	r20
    1ad6:	3f 91       	pop	r19
    1ad8:	2f 91       	pop	r18
    1ada:	0f 90       	pop	r0
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	0f 90       	pop	r0
    1ae0:	1f 90       	pop	r1
    1ae2:	18 95       	reti

00001ae4 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1ae4:	1f 92       	push	r1
    1ae6:	0f 92       	push	r0
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	0f 92       	push	r0
    1aec:	11 24       	eor	r1, r1
    1aee:	2f 93       	push	r18
    1af0:	3f 93       	push	r19
    1af2:	8f 93       	push	r24
    1af4:	9f 93       	push	r25
    1af6:	af 93       	push	r26
    1af8:	bf 93       	push	r27
    1afa:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <timer0_millis>
    1afe:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <timer0_millis+0x1>
    1b02:	a0 91 aa 03 	lds	r26, 0x03AA	; 0x8003aa <timer0_millis+0x2>
    1b06:	b0 91 ab 03 	lds	r27, 0x03AB	; 0x8003ab <timer0_millis+0x3>
    1b0a:	30 91 a7 03 	lds	r19, 0x03A7	; 0x8003a7 <timer0_fract>
    1b0e:	23 e0       	ldi	r18, 0x03	; 3
    1b10:	23 0f       	add	r18, r19
    1b12:	2d 37       	cpi	r18, 0x7D	; 125
    1b14:	20 f4       	brcc	.+8      	; 0x1b1e <__vector_16+0x3a>
    1b16:	01 96       	adiw	r24, 0x01	; 1
    1b18:	a1 1d       	adc	r26, r1
    1b1a:	b1 1d       	adc	r27, r1
    1b1c:	05 c0       	rjmp	.+10     	; 0x1b28 <__vector_16+0x44>
    1b1e:	26 e8       	ldi	r18, 0x86	; 134
    1b20:	23 0f       	add	r18, r19
    1b22:	02 96       	adiw	r24, 0x02	; 2
    1b24:	a1 1d       	adc	r26, r1
    1b26:	b1 1d       	adc	r27, r1
    1b28:	20 93 a7 03 	sts	0x03A7, r18	; 0x8003a7 <timer0_fract>
    1b2c:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <timer0_millis>
    1b30:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <timer0_millis+0x1>
    1b34:	a0 93 aa 03 	sts	0x03AA, r26	; 0x8003aa <timer0_millis+0x2>
    1b38:	b0 93 ab 03 	sts	0x03AB, r27	; 0x8003ab <timer0_millis+0x3>
    1b3c:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <timer0_overflow_count>
    1b40:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <timer0_overflow_count+0x1>
    1b44:	a0 91 ae 03 	lds	r26, 0x03AE	; 0x8003ae <timer0_overflow_count+0x2>
    1b48:	b0 91 af 03 	lds	r27, 0x03AF	; 0x8003af <timer0_overflow_count+0x3>
    1b4c:	01 96       	adiw	r24, 0x01	; 1
    1b4e:	a1 1d       	adc	r26, r1
    1b50:	b1 1d       	adc	r27, r1
    1b52:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <timer0_overflow_count>
    1b56:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <timer0_overflow_count+0x1>
    1b5a:	a0 93 ae 03 	sts	0x03AE, r26	; 0x8003ae <timer0_overflow_count+0x2>
    1b5e:	b0 93 af 03 	sts	0x03AF, r27	; 0x8003af <timer0_overflow_count+0x3>
    1b62:	bf 91       	pop	r27
    1b64:	af 91       	pop	r26
    1b66:	9f 91       	pop	r25
    1b68:	8f 91       	pop	r24
    1b6a:	3f 91       	pop	r19
    1b6c:	2f 91       	pop	r18
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	0f 90       	pop	r0
    1b74:	1f 90       	pop	r1
    1b76:	18 95       	reti

00001b78 <millis>:
    1b78:	2f b7       	in	r18, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	60 91 a8 03 	lds	r22, 0x03A8	; 0x8003a8 <timer0_millis>
    1b80:	70 91 a9 03 	lds	r23, 0x03A9	; 0x8003a9 <timer0_millis+0x1>
    1b84:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <timer0_millis+0x2>
    1b88:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <timer0_millis+0x3>
    1b8c:	2f bf       	out	0x3f, r18	; 63
    1b8e:	08 95       	ret

00001b90 <micros>:
    1b90:	3f b7       	in	r19, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <timer0_overflow_count>
    1b98:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <timer0_overflow_count+0x1>
    1b9c:	a0 91 ae 03 	lds	r26, 0x03AE	; 0x8003ae <timer0_overflow_count+0x2>
    1ba0:	b0 91 af 03 	lds	r27, 0x03AF	; 0x8003af <timer0_overflow_count+0x3>
    1ba4:	26 b5       	in	r18, 0x26	; 38
    1ba6:	a8 9b       	sbis	0x15, 0	; 21
    1ba8:	05 c0       	rjmp	.+10     	; 0x1bb4 <micros+0x24>
    1baa:	2f 3f       	cpi	r18, 0xFF	; 255
    1bac:	19 f0       	breq	.+6      	; 0x1bb4 <micros+0x24>
    1bae:	01 96       	adiw	r24, 0x01	; 1
    1bb0:	a1 1d       	adc	r26, r1
    1bb2:	b1 1d       	adc	r27, r1
    1bb4:	3f bf       	out	0x3f, r19	; 63
    1bb6:	ba 2f       	mov	r27, r26
    1bb8:	a9 2f       	mov	r26, r25
    1bba:	98 2f       	mov	r25, r24
    1bbc:	88 27       	eor	r24, r24
    1bbe:	82 0f       	add	r24, r18
    1bc0:	91 1d       	adc	r25, r1
    1bc2:	a1 1d       	adc	r26, r1
    1bc4:	b1 1d       	adc	r27, r1
    1bc6:	bc 01       	movw	r22, r24
    1bc8:	cd 01       	movw	r24, r26
    1bca:	42 e0       	ldi	r20, 0x02	; 2
    1bcc:	66 0f       	add	r22, r22
    1bce:	77 1f       	adc	r23, r23
    1bd0:	88 1f       	adc	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	4a 95       	dec	r20
    1bd6:	d1 f7       	brne	.-12     	; 0x1bcc <micros+0x3c>
    1bd8:	08 95       	ret

00001bda <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1bda:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1bdc:	84 b5       	in	r24, 0x24	; 36
    1bde:	82 60       	ori	r24, 0x02	; 2
    1be0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1be2:	84 b5       	in	r24, 0x24	; 36
    1be4:	81 60       	ori	r24, 0x01	; 1
    1be6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1be8:	85 b5       	in	r24, 0x25	; 37
    1bea:	82 60       	ori	r24, 0x02	; 2
    1bec:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1bee:	85 b5       	in	r24, 0x25	; 37
    1bf0:	81 60       	ori	r24, 0x01	; 1
    1bf2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1bf4:	ee e6       	ldi	r30, 0x6E	; 110
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	81 60       	ori	r24, 0x01	; 1
    1bfc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1bfe:	e1 e8       	ldi	r30, 0x81	; 129
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1c04:	80 81       	ld	r24, Z
    1c06:	82 60       	ori	r24, 0x02	; 2
    1c08:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1c0a:	80 81       	ld	r24, Z
    1c0c:	81 60       	ori	r24, 0x01	; 1
    1c0e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1c10:	e0 e8       	ldi	r30, 0x80	; 128
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	81 60       	ori	r24, 0x01	; 1
    1c18:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1c1a:	e1 eb       	ldi	r30, 0xB1	; 177
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	84 60       	ori	r24, 0x04	; 4
    1c22:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1c24:	e0 eb       	ldi	r30, 0xB0	; 176
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	81 60       	ori	r24, 0x01	; 1
    1c2c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1c2e:	ea e7       	ldi	r30, 0x7A	; 122
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	84 60       	ori	r24, 0x04	; 4
    1c36:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1c38:	80 81       	ld	r24, Z
    1c3a:	82 60       	ori	r24, 0x02	; 2
    1c3c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1c3e:	80 81       	ld	r24, Z
    1c40:	81 60       	ori	r24, 0x01	; 1
    1c42:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1c44:	80 81       	ld	r24, Z
    1c46:	80 68       	ori	r24, 0x80	; 128
    1c48:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1c4a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1c4e:	08 95       	ret

00001c50 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    1c50:	8e 30       	cpi	r24, 0x0E	; 14
    1c52:	08 f0       	brcs	.+2      	; 0x1c56 <analogRead+0x6>
    1c54:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1c56:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <analog_reference>
    1c5a:	90 e4       	ldi	r25, 0x40	; 64
    1c5c:	29 9f       	mul	r18, r25
    1c5e:	90 01       	movw	r18, r0
    1c60:	11 24       	eor	r1, r1
    1c62:	87 70       	andi	r24, 0x07	; 7
    1c64:	82 2b       	or	r24, r18
    1c66:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1c6a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1c6e:	80 64       	ori	r24, 0x40	; 64
    1c70:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1c74:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1c78:	86 fd       	sbrc	r24, 6
    1c7a:	fc cf       	rjmp	.-8      	; 0x1c74 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1c7c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    1c80:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    1c84:	90 e0       	ldi	r25, 0x00	; 0
}
    1c86:	92 2b       	or	r25, r18
    1c88:	08 95       	ret

00001c8a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1c8a:	83 30       	cpi	r24, 0x03	; 3
    1c8c:	81 f0       	breq	.+32     	; 0x1cae <turnOffPWM+0x24>
    1c8e:	28 f4       	brcc	.+10     	; 0x1c9a <turnOffPWM+0x10>
    1c90:	81 30       	cpi	r24, 0x01	; 1
    1c92:	99 f0       	breq	.+38     	; 0x1cba <turnOffPWM+0x30>
    1c94:	82 30       	cpi	r24, 0x02	; 2
    1c96:	a1 f0       	breq	.+40     	; 0x1cc0 <turnOffPWM+0x36>
    1c98:	08 95       	ret
    1c9a:	87 30       	cpi	r24, 0x07	; 7
    1c9c:	a9 f0       	breq	.+42     	; 0x1cc8 <turnOffPWM+0x3e>
    1c9e:	88 30       	cpi	r24, 0x08	; 8
    1ca0:	b9 f0       	breq	.+46     	; 0x1cd0 <turnOffPWM+0x46>
    1ca2:	84 30       	cpi	r24, 0x04	; 4
    1ca4:	d1 f4       	brne	.+52     	; 0x1cda <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1ca6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1caa:	8f 7d       	andi	r24, 0xDF	; 223
    1cac:	03 c0       	rjmp	.+6      	; 0x1cb4 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1cae:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1cb2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1cb4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1cb8:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1cba:	84 b5       	in	r24, 0x24	; 36
    1cbc:	8f 77       	andi	r24, 0x7F	; 127
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1cc0:	84 b5       	in	r24, 0x24	; 36
    1cc2:	8f 7d       	andi	r24, 0xDF	; 223
    1cc4:	84 bd       	out	0x24, r24	; 36
    1cc6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1cc8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1ccc:	8f 77       	andi	r24, 0x7F	; 127
    1cce:	03 c0       	rjmp	.+6      	; 0x1cd6 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1cd0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1cd4:	8f 7d       	andi	r24, 0xDF	; 223
    1cd6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1cda:	08 95       	ret

00001cdc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1cdc:	cf 93       	push	r28
    1cde:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	ea 58       	subi	r30, 0x8A	; 138
    1ce6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ce8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1cea:	fc 01       	movw	r30, r24
    1cec:	e6 57       	subi	r30, 0x76	; 118
    1cee:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1cf2:	88 23       	and	r24, r24
    1cf4:	61 f1       	breq	.+88     	; 0x1d4e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	88 0f       	add	r24, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	ee 54       	subi	r30, 0x4E	; 78
    1d00:	fe 4f       	sbci	r31, 0xFE	; 254
    1d02:	c5 91       	lpm	r28, Z+
    1d04:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1d06:	fc 01       	movw	r30, r24
    1d08:	e8 55       	subi	r30, 0x58	; 88
    1d0a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d0c:	a5 91       	lpm	r26, Z+
    1d0e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1d10:	61 11       	cpse	r22, r1
    1d12:	09 c0       	rjmp	.+18     	; 0x1d26 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1d14:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1d16:	f8 94       	cli
		*reg &= ~bit;
    1d18:	88 81       	ld	r24, Y
    1d1a:	20 95       	com	r18
    1d1c:	82 23       	and	r24, r18
    1d1e:	88 83       	st	Y, r24
		*out &= ~bit;
    1d20:	ec 91       	ld	r30, X
    1d22:	2e 23       	and	r18, r30
    1d24:	0b c0       	rjmp	.+22     	; 0x1d3c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1d26:	62 30       	cpi	r22, 0x02	; 2
    1d28:	61 f4       	brne	.+24     	; 0x1d42 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1d2a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1d2c:	f8 94       	cli
		*reg &= ~bit;
    1d2e:	88 81       	ld	r24, Y
    1d30:	32 2f       	mov	r19, r18
    1d32:	30 95       	com	r19
    1d34:	83 23       	and	r24, r19
    1d36:	88 83       	st	Y, r24
		*out |= bit;
    1d38:	ec 91       	ld	r30, X
    1d3a:	2e 2b       	or	r18, r30
    1d3c:	2c 93       	st	X, r18
		SREG = oldSREG;
    1d3e:	9f bf       	out	0x3f, r25	; 63
    1d40:	06 c0       	rjmp	.+12     	; 0x1d4e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1d42:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1d44:	f8 94       	cli
		*reg |= bit;
    1d46:	e8 81       	ld	r30, Y
    1d48:	2e 2b       	or	r18, r30
    1d4a:	28 83       	st	Y, r18
		SREG = oldSREG;
    1d4c:	8f bf       	out	0x3f, r24	; 63
	}
}
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
    1d52:	08 95       	ret

00001d54 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1d54:	1f 93       	push	r17
    1d56:	cf 93       	push	r28
    1d58:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	f9 01       	movw	r30, r18
    1d60:	ee 59       	subi	r30, 0x9E	; 158
    1d62:	fe 4f       	sbci	r31, 0xFE	; 254
    1d64:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1d66:	f9 01       	movw	r30, r18
    1d68:	ea 58       	subi	r30, 0x8A	; 138
    1d6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d6c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1d6e:	f9 01       	movw	r30, r18
    1d70:	e6 57       	subi	r30, 0x76	; 118
    1d72:	fe 4f       	sbci	r31, 0xFE	; 254
    1d74:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1d76:	cc 23       	and	r28, r28
    1d78:	c1 f0       	breq	.+48     	; 0x1daa <digitalWrite+0x56>
    1d7a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1d7c:	81 11       	cpse	r24, r1
    1d7e:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <turnOffPWM>

	out = portOutputRegister(port);
    1d82:	ec 2f       	mov	r30, r28
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	ee 0f       	add	r30, r30
    1d88:	ff 1f       	adc	r31, r31
    1d8a:	e8 55       	subi	r30, 0x58	; 88
    1d8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d8e:	a5 91       	lpm	r26, Z+
    1d90:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1d92:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1d94:	f8 94       	cli

	if (val == LOW) {
    1d96:	11 11       	cpse	r17, r1
    1d98:	04 c0       	rjmp	.+8      	; 0x1da2 <digitalWrite+0x4e>
		*out &= ~bit;
    1d9a:	8c 91       	ld	r24, X
    1d9c:	d0 95       	com	r29
    1d9e:	d8 23       	and	r29, r24
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1da2:	ec 91       	ld	r30, X
    1da4:	de 2b       	or	r29, r30
    1da6:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1da8:	9f bf       	out	0x3f, r25	; 63
}
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	1f 91       	pop	r17
    1db0:	08 95       	ret

00001db2 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1db6:	28 2f       	mov	r18, r24
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	f9 01       	movw	r30, r18
    1dbc:	ee 59       	subi	r30, 0x9E	; 158
    1dbe:	fe 4f       	sbci	r31, 0xFE	; 254
    1dc0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1dc2:	f9 01       	movw	r30, r18
    1dc4:	ea 58       	subi	r30, 0x8A	; 138
    1dc6:	fe 4f       	sbci	r31, 0xFE	; 254
    1dc8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1dca:	f9 01       	movw	r30, r18
    1dcc:	e6 57       	subi	r30, 0x76	; 118
    1dce:	fe 4f       	sbci	r31, 0xFE	; 254
    1dd0:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1dd2:	cc 23       	and	r28, r28
    1dd4:	91 f0       	breq	.+36     	; 0x1dfa <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1dd6:	81 11       	cpse	r24, r1
    1dd8:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1ddc:	ec 2f       	mov	r30, r28
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	ee 0f       	add	r30, r30
    1de2:	ff 1f       	adc	r31, r31
    1de4:	e2 56       	subi	r30, 0x62	; 98
    1de6:	fe 4f       	sbci	r31, 0xFE	; 254
    1de8:	a5 91       	lpm	r26, Z+
    1dea:	b4 91       	lpm	r27, Z
    1dec:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1dee:	ed 23       	and	r30, r29
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	21 f4       	brne	.+8      	; 0x1dfe <digitalRead+0x4c>
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <digitalRead+0x4c>
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1dfe:	df 91       	pop	r29
    1e00:	cf 91       	pop	r28
    1e02:	08 95       	ret

00001e04 <_ZN6StringD1Ev>:
StringSumHelper & operator + (const StringSumHelper &lhs, long num)
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}
    1e04:	fc 01       	movw	r30, r24
    1e06:	80 81       	ld	r24, Z
    1e08:	91 81       	ldd	r25, Z+1	; 0x01
    1e0a:	0c 94 b6 18 	jmp	0x316c	; 0x316c <free>

00001e0e <_ZN6String10invalidateEv>:
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
    1e12:	ec 01       	movw	r28, r24
    1e14:	88 81       	ld	r24, Y
    1e16:	99 81       	ldd	r25, Y+1	; 0x01
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	11 f0       	breq	.+4      	; 0x1e20 <_ZN6String10invalidateEv+0x12>
    1e1c:	0e 94 b6 18 	call	0x316c	; 0x316c <free>
    1e20:	19 82       	std	Y+1, r1	; 0x01
    1e22:	18 82       	st	Y, r1
    1e24:	1d 82       	std	Y+5, r1	; 0x05
    1e26:	1c 82       	std	Y+4, r1	; 0x04
    1e28:	1b 82       	std	Y+3, r1	; 0x03
    1e2a:	1a 82       	std	Y+2, r1	; 0x02
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	08 95       	ret

00001e32 <_ZN6String12changeBufferEj>:
    1e32:	0f 93       	push	r16
    1e34:	1f 93       	push	r17
    1e36:	cf 93       	push	r28
    1e38:	df 93       	push	r29
    1e3a:	ec 01       	movw	r28, r24
    1e3c:	8b 01       	movw	r16, r22
    1e3e:	6f 5f       	subi	r22, 0xFF	; 255
    1e40:	7f 4f       	sbci	r23, 0xFF	; 255
    1e42:	88 81       	ld	r24, Y
    1e44:	99 81       	ldd	r25, Y+1	; 0x01
    1e46:	0e 94 3f 19 	call	0x327e	; 0x327e <realloc>
    1e4a:	00 97       	sbiw	r24, 0x00	; 0
    1e4c:	31 f0       	breq	.+12     	; 0x1e5a <_ZN6String12changeBufferEj+0x28>
    1e4e:	99 83       	std	Y+1, r25	; 0x01
    1e50:	88 83       	st	Y, r24
    1e52:	1b 83       	std	Y+3, r17	; 0x03
    1e54:	0a 83       	std	Y+2, r16	; 0x02
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	01 c0       	rjmp	.+2      	; 0x1e5c <_ZN6String12changeBufferEj+0x2a>
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	df 91       	pop	r29
    1e5e:	cf 91       	pop	r28
    1e60:	1f 91       	pop	r17
    1e62:	0f 91       	pop	r16
    1e64:	08 95       	ret

00001e66 <_ZN6String7reserveEj>:
    1e66:	cf 93       	push	r28
    1e68:	df 93       	push	r29
    1e6a:	ec 01       	movw	r28, r24
    1e6c:	88 81       	ld	r24, Y
    1e6e:	99 81       	ldd	r25, Y+1	; 0x01
    1e70:	89 2b       	or	r24, r25
    1e72:	29 f0       	breq	.+10     	; 0x1e7e <_ZN6String7reserveEj+0x18>
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	9b 81       	ldd	r25, Y+3	; 0x03
    1e78:	86 17       	cp	r24, r22
    1e7a:	97 07       	cpc	r25, r23
    1e7c:	60 f4       	brcc	.+24     	; 0x1e96 <_ZN6String7reserveEj+0x30>
    1e7e:	ce 01       	movw	r24, r28
    1e80:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <_ZN6String12changeBufferEj>
    1e84:	88 23       	and	r24, r24
    1e86:	41 f0       	breq	.+16     	; 0x1e98 <_ZN6String7reserveEj+0x32>
    1e88:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8c:	89 2b       	or	r24, r25
    1e8e:	19 f4       	brne	.+6      	; 0x1e96 <_ZN6String7reserveEj+0x30>
    1e90:	e8 81       	ld	r30, Y
    1e92:	f9 81       	ldd	r31, Y+1	; 0x01
    1e94:	10 82       	st	Z, r1
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	df 91       	pop	r29
    1e9a:	cf 91       	pop	r28
    1e9c:	08 95       	ret

00001e9e <_ZN6String4copyEPKcj>:
    1e9e:	ef 92       	push	r14
    1ea0:	ff 92       	push	r15
    1ea2:	0f 93       	push	r16
    1ea4:	1f 93       	push	r17
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
    1eaa:	ec 01       	movw	r28, r24
    1eac:	7b 01       	movw	r14, r22
    1eae:	8a 01       	movw	r16, r20
    1eb0:	ba 01       	movw	r22, r20
    1eb2:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <_ZN6String7reserveEj>
    1eb6:	81 11       	cpse	r24, r1
    1eb8:	04 c0       	rjmp	.+8      	; 0x1ec2 <_ZN6String4copyEPKcj+0x24>
    1eba:	ce 01       	movw	r24, r28
    1ebc:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <_ZN6String10invalidateEv>
    1ec0:	07 c0       	rjmp	.+14     	; 0x1ed0 <_ZN6String4copyEPKcj+0x32>
    1ec2:	1d 83       	std	Y+5, r17	; 0x05
    1ec4:	0c 83       	std	Y+4, r16	; 0x04
    1ec6:	b7 01       	movw	r22, r14
    1ec8:	88 81       	ld	r24, Y
    1eca:	99 81       	ldd	r25, Y+1	; 0x01
    1ecc:	0e 94 0e 1a 	call	0x341c	; 0x341c <strcpy>
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	df 91       	pop	r29
    1ed4:	cf 91       	pop	r28
    1ed6:	1f 91       	pop	r17
    1ed8:	0f 91       	pop	r16
    1eda:	ff 90       	pop	r15
    1edc:	ef 90       	pop	r14
    1ede:	08 95       	ret

00001ee0 <_ZN6StringC1EPKc>:
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	11 82       	std	Z+1, r1	; 0x01
    1ee4:	10 82       	st	Z, r1
    1ee6:	13 82       	std	Z+3, r1	; 0x03
    1ee8:	12 82       	std	Z+2, r1	; 0x02
    1eea:	15 82       	std	Z+5, r1	; 0x05
    1eec:	14 82       	std	Z+4, r1	; 0x04
    1eee:	61 15       	cp	r22, r1
    1ef0:	71 05       	cpc	r23, r1
    1ef2:	51 f0       	breq	.+20     	; 0x1f08 <_ZN6StringC1EPKc+0x28>
    1ef4:	fb 01       	movw	r30, r22
    1ef6:	01 90       	ld	r0, Z+
    1ef8:	00 20       	and	r0, r0
    1efa:	e9 f7       	brne	.-6      	; 0x1ef6 <_ZN6StringC1EPKc+0x16>
    1efc:	31 97       	sbiw	r30, 0x01	; 1
    1efe:	af 01       	movw	r20, r30
    1f00:	46 1b       	sub	r20, r22
    1f02:	57 0b       	sbc	r21, r23
    1f04:	0c 94 4f 0f 	jmp	0x1e9e	; 0x1e9e <_ZN6String4copyEPKcj>
    1f08:	08 95       	ret

00001f0a <_ZN6StringaSERKS_>:
    1f0a:	cf 93       	push	r28
    1f0c:	df 93       	push	r29
    1f0e:	ec 01       	movw	r28, r24
    1f10:	fb 01       	movw	r30, r22
    1f12:	86 17       	cp	r24, r22
    1f14:	97 07       	cpc	r25, r23
    1f16:	61 f0       	breq	.+24     	; 0x1f30 <_ZN6StringaSERKS_+0x26>
    1f18:	60 81       	ld	r22, Z
    1f1a:	71 81       	ldd	r23, Z+1	; 0x01
    1f1c:	61 15       	cp	r22, r1
    1f1e:	71 05       	cpc	r23, r1
    1f20:	29 f0       	breq	.+10     	; 0x1f2c <_ZN6StringaSERKS_+0x22>
    1f22:	44 81       	ldd	r20, Z+4	; 0x04
    1f24:	55 81       	ldd	r21, Z+5	; 0x05
    1f26:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <_ZN6String4copyEPKcj>
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <_ZN6StringaSERKS_+0x26>
    1f2c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <_ZN6String10invalidateEv>
    1f30:	ce 01       	movw	r24, r28
    1f32:	df 91       	pop	r29
    1f34:	cf 91       	pop	r28
    1f36:	08 95       	ret

00001f38 <_ZN6StringC1ERKS_>:
    1f38:	fc 01       	movw	r30, r24
    1f3a:	11 82       	std	Z+1, r1	; 0x01
    1f3c:	10 82       	st	Z, r1
    1f3e:	13 82       	std	Z+3, r1	; 0x03
    1f40:	12 82       	std	Z+2, r1	; 0x02
    1f42:	15 82       	std	Z+5, r1	; 0x05
    1f44:	14 82       	std	Z+4, r1	; 0x04
    1f46:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <_ZN6StringaSERKS_>

00001f4a <_ZN6StringaSEPKc>:
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
    1f4e:	ec 01       	movw	r28, r24
    1f50:	61 15       	cp	r22, r1
    1f52:	71 05       	cpc	r23, r1
    1f54:	59 f0       	breq	.+22     	; 0x1f6c <_ZN6StringaSEPKc+0x22>
    1f56:	fb 01       	movw	r30, r22
    1f58:	01 90       	ld	r0, Z+
    1f5a:	00 20       	and	r0, r0
    1f5c:	e9 f7       	brne	.-6      	; 0x1f58 <_ZN6StringaSEPKc+0xe>
    1f5e:	31 97       	sbiw	r30, 0x01	; 1
    1f60:	af 01       	movw	r20, r30
    1f62:	46 1b       	sub	r20, r22
    1f64:	57 0b       	sbc	r21, r23
    1f66:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <_ZN6String4copyEPKcj>
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <_ZN6StringaSEPKc+0x26>
    1f6c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <_ZN6String10invalidateEv>
    1f70:	ce 01       	movw	r24, r28
    1f72:	df 91       	pop	r29
    1f74:	cf 91       	pop	r28
    1f76:	08 95       	ret

00001f78 <_ZN6StringC1Efh>:
    1f78:	ef 92       	push	r14
    1f7a:	ff 92       	push	r15
    1f7c:	0f 93       	push	r16
    1f7e:	1f 93       	push	r17
    1f80:	cf 93       	push	r28
    1f82:	df 93       	push	r29
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	a1 97       	sbiw	r28, 0x21	; 33
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	f8 94       	cli
    1f8e:	de bf       	out	0x3e, r29	; 62
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	cd bf       	out	0x3d, r28	; 61
    1f94:	7c 01       	movw	r14, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	ba 01       	movw	r22, r20
    1f9a:	f7 01       	movw	r30, r14
    1f9c:	11 82       	std	Z+1, r1	; 0x01
    1f9e:	10 82       	st	Z, r1
    1fa0:	13 82       	std	Z+3, r1	; 0x03
    1fa2:	12 82       	std	Z+2, r1	; 0x02
    1fa4:	15 82       	std	Z+5, r1	; 0x05
    1fa6:	14 82       	std	Z+4, r1	; 0x04
    1fa8:	42 e0       	ldi	r20, 0x02	; 2
    1faa:	42 0f       	add	r20, r18
    1fac:	8e 01       	movw	r16, r28
    1fae:	0f 5f       	subi	r16, 0xFF	; 255
    1fb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb2:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <dtostrf>
    1fb6:	bc 01       	movw	r22, r24
    1fb8:	c7 01       	movw	r24, r14
    1fba:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN6StringaSEPKc>
    1fbe:	a1 96       	adiw	r28, 0x21	; 33
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	df 91       	pop	r29
    1fcc:	cf 91       	pop	r28
    1fce:	1f 91       	pop	r17
    1fd0:	0f 91       	pop	r16
    1fd2:	ff 90       	pop	r15
    1fd4:	ef 90       	pop	r14
    1fd6:	08 95       	ret

00001fd8 <_ZN6String6concatEPKcj>:
    1fd8:	ef 92       	push	r14
    1fda:	ff 92       	push	r15
    1fdc:	0f 93       	push	r16
    1fde:	1f 93       	push	r17
    1fe0:	cf 93       	push	r28
    1fe2:	df 93       	push	r29
    1fe4:	61 15       	cp	r22, r1
    1fe6:	71 05       	cpc	r23, r1
    1fe8:	11 f4       	brne	.+4      	; 0x1fee <_ZN6String6concatEPKcj+0x16>
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	1c c0       	rjmp	.+56     	; 0x2026 <_ZN6String6concatEPKcj+0x4e>
    1fee:	41 15       	cp	r20, r1
    1ff0:	51 05       	cpc	r21, r1
    1ff2:	c1 f0       	breq	.+48     	; 0x2024 <_ZN6String6concatEPKcj+0x4c>
    1ff4:	7b 01       	movw	r14, r22
    1ff6:	ec 01       	movw	r28, r24
    1ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffa:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffc:	8a 01       	movw	r16, r20
    1ffe:	08 0f       	add	r16, r24
    2000:	19 1f       	adc	r17, r25
    2002:	b8 01       	movw	r22, r16
    2004:	ce 01       	movw	r24, r28
    2006:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <_ZN6String7reserveEj>
    200a:	88 23       	and	r24, r24
    200c:	71 f3       	breq	.-36     	; 0x1fea <_ZN6String6concatEPKcj+0x12>
    200e:	28 81       	ld	r18, Y
    2010:	39 81       	ldd	r19, Y+1	; 0x01
    2012:	8c 81       	ldd	r24, Y+4	; 0x04
    2014:	9d 81       	ldd	r25, Y+5	; 0x05
    2016:	b7 01       	movw	r22, r14
    2018:	82 0f       	add	r24, r18
    201a:	93 1f       	adc	r25, r19
    201c:	0e 94 0e 1a 	call	0x341c	; 0x341c <strcpy>
    2020:	1d 83       	std	Y+5, r17	; 0x05
    2022:	0c 83       	std	Y+4, r16	; 0x04
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	df 91       	pop	r29
    2028:	cf 91       	pop	r28
    202a:	1f 91       	pop	r17
    202c:	0f 91       	pop	r16
    202e:	ff 90       	pop	r15
    2030:	ef 90       	pop	r14
    2032:	08 95       	ret

00002034 <_ZN6String6concatEm>:
    2034:	ef 92       	push	r14
    2036:	ff 92       	push	r15
    2038:	0f 93       	push	r16
    203a:	1f 93       	push	r17
    203c:	cf 93       	push	r28
    203e:	df 93       	push	r29
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	2d 97       	sbiw	r28, 0x0d	; 13
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	de bf       	out	0x3e, r29	; 62
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	cd bf       	out	0x3d, r28	; 61
    2050:	7c 01       	movw	r14, r24
    2052:	cb 01       	movw	r24, r22
    2054:	ba 01       	movw	r22, r20
    2056:	2a e0       	ldi	r18, 0x0A	; 10
    2058:	8e 01       	movw	r16, r28
    205a:	0f 5f       	subi	r16, 0xFF	; 255
    205c:	1f 4f       	sbci	r17, 0xFF	; 255
    205e:	a8 01       	movw	r20, r16
    2060:	0e 94 15 1a 	call	0x342a	; 0x342a <__ultoa_ncheck>
    2064:	f8 01       	movw	r30, r16
    2066:	01 90       	ld	r0, Z+
    2068:	00 20       	and	r0, r0
    206a:	e9 f7       	brne	.-6      	; 0x2066 <_ZN6String6concatEm+0x32>
    206c:	31 97       	sbiw	r30, 0x01	; 1
    206e:	af 01       	movw	r20, r30
    2070:	40 1b       	sub	r20, r16
    2072:	51 0b       	sbc	r21, r17
    2074:	b8 01       	movw	r22, r16
    2076:	c7 01       	movw	r24, r14
    2078:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN6String6concatEPKcj>
    207c:	2d 96       	adiw	r28, 0x0d	; 13
    207e:	0f b6       	in	r0, 0x3f	; 63
    2080:	f8 94       	cli
    2082:	de bf       	out	0x3e, r29	; 62
    2084:	0f be       	out	0x3f, r0	; 63
    2086:	cd bf       	out	0x3d, r28	; 61
    2088:	df 91       	pop	r29
    208a:	cf 91       	pop	r28
    208c:	1f 91       	pop	r17
    208e:	0f 91       	pop	r16
    2090:	ff 90       	pop	r15
    2092:	ef 90       	pop	r14
    2094:	08 95       	ret

00002096 <_ZplRK15StringSumHelperRK6String>:
    2096:	cf 93       	push	r28
    2098:	df 93       	push	r29
    209a:	ec 01       	movw	r28, r24
    209c:	fb 01       	movw	r30, r22
    209e:	44 81       	ldd	r20, Z+4	; 0x04
    20a0:	55 81       	ldd	r21, Z+5	; 0x05
    20a2:	60 81       	ld	r22, Z
    20a4:	71 81       	ldd	r23, Z+1	; 0x01
    20a6:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN6String6concatEPKcj>
    20aa:	81 11       	cpse	r24, r1
    20ac:	03 c0       	rjmp	.+6      	; 0x20b4 <_ZplRK15StringSumHelperRK6String+0x1e>
    20ae:	ce 01       	movw	r24, r28
    20b0:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <_ZN6String10invalidateEv>
    20b4:	ce 01       	movw	r24, r28
    20b6:	df 91       	pop	r29
    20b8:	cf 91       	pop	r28
    20ba:	08 95       	ret

000020bc <_ZplRK15StringSumHelperPKc>:
    20bc:	cf 93       	push	r28
    20be:	df 93       	push	r29
    20c0:	ec 01       	movw	r28, r24
    20c2:	61 15       	cp	r22, r1
    20c4:	71 05       	cpc	r23, r1
    20c6:	61 f0       	breq	.+24     	; 0x20e0 <_ZplRK15StringSumHelperPKc+0x24>
    20c8:	fb 01       	movw	r30, r22
    20ca:	01 90       	ld	r0, Z+
    20cc:	00 20       	and	r0, r0
    20ce:	e9 f7       	brne	.-6      	; 0x20ca <_ZplRK15StringSumHelperPKc+0xe>
    20d0:	31 97       	sbiw	r30, 0x01	; 1
    20d2:	af 01       	movw	r20, r30
    20d4:	46 1b       	sub	r20, r22
    20d6:	57 0b       	sbc	r21, r23
    20d8:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN6String6concatEPKcj>
    20dc:	81 11       	cpse	r24, r1
    20de:	03 c0       	rjmp	.+6      	; 0x20e6 <_ZplRK15StringSumHelperPKc+0x2a>
    20e0:	ce 01       	movw	r24, r28
    20e2:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <_ZN6String10invalidateEv>
    20e6:	ce 01       	movw	r24, r28
    20e8:	df 91       	pop	r29
    20ea:	cf 91       	pop	r28
    20ec:	08 95       	ret

000020ee <_ZplRK15StringSumHelperm>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
{
    20ee:	cf 93       	push	r28
    20f0:	df 93       	push	r29
    20f2:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    20f4:	0e 94 1a 10 	call	0x2034	; 0x2034 <_ZN6String6concatEm>
    20f8:	81 11       	cpse	r24, r1
    20fa:	03 c0       	rjmp	.+6      	; 0x2102 <_ZplRK15StringSumHelperm+0x14>
    20fc:	ce 01       	movw	r24, r28
    20fe:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <_ZN6String10invalidateEv>
	return a;
}
    2102:	ce 01       	movw	r24, r28
    2104:	df 91       	pop	r29
    2106:	cf 91       	pop	r28
    2108:	08 95       	ret

0000210a <_ZN6U8GLIB7initI2CEP10_u8g_dev_th>:
  private:
    u8g_t u8g;
    u8g_uint_t tx, ty;          // current position for the Print base class procedures
    uint8_t is_begin;

    void prepare(void) { tx = 0; ty = 0; is_begin = 0; }
    210a:	fc 01       	movw	r30, r24
    210c:	13 ae       	std	Z+59, r1	; 0x3b
    210e:	14 ae       	std	Z+60, r1	; 0x3c
    2110:	15 ae       	std	Z+61, r1	; 0x3d
}

uint8_t U8GLIB::initI2C(u8g_dev_t *dev, uint8_t options)
{
  prepare();
  return u8g_InitI2C(&u8g, dev, options);
    2112:	04 96       	adiw	r24, 0x04	; 4
    2114:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <u8g_InitI2C>

00002118 <u8g_dev_ssd1306_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    2118:	af 92       	push	r10
    211a:	bf 92       	push	r11
    211c:	cf 92       	push	r12
    211e:	df 92       	push	r13
    2120:	ff 92       	push	r15
    2122:	0f 93       	push	r16
    2124:	1f 93       	push	r17
    2126:	cf 93       	push	r28
    2128:	df 93       	push	r29
    212a:	8c 01       	movw	r16, r24
    212c:	eb 01       	movw	r28, r22
    212e:	f4 2e       	mov	r15, r20
    2130:	69 01       	movw	r12, r18
  switch(msg)
    2132:	80 e1       	ldi	r24, 0x10	; 16
    2134:	48 17       	cp	r20, r24
    2136:	b1 f1       	breq	.+108    	; 0x21a4 <u8g_dev_ssd1306_128x64_fn+0x8c>
    2138:	84 17       	cp	r24, r20
    213a:	70 f0       	brcs	.+28     	; 0x2158 <u8g_dev_ssd1306_128x64_fn+0x40>
    213c:	ea e0       	ldi	r30, 0x0A	; 10
    213e:	4e 13       	cpse	r20, r30
    2140:	3c c0       	rjmp	.+120    	; 0x21ba <u8g_dev_ssd1306_128x64_fn+0xa2>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
    2142:	42 e0       	ldi	r20, 0x02	; 2
    2144:	c8 01       	movw	r24, r16
    2146:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_adafruit2_init_seq);
    214a:	48 ed       	ldi	r20, 0xD8	; 216
    214c:	51 e0       	ldi	r21, 0x01	; 1
    214e:	be 01       	movw	r22, r28
    2150:	c8 01       	movw	r24, r16
    2152:	0e 94 38 16 	call	0x2c70	; 0x2c70 <u8g_WriteEscSeqP>
      break;
    2156:	31 c0       	rjmp	.+98     	; 0x21ba <u8g_dev_ssd1306_128x64_fn+0xa2>
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
    2158:	f1 e1       	ldi	r31, 0x11	; 17
    215a:	4f 17       	cp	r20, r31
    215c:	31 f1       	breq	.+76     	; 0x21aa <u8g_dev_ssd1306_128x64_fn+0x92>
    215e:	85 e1       	ldi	r24, 0x15	; 21
    2160:	48 13       	cpse	r20, r24
    2162:	2b c0       	rjmp	.+86     	; 0x21ba <u8g_dev_ssd1306_128x64_fn+0xa2>
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    2164:	aa 80       	ldd	r10, Y+2	; 0x02
    2166:	bb 80       	ldd	r11, Y+3	; 0x03
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
    2168:	40 ed       	ldi	r20, 0xD0	; 208
    216a:	51 e0       	ldi	r21, 0x01	; 1
    216c:	c8 01       	movw	r24, r16
    216e:	0e 94 38 16 	call	0x2c70	; 0x2c70 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
    2172:	f5 01       	movw	r30, r10
    2174:	44 81       	ldd	r20, Z+4	; 0x04
    2176:	40 6b       	ori	r20, 0xB0	; 176
    2178:	be 01       	movw	r22, r28
    217a:	c8 01       	movw	r24, r16
    217c:	0e 94 28 16 	call	0x2c50	; 0x2c50 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
    2180:	41 e0       	ldi	r20, 0x01	; 1
    2182:	be 01       	movw	r22, r28
    2184:	c8 01       	movw	r24, r16
    2186:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
    218a:	ae 01       	movw	r20, r28
    218c:	b8 01       	movw	r22, r16
    218e:	c5 01       	movw	r24, r10
    2190:	0e 94 48 14 	call	0x2890	; 0x2890 <u8g_pb_WriteBuffer>
    2194:	88 23       	and	r24, r24
    2196:	01 f1       	breq	.+64     	; 0x21d8 <u8g_dev_ssd1306_128x64_fn+0xc0>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
    2198:	40 e0       	ldi	r20, 0x00	; 0
    219a:	be 01       	movw	r22, r28
    219c:	c8 01       	movw	r24, r16
    219e:	0e 94 02 16 	call	0x2c04	; 0x2c04 <u8g_SetChipSelect>
      }
      break;
    21a2:	0b c0       	rjmp	.+22     	; 0x21ba <u8g_dev_ssd1306_128x64_fn+0xa2>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
    21a4:	47 ec       	ldi	r20, 0xC7	; 199
    21a6:	51 e0       	ldi	r21, 0x01	; 1
    21a8:	02 c0       	rjmp	.+4      	; 0x21ae <u8g_dev_ssd1306_128x64_fn+0x96>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
    21aa:	4c eb       	ldi	r20, 0xBC	; 188
    21ac:	51 e0       	ldi	r21, 0x01	; 1
    21ae:	be 01       	movw	r22, r28
    21b0:	c8 01       	movw	r24, r16
    21b2:	0e 94 38 16 	call	0x2c70	; 0x2c70 <u8g_WriteEscSeqP>
      return 1;
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	0f c0       	rjmp	.+30     	; 0x21d8 <u8g_dev_ssd1306_128x64_fn+0xc0>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
    21ba:	96 01       	movw	r18, r12
    21bc:	4f 2d       	mov	r20, r15
    21be:	be 01       	movw	r22, r28
    21c0:	c8 01       	movw	r24, r16
}
    21c2:	df 91       	pop	r29
    21c4:	cf 91       	pop	r28
    21c6:	1f 91       	pop	r17
    21c8:	0f 91       	pop	r16
    21ca:	ff 90       	pop	r15
    21cc:	df 90       	pop	r13
    21ce:	cf 90       	pop	r12
    21d0:	bf 90       	pop	r11
    21d2:	af 90       	pop	r10
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
      return 1;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
    21d4:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <u8g_dev_pb8v1_base_fn>
}
    21d8:	df 91       	pop	r29
    21da:	cf 91       	pop	r28
    21dc:	1f 91       	pop	r17
    21de:	0f 91       	pop	r16
    21e0:	ff 90       	pop	r15
    21e2:	df 90       	pop	r13
    21e4:	cf 90       	pop	r12
    21e6:	bf 90       	pop	r11
    21e8:	af 90       	pop	r10
    21ea:	08 95       	ret

000021ec <u8g_font_get_word>:
  cap_a = u8g_font_GetCapitalAHeight(u8g->font);
  u8g_font_calc_str_min_box(u8g, s, &buf);
  if ( buf.y_max < cap_a )
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}
    21ec:	fc 01       	movw	r30, r24
    21ee:	e6 0f       	add	r30, r22
    21f0:	f1 1d       	adc	r31, r1
    21f2:	84 91       	lpm	r24, Z
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	98 2f       	mov	r25, r24
    21f8:	88 27       	eor	r24, r24
    21fa:	31 96       	adiw	r30, 0x01	; 1
    21fc:	e4 91       	lpm	r30, Z
    21fe:	8e 0f       	add	r24, r30
    2200:	91 1d       	adc	r25, r1
    2202:	08 95       	ret

00002204 <u8g_font_GetFormat>:
    2204:	fc 01       	movw	r30, r24
    2206:	84 91       	lpm	r24, Z
    2208:	08 95       	ret

0000220a <u8g_font_GetFontGlyphStructureSize>:
    220a:	0e 94 02 11 	call	0x2204	; 0x2204 <u8g_font_GetFormat>
    220e:	88 23       	and	r24, r24
    2210:	21 f0       	breq	.+8      	; 0x221a <u8g_font_GetFontGlyphStructureSize+0x10>
    2212:	82 30       	cpi	r24, 0x02	; 2
    2214:	11 f0       	breq	.+4      	; 0x221a <u8g_font_GetFontGlyphStructureSize+0x10>
    2216:	83 e0       	ldi	r24, 0x03	; 3
    2218:	08 95       	ret
    221a:	86 e0       	ldi	r24, 0x06	; 6
    221c:	08 95       	ret

0000221e <u8g_font_calc_vref_font>:
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	08 95       	ret

00002222 <u8g_font_GetEncoding65Pos>:
    2222:	66 e0       	ldi	r22, 0x06	; 6
    2224:	0c 94 f6 10 	jmp	0x21ec	; 0x21ec <u8g_font_get_word>

00002228 <u8g_font_GetEncoding97Pos>:
    2228:	68 e0       	ldi	r22, 0x08	; 8
    222a:	0c 94 f6 10 	jmp	0x21ec	; 0x21ec <u8g_font_get_word>

0000222e <u8g_font_GetFontStartEncoding>:
    222e:	0a 96       	adiw	r24, 0x0a	; 10
    2230:	fc 01       	movw	r30, r24
    2232:	84 91       	lpm	r24, Z
    2234:	08 95       	ret

00002236 <u8g_font_GetFontEndEncoding>:
    2236:	0b 96       	adiw	r24, 0x0b	; 11
    2238:	fc 01       	movw	r30, r24
    223a:	84 91       	lpm	r24, Z
    223c:	08 95       	ret

0000223e <u8g_GetGlyph>:
    223e:	bf 92       	push	r11
    2240:	cf 92       	push	r12
    2242:	df 92       	push	r13
    2244:	ef 92       	push	r14
    2246:	ff 92       	push	r15
    2248:	0f 93       	push	r16
    224a:	1f 93       	push	r17
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
    2250:	8c 01       	movw	r16, r24
    2252:	e6 2e       	mov	r14, r22
    2254:	dc 01       	movw	r26, r24
    2256:	14 96       	adiw	r26, 0x04	; 4
    2258:	cd 91       	ld	r28, X+
    225a:	dc 91       	ld	r29, X
    225c:	15 97       	sbiw	r26, 0x05	; 5
    225e:	ce 01       	movw	r24, r28
    2260:	0e 94 02 11 	call	0x2204	; 0x2204 <u8g_font_GetFormat>
    2264:	f8 2e       	mov	r15, r24
    2266:	f8 01       	movw	r30, r16
    2268:	84 81       	ldd	r24, Z+4	; 0x04
    226a:	95 81       	ldd	r25, Z+5	; 0x05
    226c:	0e 94 05 11 	call	0x220a	; 0x220a <u8g_font_GetFontGlyphStructureSize>
    2270:	c8 2e       	mov	r12, r24
    2272:	f1 e0       	ldi	r31, 0x01	; 1
    2274:	ff 12       	cpse	r15, r31
    2276:	03 c0       	rjmp	.+6      	; 0x227e <u8g_GetGlyph+0x40>
    2278:	2f e0       	ldi	r18, 0x0F	; 15
    227a:	b2 2e       	mov	r11, r18
    227c:	02 c0       	rjmp	.+4      	; 0x2282 <u8g_GetGlyph+0x44>
    227e:	bb 24       	eor	r11, r11
    2280:	ba 94       	dec	r11
    2282:	d8 01       	movw	r26, r16
    2284:	14 96       	adiw	r26, 0x04	; 4
    2286:	8d 91       	ld	r24, X+
    2288:	9c 91       	ld	r25, X
    228a:	15 97       	sbiw	r26, 0x05	; 5
    228c:	0e 94 17 11 	call	0x222e	; 0x222e <u8g_font_GetFontStartEncoding>
    2290:	f8 2e       	mov	r15, r24
    2292:	f8 01       	movw	r30, r16
    2294:	84 81       	ldd	r24, Z+4	; 0x04
    2296:	95 81       	ldd	r25, Z+5	; 0x05
    2298:	0e 94 1b 11 	call	0x2236	; 0x2236 <u8g_font_GetFontEndEncoding>
    229c:	d8 2e       	mov	r13, r24
    229e:	d8 01       	movw	r26, r16
    22a0:	14 96       	adiw	r26, 0x04	; 4
    22a2:	8d 91       	ld	r24, X+
    22a4:	9c 91       	ld	r25, X
    22a6:	15 97       	sbiw	r26, 0x05	; 5
    22a8:	0e 94 14 11 	call	0x2228	; 0x2228 <u8g_font_GetEncoding97Pos>
    22ac:	b0 e6       	ldi	r27, 0x60	; 96
    22ae:	be 15       	cp	r27, r14
    22b0:	38 f4       	brcc	.+14     	; 0x22c0 <u8g_GetGlyph+0x82>
    22b2:	00 97       	sbiw	r24, 0x00	; 0
    22b4:	29 f0       	breq	.+10     	; 0x22c0 <u8g_GetGlyph+0x82>
    22b6:	c8 0f       	add	r28, r24
    22b8:	d9 1f       	adc	r29, r25
    22ba:	91 e6       	ldi	r25, 0x61	; 97
    22bc:	f9 2e       	mov	r15, r25
    22be:	10 c0       	rjmp	.+32     	; 0x22e0 <u8g_GetGlyph+0xa2>
    22c0:	f8 01       	movw	r30, r16
    22c2:	84 81       	ldd	r24, Z+4	; 0x04
    22c4:	95 81       	ldd	r25, Z+5	; 0x05
    22c6:	0e 94 11 11 	call	0x2222	; 0x2222 <u8g_font_GetEncoding65Pos>
    22ca:	f0 e4       	ldi	r31, 0x40	; 64
    22cc:	fe 15       	cp	r31, r14
    22ce:	38 f4       	brcc	.+14     	; 0x22de <u8g_GetGlyph+0xa0>
    22d0:	00 97       	sbiw	r24, 0x00	; 0
    22d2:	29 f0       	breq	.+10     	; 0x22de <u8g_GetGlyph+0xa0>
    22d4:	c8 0f       	add	r28, r24
    22d6:	d9 1f       	adc	r29, r25
    22d8:	81 e4       	ldi	r24, 0x41	; 65
    22da:	f8 2e       	mov	r15, r24
    22dc:	01 c0       	rjmp	.+2      	; 0x22e0 <u8g_GetGlyph+0xa2>
    22de:	61 96       	adiw	r28, 0x11	; 17
    22e0:	de 14       	cp	r13, r14
    22e2:	90 f4       	brcc	.+36     	; 0x2308 <u8g_GetGlyph+0xca>
    22e4:	d8 01       	movw	r26, r16
    22e6:	50 96       	adiw	r26, 0x10	; 16
    22e8:	1c 92       	st	X, r1
    22ea:	50 97       	sbiw	r26, 0x10	; 16
    22ec:	53 96       	adiw	r26, 0x13	; 19
    22ee:	1c 92       	st	X, r1
    22f0:	53 97       	sbiw	r26, 0x13	; 19
    22f2:	54 96       	adiw	r26, 0x14	; 20
    22f4:	1c 92       	st	X, r1
    22f6:	54 97       	sbiw	r26, 0x14	; 20
    22f8:	51 96       	adiw	r26, 0x11	; 17
    22fa:	1c 92       	st	X, r1
    22fc:	51 97       	sbiw	r26, 0x11	; 17
    22fe:	52 96       	adiw	r26, 0x12	; 18
    2300:	1c 92       	st	X, r1
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	67 c0       	rjmp	.+206    	; 0x23d6 <u8g_GetGlyph+0x198>
    2308:	df 14       	cp	r13, r15
    230a:	60 f3       	brcs	.-40     	; 0x22e4 <u8g_GetGlyph+0xa6>
    230c:	8c 2d       	mov	r24, r12
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	fe 01       	movw	r30, r28
    2312:	24 91       	lpm	r18, Z
    2314:	2f 3f       	cpi	r18, 0xFF	; 255
    2316:	11 f4       	brne	.+4      	; 0x231c <u8g_GetGlyph+0xde>
    2318:	21 96       	adiw	r28, 0x01	; 1
    231a:	58 c0       	rjmp	.+176    	; 0x23cc <u8g_GetGlyph+0x18e>
    231c:	fe 10       	cpse	r15, r14
    231e:	4d c0       	rjmp	.+154    	; 0x23ba <u8g_GetGlyph+0x17c>
    2320:	d8 01       	movw	r26, r16
    2322:	14 96       	adiw	r26, 0x04	; 4
    2324:	8d 91       	ld	r24, X+
    2326:	9c 91       	ld	r25, X
    2328:	15 97       	sbiw	r26, 0x05	; 5
    232a:	0e 94 02 11 	call	0x2204	; 0x2204 <u8g_font_GetFormat>
    232e:	9e 01       	movw	r18, r28
    2330:	2f 5f       	subi	r18, 0xFF	; 255
    2332:	3f 4f       	sbci	r19, 0xFF	; 255
    2334:	fe 01       	movw	r30, r28
    2336:	88 23       	and	r24, r24
    2338:	11 f0       	breq	.+4      	; 0x233e <u8g_GetGlyph+0x100>
    233a:	82 30       	cpi	r24, 0x02	; 2
    233c:	e1 f4       	brne	.+56     	; 0x2376 <u8g_GetGlyph+0x138>
    233e:	84 91       	lpm	r24, Z
    2340:	d8 01       	movw	r26, r16
    2342:	53 96       	adiw	r26, 0x13	; 19
    2344:	8c 93       	st	X, r24
    2346:	53 97       	sbiw	r26, 0x13	; 19
    2348:	f9 01       	movw	r30, r18
    234a:	24 91       	lpm	r18, Z
    234c:	54 96       	adiw	r26, 0x14	; 20
    234e:	2c 93       	st	X, r18
    2350:	54 97       	sbiw	r26, 0x14	; 20
    2352:	fe 01       	movw	r30, r28
    2354:	33 96       	adiw	r30, 0x03	; 3
    2356:	e4 91       	lpm	r30, Z
    2358:	50 96       	adiw	r26, 0x10	; 16
    235a:	ec 93       	st	X, r30
    235c:	50 97       	sbiw	r26, 0x10	; 16
    235e:	fe 01       	movw	r30, r28
    2360:	34 96       	adiw	r30, 0x04	; 4
    2362:	e4 91       	lpm	r30, Z
    2364:	51 96       	adiw	r26, 0x11	; 17
    2366:	ec 93       	st	X, r30
    2368:	51 97       	sbiw	r26, 0x11	; 17
    236a:	fe 01       	movw	r30, r28
    236c:	35 96       	adiw	r30, 0x05	; 5
    236e:	e4 91       	lpm	r30, Z
    2370:	52 96       	adiw	r26, 0x12	; 18
    2372:	ec 93       	st	X, r30
    2374:	20 c0       	rjmp	.+64     	; 0x23b6 <u8g_GetGlyph+0x178>
    2376:	84 91       	lpm	r24, Z
    2378:	98 2f       	mov	r25, r24
    237a:	9f 70       	andi	r25, 0x0F	; 15
    237c:	92 50       	subi	r25, 0x02	; 2
    237e:	d8 01       	movw	r26, r16
    2380:	52 96       	adiw	r26, 0x12	; 18
    2382:	9c 93       	st	X, r25
    2384:	52 97       	sbiw	r26, 0x12	; 18
    2386:	82 95       	swap	r24
    2388:	8f 70       	andi	r24, 0x0F	; 15
    238a:	51 96       	adiw	r26, 0x11	; 17
    238c:	8c 93       	st	X, r24
    238e:	51 97       	sbiw	r26, 0x11	; 17
    2390:	f9 01       	movw	r30, r18
    2392:	24 91       	lpm	r18, Z
    2394:	82 2f       	mov	r24, r18
    2396:	8f 70       	andi	r24, 0x0F	; 15
    2398:	54 96       	adiw	r26, 0x14	; 20
    239a:	8c 93       	st	X, r24
    239c:	54 97       	sbiw	r26, 0x14	; 20
    239e:	22 95       	swap	r18
    23a0:	2f 70       	andi	r18, 0x0F	; 15
    23a2:	53 96       	adiw	r26, 0x13	; 19
    23a4:	2c 93       	st	X, r18
    23a6:	53 97       	sbiw	r26, 0x13	; 19
    23a8:	fe 01       	movw	r30, r28
    23aa:	32 96       	adiw	r30, 0x02	; 2
    23ac:	e4 91       	lpm	r30, Z
    23ae:	e2 95       	swap	r30
    23b0:	ef 70       	andi	r30, 0x0F	; 15
    23b2:	50 96       	adiw	r26, 0x10	; 16
    23b4:	ec 93       	st	X, r30
    23b6:	ce 01       	movw	r24, r28
    23b8:	0e c0       	rjmp	.+28     	; 0x23d6 <u8g_GetGlyph+0x198>
    23ba:	fe 01       	movw	r30, r28
    23bc:	32 96       	adiw	r30, 0x02	; 2
    23be:	e4 91       	lpm	r30, Z
    23c0:	eb 21       	and	r30, r11
    23c2:	9c 01       	movw	r18, r24
    23c4:	2e 0f       	add	r18, r30
    23c6:	31 1d       	adc	r19, r1
    23c8:	c2 0f       	add	r28, r18
    23ca:	d3 1f       	adc	r29, r19
    23cc:	fd 14       	cp	r15, r13
    23ce:	09 f4       	brne	.+2      	; 0x23d2 <u8g_GetGlyph+0x194>
    23d0:	89 cf       	rjmp	.-238    	; 0x22e4 <u8g_GetGlyph+0xa6>
    23d2:	f3 94       	inc	r15
    23d4:	9d cf       	rjmp	.-198    	; 0x2310 <u8g_GetGlyph+0xd2>
    23d6:	df 91       	pop	r29
    23d8:	cf 91       	pop	r28
    23da:	1f 91       	pop	r17
    23dc:	0f 91       	pop	r16
    23de:	ff 90       	pop	r15
    23e0:	ef 90       	pop	r14
    23e2:	df 90       	pop	r13
    23e4:	cf 90       	pop	r12
    23e6:	bf 90       	pop	r11
    23e8:	08 95       	ret

000023ea <u8g_draw_glyph>:
    23ea:	6f 92       	push	r6
    23ec:	7f 92       	push	r7
    23ee:	8f 92       	push	r8
    23f0:	9f 92       	push	r9
    23f2:	af 92       	push	r10
    23f4:	bf 92       	push	r11
    23f6:	cf 92       	push	r12
    23f8:	df 92       	push	r13
    23fa:	ef 92       	push	r14
    23fc:	ff 92       	push	r15
    23fe:	0f 93       	push	r16
    2400:	1f 93       	push	r17
    2402:	cf 93       	push	r28
    2404:	df 93       	push	r29
    2406:	ec 01       	movw	r28, r24
    2408:	c6 2e       	mov	r12, r22
    240a:	74 2e       	mov	r7, r20
    240c:	62 2f       	mov	r22, r18
    240e:	0e 94 1f 11 	call	0x223e	; 0x223e <u8g_GetGlyph>
    2412:	7c 01       	movw	r14, r24
    2414:	89 2b       	or	r24, r25
    2416:	c9 f1       	breq	.+114    	; 0x248a <u8g_draw_glyph+0xa0>
    2418:	8c 81       	ldd	r24, Y+4	; 0x04
    241a:	9d 81       	ldd	r25, Y+5	; 0x05
    241c:	0e 94 05 11 	call	0x220a	; 0x220a <u8g_font_GetFontGlyphStructureSize>
    2420:	b8 2e       	mov	r11, r24
    2422:	1b 89       	ldd	r17, Y+19	; 0x13
    2424:	0c 89       	ldd	r16, Y+20	; 0x14
    2426:	89 89       	ldd	r24, Y+17	; 0x11
    2428:	c8 0e       	add	r12, r24
    242a:	8a 89       	ldd	r24, Y+18	; 0x12
    242c:	78 1a       	sub	r7, r24
    242e:	d7 2c       	mov	r13, r7
    2430:	d0 1a       	sub	r13, r16
    2432:	21 2f       	mov	r18, r17
    2434:	4d 2d       	mov	r20, r13
    2436:	6c 2d       	mov	r22, r12
    2438:	ce 01       	movw	r24, r28
    243a:	0e 94 d7 15 	call	0x2bae	; 0x2bae <u8g_IsBBXIntersection>
    243e:	88 23       	and	r24, r24
    2440:	11 f1       	breq	.+68     	; 0x2486 <u8g_draw_glyph+0x9c>
    2442:	eb 0c       	add	r14, r11
    2444:	f1 1c       	adc	r15, r1
    2446:	19 5f       	subi	r17, 0xF9	; 249
    2448:	16 95       	lsr	r17
    244a:	16 95       	lsr	r17
    244c:	16 95       	lsr	r17
    244e:	81 2e       	mov	r8, r17
    2450:	91 2c       	mov	r9, r1
    2452:	7d 14       	cp	r7, r13
    2454:	c1 f0       	breq	.+48     	; 0x2486 <u8g_draw_glyph+0x9c>
    2456:	6c 2c       	mov	r6, r12
    2458:	57 01       	movw	r10, r14
    245a:	8a 2d       	mov	r24, r10
    245c:	8e 19       	sub	r24, r14
    245e:	81 17       	cp	r24, r17
    2460:	70 f4       	brcc	.+28     	; 0x247e <u8g_draw_glyph+0x94>
    2462:	f5 01       	movw	r30, r10
    2464:	04 91       	lpm	r16, Z
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	4d 2d       	mov	r20, r13
    246a:	66 2d       	mov	r22, r6
    246c:	ce 01       	movw	r24, r28
    246e:	0e 94 ed 13 	call	0x27da	; 0x27da <u8g_Draw8Pixel>
    2472:	ff ef       	ldi	r31, 0xFF	; 255
    2474:	af 1a       	sub	r10, r31
    2476:	bf 0a       	sbc	r11, r31
    2478:	88 e0       	ldi	r24, 0x08	; 8
    247a:	68 0e       	add	r6, r24
    247c:	ee cf       	rjmp	.-36     	; 0x245a <u8g_draw_glyph+0x70>
    247e:	e8 0c       	add	r14, r8
    2480:	f9 1c       	adc	r15, r9
    2482:	d3 94       	inc	r13
    2484:	e6 cf       	rjmp	.-52     	; 0x2452 <u8g_draw_glyph+0x68>
    2486:	88 89       	ldd	r24, Y+16	; 0x10
    2488:	01 c0       	rjmp	.+2      	; 0x248c <u8g_draw_glyph+0xa2>
    248a:	80 e0       	ldi	r24, 0x00	; 0
    248c:	df 91       	pop	r29
    248e:	cf 91       	pop	r28
    2490:	1f 91       	pop	r17
    2492:	0f 91       	pop	r16
    2494:	ff 90       	pop	r15
    2496:	ef 90       	pop	r14
    2498:	df 90       	pop	r13
    249a:	cf 90       	pop	r12
    249c:	bf 90       	pop	r11
    249e:	af 90       	pop	r10
    24a0:	9f 90       	pop	r9
    24a2:	8f 90       	pop	r8
    24a4:	7f 90       	pop	r7
    24a6:	6f 90       	pop	r6
    24a8:	08 95       	ret

000024aa <u8g_DrawGlyph>:
    24aa:	ff 92       	push	r15
    24ac:	0f 93       	push	r16
    24ae:	1f 93       	push	r17
    24b0:	cf 93       	push	r28
    24b2:	df 93       	push	r29
    24b4:	ec 01       	movw	r28, r24
    24b6:	06 2f       	mov	r16, r22
    24b8:	14 2f       	mov	r17, r20
    24ba:	f2 2e       	mov	r15, r18
    24bc:	ed 89       	ldd	r30, Y+21	; 0x15
    24be:	fe 89       	ldd	r31, Y+22	; 0x16
    24c0:	09 95       	icall
    24c2:	48 2f       	mov	r20, r24
    24c4:	41 0f       	add	r20, r17
    24c6:	2f 2d       	mov	r18, r15
    24c8:	60 2f       	mov	r22, r16
    24ca:	ce 01       	movw	r24, r28
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	1f 91       	pop	r17
    24d2:	0f 91       	pop	r16
    24d4:	ff 90       	pop	r15
    24d6:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <u8g_draw_glyph>

000024da <u8g_UpdateRefHeight>:
    24da:	dc 01       	movw	r26, r24
    24dc:	14 96       	adiw	r26, 0x04	; 4
    24de:	2d 91       	ld	r18, X+
    24e0:	3c 91       	ld	r19, X
    24e2:	15 97       	sbiw	r26, 0x05	; 5
    24e4:	21 15       	cp	r18, r1
    24e6:	31 05       	cpc	r19, r1
    24e8:	09 f4       	brne	.+2      	; 0x24ec <u8g_UpdateRefHeight+0x12>
    24ea:	3f c0       	rjmp	.+126    	; 0x256a <u8g_UpdateRefHeight+0x90>
    24ec:	57 96       	adiw	r26, 0x17	; 23
    24ee:	8c 91       	ld	r24, X
    24f0:	57 97       	sbiw	r26, 0x17	; 23
    24f2:	f9 01       	movw	r30, r18
    24f4:	81 11       	cpse	r24, r1
    24f6:	08 c0       	rjmp	.+16     	; 0x2508 <u8g_UpdateRefHeight+0x2e>
    24f8:	35 96       	adiw	r30, 0x05	; 5
    24fa:	e4 91       	lpm	r30, Z
    24fc:	58 96       	adiw	r26, 0x18	; 24
    24fe:	ec 93       	st	X, r30
    2500:	58 97       	sbiw	r26, 0x18	; 24
    2502:	f9 01       	movw	r30, r18
    2504:	3c 96       	adiw	r30, 0x0c	; 12
    2506:	11 c0       	rjmp	.+34     	; 0x252a <u8g_UpdateRefHeight+0x50>
    2508:	81 30       	cpi	r24, 0x01	; 1
    250a:	41 f4       	brne	.+16     	; 0x251c <u8g_UpdateRefHeight+0x42>
    250c:	3f 96       	adiw	r30, 0x0f	; 15
    250e:	e4 91       	lpm	r30, Z
    2510:	58 96       	adiw	r26, 0x18	; 24
    2512:	ec 93       	st	X, r30
    2514:	58 97       	sbiw	r26, 0x18	; 24
    2516:	f9 01       	movw	r30, r18
    2518:	70 96       	adiw	r30, 0x10	; 16
    251a:	07 c0       	rjmp	.+14     	; 0x252a <u8g_UpdateRefHeight+0x50>
    251c:	3d 96       	adiw	r30, 0x0d	; 13
    251e:	e4 91       	lpm	r30, Z
    2520:	58 96       	adiw	r26, 0x18	; 24
    2522:	ec 93       	st	X, r30
    2524:	58 97       	sbiw	r26, 0x18	; 24
    2526:	f9 01       	movw	r30, r18
    2528:	3e 96       	adiw	r30, 0x0e	; 14
    252a:	e4 91       	lpm	r30, Z
    252c:	59 96       	adiw	r26, 0x19	; 25
    252e:	ec 93       	st	X, r30
    2530:	59 97       	sbiw	r26, 0x19	; 25
    2532:	58 96       	adiw	r26, 0x18	; 24
    2534:	8c 91       	ld	r24, X
    2536:	58 97       	sbiw	r26, 0x18	; 24
    2538:	08 2e       	mov	r0, r24
    253a:	00 0c       	add	r0, r0
    253c:	99 0b       	sbc	r25, r25
    253e:	59 96       	adiw	r26, 0x19	; 25
    2540:	2c 91       	ld	r18, X
    2542:	59 97       	sbiw	r26, 0x19	; 25
    2544:	82 1b       	sub	r24, r18
    2546:	91 09       	sbc	r25, r1
    2548:	27 fd       	sbrc	r18, 7
    254a:	93 95       	inc	r25
    254c:	5a 96       	adiw	r26, 0x1a	; 26
    254e:	2c 91       	ld	r18, X
    2550:	5a 97       	sbiw	r26, 0x1a	; 26
    2552:	20 34       	cpi	r18, 0x40	; 64
    2554:	41 f0       	breq	.+16     	; 0x2566 <u8g_UpdateRefHeight+0x8c>
    2556:	82 9f       	mul	r24, r18
    2558:	c0 01       	movw	r24, r0
    255a:	11 24       	eor	r1, r1
    255c:	26 e0       	ldi	r18, 0x06	; 6
    255e:	96 95       	lsr	r25
    2560:	87 95       	ror	r24
    2562:	2a 95       	dec	r18
    2564:	e1 f7       	brne	.-8      	; 0x255e <u8g_UpdateRefHeight+0x84>
    2566:	5b 96       	adiw	r26, 0x1b	; 27
    2568:	8c 93       	st	X, r24
    256a:	08 95       	ret

0000256c <u8g_SetFontPosBaseline>:
    256c:	2f e0       	ldi	r18, 0x0F	; 15
    256e:	31 e1       	ldi	r19, 0x11	; 17
    2570:	fc 01       	movw	r30, r24
    2572:	36 8b       	std	Z+22, r19	; 0x16
    2574:	25 8b       	std	Z+21, r18	; 0x15
    2576:	08 95       	ret

00002578 <u8g_SetFont>:

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
    2578:	cf 93       	push	r28
    257a:	df 93       	push	r29
  if ( u8g->font != font )
    257c:	fc 01       	movw	r30, r24
    257e:	24 81       	ldd	r18, Z+4	; 0x04
    2580:	35 81       	ldd	r19, Z+5	; 0x05
    2582:	26 17       	cp	r18, r22
    2584:	37 07       	cpc	r19, r23
    2586:	49 f0       	breq	.+18     	; 0x259a <u8g_SetFont+0x22>
    2588:	ec 01       	movw	r28, r24
  {
    u8g->font = font;
    258a:	75 83       	std	Z+5, r23	; 0x05
    258c:	64 83       	std	Z+4, r22	; 0x04
    u8g_UpdateRefHeight(u8g);
    258e:	0e 94 6d 12 	call	0x24da	; 0x24da <u8g_UpdateRefHeight>
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
    2592:	8f e0       	ldi	r24, 0x0F	; 15
    2594:	91 e1       	ldi	r25, 0x11	; 17
    2596:	9e 8b       	std	Y+22, r25	; 0x16
    2598:	8d 8b       	std	Y+21, r24	; 0x15
  {
    u8g->font = font;
    u8g_UpdateRefHeight(u8g);
    u8g_SetFontPosBaseline(u8g);
  }
}
    259a:	df 91       	pop	r29
    259c:	cf 91       	pop	r28
    259e:	08 95       	ret

000025a0 <u8g_init_data>:
  irgb.idx = idx;
  irgb.r = r;
  irgb.g = g;
  irgb.b = b;  
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}
    25a0:	1f 93       	push	r17
    25a2:	cf 93       	push	r28
    25a4:	df 93       	push	r29
    25a6:	ec 01       	movw	r28, r24
    25a8:	1d 82       	std	Y+5, r1	; 0x05
    25aa:	1c 82       	std	Y+4, r1	; 0x04
    25ac:	1f 82       	std	Y+7, r1	; 0x07
    25ae:	1e 82       	std	Y+6, r1	; 0x06
    25b0:	19 86       	std	Y+9, r1	; 0x09
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	88 87       	std	Y+8, r24	; 0x08
    25b6:	82 e2       	ldi	r24, 0x22	; 34
    25b8:	8a 87       	std	Y+10, r24	; 0x0a
    25ba:	1f 86       	std	Y+15, r1	; 0x0f
    25bc:	1e 86       	std	Y+14, r1	; 0x0e
    25be:	fe 01       	movw	r30, r28
    25c0:	b3 96       	adiw	r30, 0x23	; 35
    25c2:	ce 01       	movw	r24, r28
    25c4:	c1 96       	adiw	r24, 0x31	; 49
    25c6:	2f ef       	ldi	r18, 0xFF	; 255
    25c8:	21 93       	st	Z+, r18
    25ca:	e8 17       	cp	r30, r24
    25cc:	f9 07       	cpc	r31, r25
    25ce:	e1 f7       	brne	.-8      	; 0x25c8 <u8g_init_data+0x28>
    25d0:	11 e0       	ldi	r17, 0x01	; 1
    25d2:	18 a3       	std	Y+32, r17	; 0x20
    25d4:	ce 01       	movw	r24, r28
    25d6:	0e 94 b6 12 	call	0x256c	; 0x256c <u8g_SetFontPosBaseline>
    25da:	1f 8b       	std	Y+23, r17	; 0x17
    25dc:	18 8e       	std	Y+24, r1	; 0x18
    25de:	19 8e       	std	Y+25, r1	; 0x19
    25e0:	80 e4       	ldi	r24, 0x40	; 64
    25e2:	8a 8f       	std	Y+26, r24	; 0x1a
    25e4:	1b 8e       	std	Y+27, r1	; 0x1b
    25e6:	8b ef       	ldi	r24, 0xFB	; 251
    25e8:	94 e1       	ldi	r25, 0x14	; 20
    25ea:	9a ab       	std	Y+50, r25	; 0x32
    25ec:	89 ab       	std	Y+49, r24	; 0x31
    25ee:	df 91       	pop	r29
    25f0:	cf 91       	pop	r28
    25f2:	1f 91       	pop	r17
    25f4:	08 95       	ret

000025f6 <u8g_call_dev_fn>:
    25f6:	db 01       	movw	r26, r22
    25f8:	ed 91       	ld	r30, X+
    25fa:	fc 91       	ld	r31, X
    25fc:	09 94       	ijmp

000025fe <u8g_InitLL>:
    25fe:	0f 93       	push	r16
    2600:	1f 93       	push	r17
    2602:	cf 93       	push	r28
    2604:	df 93       	push	r29
    2606:	ec 01       	movw	r28, r24
    2608:	8b 01       	movw	r16, r22
    260a:	e9 a9       	ldd	r30, Y+49	; 0x31
    260c:	fa a9       	ldd	r31, Y+50	; 0x32
    260e:	82 e0       	ldi	r24, 0x02	; 2
    2610:	09 95       	icall
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	4a e0       	ldi	r20, 0x0A	; 10
    2618:	b8 01       	movw	r22, r16
    261a:	ce 01       	movw	r24, r28
    261c:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <u8g_call_dev_fn>
    2620:	18 2f       	mov	r17, r24
    2622:	e9 a9       	ldd	r30, Y+49	; 0x31
    2624:	fa a9       	ldd	r31, Y+50	; 0x32
    2626:	83 e0       	ldi	r24, 0x03	; 3
    2628:	09 95       	icall
    262a:	e9 a9       	ldd	r30, Y+49	; 0x31
    262c:	fa a9       	ldd	r31, Y+50	; 0x32
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	09 95       	icall
    2632:	81 2f       	mov	r24, r17
    2634:	df 91       	pop	r29
    2636:	cf 91       	pop	r28
    2638:	1f 91       	pop	r17
    263a:	0f 91       	pop	r16
    263c:	08 95       	ret

0000263e <u8g_FirstPageLL>:
    263e:	0f 93       	push	r16
    2640:	1f 93       	push	r17
    2642:	cf 93       	push	r28
    2644:	df 93       	push	r29
    2646:	ec 01       	movw	r28, r24
    2648:	8b 01       	movw	r16, r22
    264a:	e9 a9       	ldd	r30, Y+49	; 0x31
    264c:	fa a9       	ldd	r31, Y+50	; 0x32
    264e:	82 e0       	ldi	r24, 0x02	; 2
    2650:	09 95       	icall
    2652:	e9 a9       	ldd	r30, Y+49	; 0x31
    2654:	fa a9       	ldd	r31, Y+50	; 0x32
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	09 95       	icall
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	44 e1       	ldi	r20, 0x14	; 20
    2660:	b8 01       	movw	r22, r16
    2662:	ce 01       	movw	r24, r28
    2664:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <u8g_call_dev_fn>
    2668:	9e 01       	movw	r18, r28
    266a:	2d 5c       	subi	r18, 0xCD	; 205
    266c:	3f 4f       	sbci	r19, 0xFF	; 255
    266e:	47 e1       	ldi	r20, 0x17	; 23
    2670:	b8 01       	movw	r22, r16
    2672:	ce 01       	movw	r24, r28
    2674:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <u8g_call_dev_fn>
    2678:	e9 a9       	ldd	r30, Y+49	; 0x31
    267a:	fa a9       	ldd	r31, Y+50	; 0x32
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	df 91       	pop	r29
    2680:	cf 91       	pop	r28
    2682:	1f 91       	pop	r17
    2684:	0f 91       	pop	r16
    2686:	09 94       	ijmp

00002688 <u8g_NextPageLL>:
    2688:	ef 92       	push	r14
    268a:	ff 92       	push	r15
    268c:	1f 93       	push	r17
    268e:	cf 93       	push	r28
    2690:	df 93       	push	r29
    2692:	ec 01       	movw	r28, r24
    2694:	7b 01       	movw	r14, r22
    2696:	e9 a9       	ldd	r30, Y+49	; 0x31
    2698:	fa a9       	ldd	r31, Y+50	; 0x32
    269a:	82 e0       	ldi	r24, 0x02	; 2
    269c:	09 95       	icall
    269e:	e9 a9       	ldd	r30, Y+49	; 0x31
    26a0:	fa a9       	ldd	r31, Y+50	; 0x32
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	09 95       	icall
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	45 e1       	ldi	r20, 0x15	; 21
    26ac:	b7 01       	movw	r22, r14
    26ae:	ce 01       	movw	r24, r28
    26b0:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <u8g_call_dev_fn>
    26b4:	18 2f       	mov	r17, r24
    26b6:	88 23       	and	r24, r24
    26b8:	41 f0       	breq	.+16     	; 0x26ca <u8g_NextPageLL+0x42>
    26ba:	9e 01       	movw	r18, r28
    26bc:	2d 5c       	subi	r18, 0xCD	; 205
    26be:	3f 4f       	sbci	r19, 0xFF	; 255
    26c0:	47 e1       	ldi	r20, 0x17	; 23
    26c2:	b7 01       	movw	r22, r14
    26c4:	ce 01       	movw	r24, r28
    26c6:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <u8g_call_dev_fn>
    26ca:	e9 a9       	ldd	r30, Y+49	; 0x31
    26cc:	fa a9       	ldd	r31, Y+50	; 0x32
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	09 95       	icall
    26d2:	81 2f       	mov	r24, r17
    26d4:	df 91       	pop	r29
    26d6:	cf 91       	pop	r28
    26d8:	1f 91       	pop	r17
    26da:	ff 90       	pop	r15
    26dc:	ef 90       	pop	r14
    26de:	08 95       	ret

000026e0 <u8g_GetWidthLL>:
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
    26e4:	1f 92       	push	r1
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
    26ea:	9e 01       	movw	r18, r28
    26ec:	2f 5f       	subi	r18, 0xFF	; 255
    26ee:	3f 4f       	sbci	r19, 0xFF	; 255
    26f0:	46 e4       	ldi	r20, 0x46	; 70
    26f2:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <u8g_call_dev_fn>
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	0f 90       	pop	r0
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	08 95       	ret

00002700 <u8g_GetHeightLL>:
    2700:	cf 93       	push	r28
    2702:	df 93       	push	r29
    2704:	1f 92       	push	r1
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
    270a:	9e 01       	movw	r18, r28
    270c:	2f 5f       	subi	r18, 0xFF	; 255
    270e:	3f 4f       	sbci	r19, 0xFF	; 255
    2710:	47 e4       	ldi	r20, 0x47	; 71
    2712:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <u8g_call_dev_fn>
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	0f 90       	pop	r0
    271a:	df 91       	pop	r29
    271c:	cf 91       	pop	r28
    271e:	08 95       	ret

00002720 <u8g_GetModeLL>:
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	48 e4       	ldi	r20, 0x48	; 72
    2726:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <u8g_call_dev_fn>

0000272a <u8g_UpdateDimension>:
    272a:	cf 93       	push	r28
    272c:	df 93       	push	r29
    272e:	ec 01       	movw	r28, r24
    2730:	6a 81       	ldd	r22, Y+2	; 0x02
    2732:	7b 81       	ldd	r23, Y+3	; 0x03
    2734:	0e 94 70 13 	call	0x26e0	; 0x26e0 <u8g_GetWidthLL>
    2738:	88 83       	st	Y, r24
    273a:	6a 81       	ldd	r22, Y+2	; 0x02
    273c:	7b 81       	ldd	r23, Y+3	; 0x03
    273e:	ce 01       	movw	r24, r28
    2740:	0e 94 80 13 	call	0x2700	; 0x2700 <u8g_GetHeightLL>
    2744:	89 83       	std	Y+1, r24	; 0x01
    2746:	6a 81       	ldd	r22, Y+2	; 0x02
    2748:	7b 81       	ldd	r23, Y+3	; 0x03
    274a:	ce 01       	movw	r24, r28
    274c:	0e 94 90 13 	call	0x2720	; 0x2720 <u8g_GetModeLL>
    2750:	8b 87       	std	Y+11, r24	; 0x0b
    2752:	9e 01       	movw	r18, r28
    2754:	2d 5c       	subi	r18, 0xCD	; 205
    2756:	3f 4f       	sbci	r19, 0xFF	; 255
    2758:	6a 81       	ldd	r22, Y+2	; 0x02
    275a:	7b 81       	ldd	r23, Y+3	; 0x03
    275c:	47 e1       	ldi	r20, 0x17	; 23
    275e:	ce 01       	movw	r24, r28
    2760:	df 91       	pop	r29
    2762:	cf 91       	pop	r28
    2764:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <u8g_call_dev_fn>

00002768 <u8g_Begin>:
    2768:	cf 93       	push	r28
    276a:	df 93       	push	r29
    276c:	ec 01       	movw	r28, r24
    276e:	6a 81       	ldd	r22, Y+2	; 0x02
    2770:	7b 81       	ldd	r23, Y+3	; 0x03
    2772:	0e 94 ff 12 	call	0x25fe	; 0x25fe <u8g_InitLL>
    2776:	88 23       	and	r24, r24
    2778:	21 f0       	breq	.+8      	; 0x2782 <u8g_Begin+0x1a>
    277a:	ce 01       	movw	r24, r28
    277c:	0e 94 95 13 	call	0x272a	; 0x272a <u8g_UpdateDimension>
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	df 91       	pop	r29
    2784:	cf 91       	pop	r28
    2786:	08 95       	ret

00002788 <u8g_InitI2C>:
    2788:	ef 92       	push	r14
    278a:	ff 92       	push	r15
    278c:	1f 93       	push	r17
    278e:	cf 93       	push	r28
    2790:	df 93       	push	r29
    2792:	ec 01       	movw	r28, r24
    2794:	7b 01       	movw	r14, r22
    2796:	14 2f       	mov	r17, r20
    2798:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <u8g_init_data>
    279c:	fb 82       	std	Y+3, r15	; 0x03
    279e:	ea 82       	std	Y+2, r14	; 0x02
    27a0:	1e a7       	std	Y+46, r17	; 0x2e
    27a2:	ce 01       	movw	r24, r28
    27a4:	df 91       	pop	r29
    27a6:	cf 91       	pop	r28
    27a8:	1f 91       	pop	r17
    27aa:	ff 90       	pop	r15
    27ac:	ef 90       	pop	r14
    27ae:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <u8g_Begin>

000027b2 <u8g_FirstPage>:
    27b2:	fc 01       	movw	r30, r24
    27b4:	62 81       	ldd	r22, Z+2	; 0x02
    27b6:	73 81       	ldd	r23, Z+3	; 0x03
    27b8:	0c 94 1f 13 	jmp	0x263e	; 0x263e <u8g_FirstPageLL>

000027bc <u8g_NextPage>:
    27bc:	cf 93       	push	r28
    27be:	df 93       	push	r29
    27c0:	ec 01       	movw	r28, r24
    27c2:	ee 85       	ldd	r30, Y+14	; 0x0e
    27c4:	ff 85       	ldd	r31, Y+15	; 0x0f
    27c6:	30 97       	sbiw	r30, 0x00	; 0
    27c8:	09 f0       	breq	.+2      	; 0x27cc <u8g_NextPage+0x10>
    27ca:	09 95       	icall
    27cc:	6a 81       	ldd	r22, Y+2	; 0x02
    27ce:	7b 81       	ldd	r23, Y+3	; 0x03
    27d0:	ce 01       	movw	r24, r28
    27d2:	df 91       	pop	r29
    27d4:	cf 91       	pop	r28
    27d6:	0c 94 44 13 	jmp	0x2688	; 0x2688 <u8g_NextPageLL>

000027da <u8g_Draw8Pixel>:
    27da:	0f 93       	push	r16
    27dc:	fc 01       	movw	r30, r24
    27de:	82 81       	ldd	r24, Z+2	; 0x02
    27e0:	93 81       	ldd	r25, Z+3	; 0x03
    27e2:	64 8f       	std	Z+28, r22	; 0x1c
    27e4:	45 8f       	std	Z+29, r20	; 0x1d
    27e6:	27 8f       	std	Z+31, r18	; 0x1f
    27e8:	06 8f       	std	Z+30, r16	; 0x1e
    27ea:	9f 01       	movw	r18, r30
    27ec:	24 5e       	subi	r18, 0xE4	; 228
    27ee:	3f 4f       	sbci	r19, 0xFF	; 255
    27f0:	4b e3       	ldi	r20, 0x3B	; 59
    27f2:	bc 01       	movw	r22, r24
    27f4:	cf 01       	movw	r24, r30
    27f6:	0f 91       	pop	r16
    27f8:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <u8g_call_dev_fn>

000027fc <u8g_SetColorIndex>:

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
    27fc:	fc 01       	movw	r30, r24
    27fe:	60 a3       	std	Z+32, r22	; 0x20
    2800:	08 95       	ret

00002802 <u8g_pb_Clear>:
  tmp = bbx->x;
  tmp += bbx->w;
  tmp--;
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}
    2802:	dc 01       	movw	r26, r24
    2804:	16 96       	adiw	r26, 0x06	; 6
    2806:	ed 91       	ld	r30, X+
    2808:	fc 91       	ld	r31, X
    280a:	17 97       	sbiw	r26, 0x07	; 7
    280c:	15 96       	adiw	r26, 0x05	; 5
    280e:	8c 91       	ld	r24, X
    2810:	9f 01       	movw	r18, r30
    2812:	28 0f       	add	r18, r24
    2814:	31 1d       	adc	r19, r1
    2816:	c9 01       	movw	r24, r18
    2818:	11 92       	st	Z+, r1
    281a:	e8 17       	cp	r30, r24
    281c:	f9 07       	cpc	r31, r25
    281e:	e1 f7       	brne	.-8      	; 0x2818 <u8g_pb_Clear+0x16>
    2820:	08 95       	ret

00002822 <u8g_pb_IsYIntersection>:
    2822:	31 e0       	ldi	r19, 0x01	; 1
    2824:	fc 01       	movw	r30, r24
    2826:	23 81       	ldd	r18, Z+3	; 0x03
    2828:	26 17       	cp	r18, r22
    282a:	08 f4       	brcc	.+2      	; 0x282e <u8g_pb_IsYIntersection+0xc>
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	21 e0       	ldi	r18, 0x01	; 1
    2830:	fc 01       	movw	r30, r24
    2832:	82 81       	ldd	r24, Z+2	; 0x02
    2834:	48 17       	cp	r20, r24
    2836:	08 f4       	brcc	.+2      	; 0x283a <u8g_pb_IsYIntersection+0x18>
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	91 e0       	ldi	r25, 0x01	; 1
    283c:	46 17       	cp	r20, r22
    283e:	08 f0       	brcs	.+2      	; 0x2842 <u8g_pb_IsYIntersection+0x20>
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	89 2f       	mov	r24, r25
    2844:	83 2b       	or	r24, r19
    2846:	28 23       	and	r18, r24
    2848:	83 2f       	mov	r24, r19
    284a:	89 23       	and	r24, r25
    284c:	82 2b       	or	r24, r18
    284e:	08 95       	ret

00002850 <u8g_pb_GetPageBox>:

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
    2850:	dc 01       	movw	r26, r24
    2852:	fb 01       	movw	r30, r22
  box->x0 = 0;
    2854:	10 82       	st	Z, r1
  box->y0 = pb->p.page_y0;
    2856:	12 96       	adiw	r26, 0x02	; 2
    2858:	8c 91       	ld	r24, X
    285a:	12 97       	sbiw	r26, 0x02	; 2
    285c:	81 83       	std	Z+1, r24	; 0x01
  box->x1 = pb->width;
  box->x1--;
    285e:	15 96       	adiw	r26, 0x05	; 5
    2860:	8c 91       	ld	r24, X
    2862:	15 97       	sbiw	r26, 0x05	; 5
    2864:	81 50       	subi	r24, 0x01	; 1
    2866:	82 83       	std	Z+2, r24	; 0x02
  box->y1 = pb->p.page_y1;
    2868:	13 96       	adiw	r26, 0x03	; 3
    286a:	8c 91       	ld	r24, X
    286c:	83 83       	std	Z+3, r24	; 0x03
    286e:	08 95       	ret

00002870 <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    2870:	fb 01       	movw	r30, r22
    2872:	41 81       	ldd	r20, Z+1	; 0x01
  v1 = v0;
  switch( arg_pixel->dir )
    2874:	23 81       	ldd	r18, Z+3	; 0x03
    2876:	21 30       	cpi	r18, 0x01	; 1
    2878:	29 f0       	breq	.+10     	; 0x2884 <u8g_pb_Is8PixelVisible+0x14>
    287a:	23 30       	cpi	r18, 0x03	; 3
    287c:	31 f4       	brne	.+12     	; 0x288a <u8g_pb_Is8PixelVisible+0x1a>
      v1 += 8;          /* this is independent from the page height */
      break;
    case 2:  
      break;
    case 3: 
      v0 -= 8;
    287e:	68 ef       	ldi	r22, 0xF8	; 248
    2880:	64 0f       	add	r22, r20
      break;
    2882:	04 c0       	rjmp	.+8      	; 0x288c <u8g_pb_Is8PixelVisible+0x1c>


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    2884:	64 2f       	mov	r22, r20
  switch( arg_pixel->dir )
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
    2886:	48 5f       	subi	r20, 0xF8	; 248
      break;
    2888:	01 c0       	rjmp	.+2      	; 0x288c <u8g_pb_Is8PixelVisible+0x1c>


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    288a:	64 2f       	mov	r22, r20
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
    288c:	0c 94 11 14 	jmp	0x2822	; 0x2822 <u8g_pb_IsYIntersection>

00002890 <u8g_pb_WriteBuffer>:
}



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
    2890:	fc 01       	movw	r30, r24
    2892:	cb 01       	movw	r24, r22
    2894:	ba 01       	movw	r22, r20
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
    2896:	26 81       	ldd	r18, Z+6	; 0x06
    2898:	37 81       	ldd	r19, Z+7	; 0x07
    289a:	45 81       	ldd	r20, Z+5	; 0x05
    289c:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <u8g_WriteSequence>

000028a0 <u8g_pb8v1_set_pixel>:
      case 2: arg_pixel->x--; break;
      case 3: arg_pixel->y--; break;
    }
    pixel <<= 1;
  } while( pixel != 0  );
}
    28a0:	dc 01       	movw	r26, r24
    28a2:	16 96       	adiw	r26, 0x06	; 6
    28a4:	ed 91       	ld	r30, X+
    28a6:	fc 91       	ld	r31, X
    28a8:	17 97       	sbiw	r26, 0x07	; 7
    28aa:	12 96       	adiw	r26, 0x02	; 2
    28ac:	8c 91       	ld	r24, X
    28ae:	48 1b       	sub	r20, r24
    28b0:	47 70       	andi	r20, 0x07	; 7
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	01 c0       	rjmp	.+2      	; 0x28ba <u8g_pb8v1_set_pixel+0x1a>
    28b8:	88 0f       	add	r24, r24
    28ba:	4a 95       	dec	r20
    28bc:	ea f7       	brpl	.-6      	; 0x28b8 <u8g_pb8v1_set_pixel+0x18>
    28be:	e6 0f       	add	r30, r22
    28c0:	f1 1d       	adc	r31, r1
    28c2:	30 81       	ld	r19, Z
    28c4:	22 23       	and	r18, r18
    28c6:	11 f0       	breq	.+4      	; 0x28cc <u8g_pb8v1_set_pixel+0x2c>
    28c8:	83 2b       	or	r24, r19
    28ca:	02 c0       	rjmp	.+4      	; 0x28d0 <u8g_pb8v1_set_pixel+0x30>
    28cc:	80 95       	com	r24
    28ce:	83 23       	and	r24, r19
    28d0:	80 83       	st	Z, r24
    28d2:	08 95       	ret

000028d4 <u8g_pb8v1_SetPixel>:
    28d4:	fb 01       	movw	r30, r22
    28d6:	41 81       	ldd	r20, Z+1	; 0x01
    28d8:	dc 01       	movw	r26, r24
    28da:	12 96       	adiw	r26, 0x02	; 2
    28dc:	2c 91       	ld	r18, X
    28de:	12 97       	sbiw	r26, 0x02	; 2
    28e0:	42 17       	cp	r20, r18
    28e2:	68 f0       	brcs	.+26     	; 0x28fe <u8g_pb8v1_SetPixel+0x2a>
    28e4:	13 96       	adiw	r26, 0x03	; 3
    28e6:	2c 91       	ld	r18, X
    28e8:	13 97       	sbiw	r26, 0x03	; 3
    28ea:	24 17       	cp	r18, r20
    28ec:	40 f0       	brcs	.+16     	; 0x28fe <u8g_pb8v1_SetPixel+0x2a>
    28ee:	60 81       	ld	r22, Z
    28f0:	15 96       	adiw	r26, 0x05	; 5
    28f2:	2c 91       	ld	r18, X
    28f4:	62 17       	cp	r22, r18
    28f6:	18 f4       	brcc	.+6      	; 0x28fe <u8g_pb8v1_SetPixel+0x2a>
    28f8:	24 81       	ldd	r18, Z+4	; 0x04
    28fa:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <u8g_pb8v1_set_pixel>
    28fe:	08 95       	ret

00002900 <u8g_pb8v1_Set8PixelOpt2>:


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
    2900:	cf 92       	push	r12
    2902:	df 92       	push	r13
    2904:	ff 92       	push	r15
    2906:	0f 93       	push	r16
    2908:	1f 93       	push	r17
    290a:	cf 93       	push	r28
    290c:	df 93       	push	r29
    290e:	6c 01       	movw	r12, r24
    2910:	eb 01       	movw	r28, r22
  register uint8_t pixel = arg_pixel->pixel;
    2912:	fa 80       	ldd	r15, Y+2	; 0x02
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
    2914:	8b 81       	ldd	r24, Y+3	; 0x03
    2916:	81 30       	cpi	r24, 0x01	; 1
    2918:	51 f0       	breq	.+20     	; 0x292e <u8g_pb8v1_Set8PixelOpt2+0x2e>
    291a:	30 f0       	brcs	.+12     	; 0x2928 <u8g_pb8v1_Set8PixelOpt2+0x28>
    291c:	82 30       	cpi	r24, 0x02	; 2
    291e:	49 f0       	breq	.+18     	; 0x2932 <u8g_pb8v1_Set8PixelOpt2+0x32>
    2920:	83 30       	cpi	r24, 0x03	; 3
    2922:	51 f4       	brne	.+20     	; 0x2938 <u8g_pb8v1_Set8PixelOpt2+0x38>
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    case 3: dy--; break;
    2924:	1f ef       	ldi	r17, 0xFF	; 255
    2926:	09 c0       	rjmp	.+18     	; 0x293a <u8g_pb8v1_Set8PixelOpt2+0x3a>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    2928:	10 e0       	ldi	r17, 0x00	; 0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    292a:	01 e0       	ldi	r16, 0x01	; 1
    292c:	07 c0       	rjmp	.+14     	; 0x293c <u8g_pb8v1_Set8PixelOpt2+0x3c>
    case 1: dy++; break;
    292e:	11 e0       	ldi	r17, 0x01	; 1
    2930:	04 c0       	rjmp	.+8      	; 0x293a <u8g_pb8v1_Set8PixelOpt2+0x3a>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    2932:	10 e0       	ldi	r17, 0x00	; 0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    2934:	0f ef       	ldi	r16, 0xFF	; 255
    2936:	02 c0       	rjmp	.+4      	; 0x293c <u8g_pb8v1_Set8PixelOpt2+0x3c>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    2938:	10 e0       	ldi	r17, 0x00	; 0


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    293a:	00 e0       	ldi	r16, 0x00	; 0
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
    293c:	f7 fe       	sbrs	r15, 7
    293e:	04 c0       	rjmp	.+8      	; 0x2948 <u8g_pb8v1_Set8PixelOpt2+0x48>
      u8g_pb8v1_SetPixel(b, arg_pixel);
    2940:	be 01       	movw	r22, r28
    2942:	c6 01       	movw	r24, r12
    2944:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
    2948:	88 81       	ld	r24, Y
    294a:	80 0f       	add	r24, r16
    294c:	88 83       	st	Y, r24
    arg_pixel->y += dy;
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	81 0f       	add	r24, r17
    2952:	89 83       	std	Y+1, r24	; 0x01
    pixel <<= 1;
    2954:	ff 0c       	add	r15, r15
  } while( pixel != 0  );
    2956:	91 f7       	brne	.-28     	; 0x293c <u8g_pb8v1_Set8PixelOpt2+0x3c>
  
}
    2958:	df 91       	pop	r29
    295a:	cf 91       	pop	r28
    295c:	1f 91       	pop	r17
    295e:	0f 91       	pop	r16
    2960:	ff 90       	pop	r15
    2962:	df 90       	pop	r13
    2964:	cf 90       	pop	r12
    2966:	08 95       	ret

00002968 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    2968:	0f 93       	push	r16
    296a:	1f 93       	push	r17
    296c:	cf 93       	push	r28
    296e:	df 93       	push	r29
    2970:	89 01       	movw	r16, r18
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    2972:	fb 01       	movw	r30, r22
    2974:	c2 81       	ldd	r28, Z+2	; 0x02
    2976:	d3 81       	ldd	r29, Z+3	; 0x03
  switch(msg)
    2978:	42 33       	cpi	r20, 0x32	; 50
    297a:	f9 f0       	breq	.+62     	; 0x29ba <u8g_dev_pb8v1_base_fn+0x52>
    297c:	68 f4       	brcc	.+26     	; 0x2998 <u8g_dev_pb8v1_base_fn+0x30>
    297e:	45 31       	cpi	r20, 0x15	; 21
    2980:	09 f1       	breq	.+66     	; 0x29c4 <u8g_dev_pb8v1_base_fn+0x5c>
    2982:	47 31       	cpi	r20, 0x17	; 23
    2984:	41 f1       	breq	.+80     	; 0x29d6 <u8g_dev_pb8v1_base_fn+0x6e>
    2986:	44 31       	cpi	r20, 0x14	; 20
    2988:	81 f5       	brne	.+96     	; 0x29ea <u8g_dev_pb8v1_base_fn+0x82>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
    298a:	ce 01       	movw	r24, r28
    298c:	0e 94 01 14 	call	0x2802	; 0x2802 <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
    2990:	ce 01       	movw	r24, r28
    2992:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <u8g_page_First>
    2996:	29 c0       	rjmp	.+82     	; 0x29ea <u8g_dev_pb8v1_base_fn+0x82>
}

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
    2998:	46 34       	cpi	r20, 0x46	; 70
    299a:	11 f1       	breq	.+68     	; 0x29e0 <u8g_dev_pb8v1_base_fn+0x78>
    299c:	47 34       	cpi	r20, 0x47	; 71
    299e:	11 f1       	breq	.+68     	; 0x29e4 <u8g_dev_pb8v1_base_fn+0x7c>
    29a0:	4b 33       	cpi	r20, 0x3B	; 59
    29a2:	19 f5       	brne	.+70     	; 0x29ea <u8g_dev_pb8v1_base_fn+0x82>
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
    29a4:	b9 01       	movw	r22, r18
    29a6:	ce 01       	movw	r24, r28
    29a8:	0e 94 38 14 	call	0x2870	; 0x2870 <u8g_pb_Is8PixelVisible>
    29ac:	88 23       	and	r24, r24
    29ae:	e9 f0       	breq	.+58     	; 0x29ea <u8g_dev_pb8v1_base_fn+0x82>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
    29b0:	b8 01       	movw	r22, r16
    29b2:	ce 01       	movw	r24, r28
    29b4:	0e 94 80 14 	call	0x2900	; 0x2900 <u8g_pb8v1_Set8PixelOpt2>
    29b8:	18 c0       	rjmp	.+48     	; 0x29ea <u8g_dev_pb8v1_base_fn+0x82>
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
    29ba:	b9 01       	movw	r22, r18
    29bc:	ce 01       	movw	r24, r28
    29be:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <u8g_pb8v1_SetPixel>
    29c2:	13 c0       	rjmp	.+38     	; 0x29ea <u8g_dev_pb8v1_base_fn+0x82>
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
    29c4:	ce 01       	movw	r24, r28
    29c6:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <u8g_page_Next>
    29ca:	88 23       	and	r24, r24
    29cc:	79 f0       	breq	.+30     	; 0x29ec <u8g_dev_pb8v1_base_fn+0x84>
        return 0;
      u8g_pb_Clear(pb);
    29ce:	ce 01       	movw	r24, r28
    29d0:	0e 94 01 14 	call	0x2802	; 0x2802 <u8g_pb_Clear>
    29d4:	0a c0       	rjmp	.+20     	; 0x29ea <u8g_dev_pb8v1_base_fn+0x82>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
    29d6:	b9 01       	movw	r22, r18
    29d8:	ce 01       	movw	r24, r28
    29da:	0e 94 28 14 	call	0x2850	; 0x2850 <u8g_pb_GetPageBox>
    29de:	05 c0       	rjmp	.+10     	; 0x29ea <u8g_dev_pb8v1_base_fn+0x82>
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
    29e0:	8d 81       	ldd	r24, Y+5	; 0x05
    29e2:	01 c0       	rjmp	.+2      	; 0x29e6 <u8g_dev_pb8v1_base_fn+0x7e>
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
    29e4:	89 81       	ldd	r24, Y+1	; 0x01
    29e6:	f8 01       	movw	r30, r16
    29e8:	80 83       	st	Z, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    29ea:	81 e0       	ldi	r24, 0x01	; 1
}
    29ec:	df 91       	pop	r29
    29ee:	cf 91       	pop	r28
    29f0:	1f 91       	pop	r17
    29f2:	0f 91       	pop	r16
    29f4:	08 95       	ret

000029f6 <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
    29f6:	08 95       	ret

000029f8 <_ZN6Button6pullupEh>:
|| | Set the hold event time threshold
|| #
*/
void Button::setHoldThreshold(unsigned int holdTime) 
{ 
  holdEventThreshold = holdTime; 
    29f8:	21 e0       	ldi	r18, 0x01	; 1
    29fa:	fc 01       	movw	r30, r24
    29fc:	21 83       	std	Z+1, r18	; 0x01
    29fe:	62 30       	cpi	r22, 0x02	; 2
    2a00:	21 f4       	brne	.+8      	; 0x2a0a <_ZN6Button6pullupEh+0x12>
    2a02:	61 e0       	ldi	r22, 0x01	; 1
    2a04:	80 81       	ld	r24, Z
    2a06:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <digitalWrite>
    2a0a:	08 95       	ret

00002a0c <_ZN6ButtonC1Ehhbi>:
    2a0c:	ef 92       	push	r14
    2a0e:	ff 92       	push	r15
    2a10:	0f 93       	push	r16
    2a12:	1f 93       	push	r17
    2a14:	cf 93       	push	r28
    2a16:	df 93       	push	r29
    2a18:	ec 01       	movw	r28, r24
    2a1a:	86 2f       	mov	r24, r22
    2a1c:	f4 2e       	mov	r15, r20
    2a1e:	e2 2e       	mov	r14, r18
    2a20:	68 83       	st	Y, r22
    2a22:	60 e0       	ldi	r22, 0x00	; 0
    2a24:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <pinMode>
    2a28:	eb 82       	std	Y+3, r14	; 0x03
    2a2a:	1f 87       	std	Y+15, r17	; 0x0f
    2a2c:	0e 87       	std	Y+14, r16	; 0x0e
    2a2e:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <millis>
    2a32:	6a 87       	std	Y+10, r22	; 0x0a
    2a34:	7b 87       	std	Y+11, r23	; 0x0b
    2a36:	8c 87       	std	Y+12, r24	; 0x0c
    2a38:	9d 87       	std	Y+13, r25	; 0x0d
    2a3a:	f1 10       	cpse	r15, r1
    2a3c:	02 c0       	rjmp	.+4      	; 0x2a42 <_ZN6ButtonC1Ehhbi+0x36>
    2a3e:	19 82       	std	Y+1, r1	; 0x01
    2a40:	04 c0       	rjmp	.+8      	; 0x2a4a <_ZN6ButtonC1Ehhbi+0x3e>
    2a42:	6f 2d       	mov	r22, r15
    2a44:	ce 01       	movw	r24, r28
    2a46:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN6Button6pullupEh>
    2a4a:	1a 82       	std	Y+2, r1	; 0x02
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	81 11       	cpse	r24, r1
    2a50:	02 c0       	rjmp	.+4      	; 0x2a56 <_ZN6ButtonC1Ehhbi+0x4a>
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	8a 83       	std	Y+2, r24	; 0x02
    2a56:	19 8a       	std	Y+17, r1	; 0x11
    2a58:	18 8a       	std	Y+16, r1	; 0x10
    2a5a:	1b 8a       	std	Y+19, r1	; 0x13
    2a5c:	1a 8a       	std	Y+18, r1	; 0x12
    2a5e:	1d 8a       	std	Y+21, r1	; 0x15
    2a60:	1c 8a       	std	Y+20, r1	; 0x14
    2a62:	1f 8a       	std	Y+23, r1	; 0x17
    2a64:	1e 8a       	std	Y+22, r1	; 0x16
    2a66:	19 8e       	std	Y+25, r1	; 0x19
    2a68:	18 8e       	std	Y+24, r1	; 0x18
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	8a 8f       	std	Y+26, r24	; 0x1a
    2a6e:	df 91       	pop	r29
    2a70:	cf 91       	pop	r28
    2a72:	1f 91       	pop	r17
    2a74:	0f 91       	pop	r16
    2a76:	ff 90       	pop	r15
    2a78:	ef 90       	pop	r14
    2a7a:	08 95       	ret

00002a7c <_ZN6Button7processEv>:
    2a7c:	0f 93       	push	r16
    2a7e:	1f 93       	push	r17
    2a80:	cf 93       	push	r28
    2a82:	df 93       	push	r29
    2a84:	ec 01       	movw	r28, r24
    2a86:	8a 81       	ldd	r24, Y+2	; 0x02
    2a88:	80 ff       	sbrs	r24, 0
    2a8a:	02 c0       	rjmp	.+4      	; 0x2a90 <_ZN6Button7processEv+0x14>
    2a8c:	82 60       	ori	r24, 0x02	; 2
    2a8e:	01 c0       	rjmp	.+2      	; 0x2a92 <_ZN6Button7processEv+0x16>
    2a90:	8d 7f       	andi	r24, 0xFD	; 253
    2a92:	8a 83       	std	Y+2, r24	; 0x02
    2a94:	88 81       	ld	r24, Y
    2a96:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <digitalRead>
    2a9a:	49 81       	ldd	r20, Y+1	; 0x01
    2a9c:	50 e0       	ldi	r21, 0x00	; 0
    2a9e:	2a 81       	ldd	r18, Y+2	; 0x02
    2aa0:	84 17       	cp	r24, r20
    2aa2:	95 07       	cpc	r25, r21
    2aa4:	11 f4       	brne	.+4      	; 0x2aaa <_ZN6Button7processEv+0x2e>
    2aa6:	2e 7f       	andi	r18, 0xFE	; 254
    2aa8:	01 c0       	rjmp	.+2      	; 0x2aac <_ZN6Button7processEv+0x30>
    2aaa:	21 60       	ori	r18, 0x01	; 1
    2aac:	2a 83       	std	Y+2, r18	; 0x02
    2aae:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab0:	28 2f       	mov	r18, r24
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	a9 01       	movw	r20, r18
    2ab6:	55 95       	asr	r21
    2ab8:	47 95       	ror	r20
    2aba:	24 27       	eor	r18, r20
    2abc:	35 27       	eor	r19, r21
    2abe:	20 ff       	sbrs	r18, 0
    2ac0:	42 c0       	rjmp	.+132    	; 0x2b46 <_ZN6Button7processEv+0xca>
    2ac2:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <millis>
    2ac6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ac8:	22 23       	and	r18, r18
    2aca:	51 f0       	breq	.+20     	; 0x2ae0 <_ZN6Button7processEv+0x64>
    2acc:	2a 85       	ldd	r18, Y+10	; 0x0a
    2ace:	3b 85       	ldd	r19, Y+11	; 0x0b
    2ad0:	62 1b       	sub	r22, r18
    2ad2:	73 0b       	sbc	r23, r19
    2ad4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ad6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ad8:	68 17       	cp	r22, r24
    2ada:	79 07       	cpc	r23, r25
    2adc:	08 f4       	brcc	.+2      	; 0x2ae0 <_ZN6Button7processEv+0x64>
    2ade:	5e c0       	rjmp	.+188    	; 0x2b9c <_ZN6Button7processEv+0x120>
    2ae0:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <millis>
    2ae4:	6a 87       	std	Y+10, r22	; 0x0a
    2ae6:	7b 87       	std	Y+11, r23	; 0x0b
    2ae8:	8c 87       	std	Y+12, r24	; 0x0c
    2aea:	9d 87       	std	Y+13, r25	; 0x0d
    2aec:	8a 81       	ldd	r24, Y+2	; 0x02
    2aee:	80 ff       	sbrs	r24, 0
    2af0:	13 c0       	rjmp	.+38     	; 0x2b18 <_ZN6Button7processEv+0x9c>
    2af2:	88 8d       	ldd	r24, Y+24	; 0x18
    2af4:	99 8d       	ldd	r25, Y+25	; 0x19
    2af6:	01 96       	adiw	r24, 0x01	; 1
    2af8:	99 8f       	std	Y+25, r25	; 0x19
    2afa:	88 8f       	std	Y+24, r24	; 0x18
    2afc:	e8 89       	ldd	r30, Y+16	; 0x10
    2afe:	f9 89       	ldd	r31, Y+17	; 0x11
    2b00:	30 97       	sbiw	r30, 0x00	; 0
    2b02:	11 f0       	breq	.+4      	; 0x2b08 <_ZN6Button7processEv+0x8c>
    2b04:	ce 01       	movw	r24, r28
    2b06:	09 95       	icall
    2b08:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <millis>
    2b0c:	6c 83       	std	Y+4, r22	; 0x04
    2b0e:	7d 83       	std	Y+5, r23	; 0x05
    2b10:	8e 83       	std	Y+6, r24	; 0x06
    2b12:	9f 83       	std	Y+7, r25	; 0x07
    2b14:	1a 8e       	std	Y+26, r1	; 0x1a
    2b16:	13 c0       	rjmp	.+38     	; 0x2b3e <_ZN6Button7processEv+0xc2>
    2b18:	ea 89       	ldd	r30, Y+18	; 0x12
    2b1a:	fb 89       	ldd	r31, Y+19	; 0x13
    2b1c:	30 97       	sbiw	r30, 0x00	; 0
    2b1e:	11 f0       	breq	.+4      	; 0x2b24 <_ZN6Button7processEv+0xa8>
    2b20:	ce 01       	movw	r24, r28
    2b22:	09 95       	icall
    2b24:	ec 89       	ldd	r30, Y+20	; 0x14
    2b26:	fd 89       	ldd	r31, Y+21	; 0x15
    2b28:	30 97       	sbiw	r30, 0x00	; 0
    2b2a:	11 f0       	breq	.+4      	; 0x2b30 <_ZN6Button7processEv+0xb4>
    2b2c:	ce 01       	movw	r24, r28
    2b2e:	09 95       	icall
    2b30:	8f ef       	ldi	r24, 0xFF	; 255
    2b32:	9f ef       	ldi	r25, 0xFF	; 255
    2b34:	dc 01       	movw	r26, r24
    2b36:	8c 83       	std	Y+4, r24	; 0x04
    2b38:	9d 83       	std	Y+5, r25	; 0x05
    2b3a:	ae 83       	std	Y+6, r26	; 0x06
    2b3c:	bf 83       	std	Y+7, r27	; 0x07
    2b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b40:	84 60       	ori	r24, 0x04	; 4
    2b42:	8a 83       	std	Y+2, r24	; 0x02
    2b44:	2b c0       	rjmp	.+86     	; 0x2b9c <_ZN6Button7processEv+0x120>
    2b46:	8b 7f       	andi	r24, 0xFB	; 251
    2b48:	8a 83       	std	Y+2, r24	; 0x02
    2b4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b4c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b4e:	ae 81       	ldd	r26, Y+6	; 0x06
    2b50:	bf 81       	ldd	r27, Y+7	; 0x07
    2b52:	8f 3f       	cpi	r24, 0xFF	; 255
    2b54:	9f 4f       	sbci	r25, 0xFF	; 255
    2b56:	af 4f       	sbci	r26, 0xFF	; 255
    2b58:	bf 4f       	sbci	r27, 0xFF	; 255
    2b5a:	01 f1       	breq	.+64     	; 0x2b9c <_ZN6Button7processEv+0x120>
    2b5c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b5e:	81 11       	cpse	r24, r1
    2b60:	1d c0       	rjmp	.+58     	; 0x2b9c <_ZN6Button7processEv+0x120>
    2b62:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <millis>
    2b66:	0c 81       	ldd	r16, Y+4	; 0x04
    2b68:	1d 81       	ldd	r17, Y+5	; 0x05
    2b6a:	2e 81       	ldd	r18, Y+6	; 0x06
    2b6c:	3f 81       	ldd	r19, Y+7	; 0x07
    2b6e:	ab 01       	movw	r20, r22
    2b70:	bc 01       	movw	r22, r24
    2b72:	40 1b       	sub	r20, r16
    2b74:	51 0b       	sbc	r21, r17
    2b76:	62 0b       	sbc	r22, r18
    2b78:	73 0b       	sbc	r23, r19
    2b7a:	88 85       	ldd	r24, Y+8	; 0x08
    2b7c:	99 85       	ldd	r25, Y+9	; 0x09
    2b7e:	a0 e0       	ldi	r26, 0x00	; 0
    2b80:	b0 e0       	ldi	r27, 0x00	; 0
    2b82:	84 17       	cp	r24, r20
    2b84:	95 07       	cpc	r25, r21
    2b86:	a6 07       	cpc	r26, r22
    2b88:	b7 07       	cpc	r27, r23
    2b8a:	40 f4       	brcc	.+16     	; 0x2b9c <_ZN6Button7processEv+0x120>
    2b8c:	ee 89       	ldd	r30, Y+22	; 0x16
    2b8e:	ff 89       	ldd	r31, Y+23	; 0x17
    2b90:	30 97       	sbiw	r30, 0x00	; 0
    2b92:	21 f0       	breq	.+8      	; 0x2b9c <_ZN6Button7processEv+0x120>
    2b94:	ce 01       	movw	r24, r28
    2b96:	09 95       	icall
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	8a 8f       	std	Y+26, r24	; 0x1a
    2b9c:	df 91       	pop	r29
    2b9e:	cf 91       	pop	r28
    2ba0:	1f 91       	pop	r17
    2ba2:	0f 91       	pop	r16
    2ba4:	08 95       	ret

00002ba6 <_ZN6Button12pressHandlerEPFvRS_E>:
||
|| @parameter handler The function to call when this button is pressed
*/
void Button::pressHandler(buttonEventHandler handler)
{
  cb_onPress = handler;
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	71 8b       	std	Z+17, r23	; 0x11
    2baa:	60 8b       	std	Z+16, r22	; 0x10
    2bac:	08 95       	ret

00002bae <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    2bae:	0f 93       	push	r16
    2bb0:	fc 01       	movw	r30, r24
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
    2bb2:	01 50       	subi	r16, 0x01	; 1
    2bb4:	04 0f       	add	r16, r20
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    2bb6:	84 a9       	ldd	r24, Z+52	; 0x34
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    2bb8:	96 a9       	ldd	r25, Z+54	; 0x36
    2bba:	94 17       	cp	r25, r20
    2bbc:	18 f0       	brcs	.+6      	; 0x2bc4 <u8g_IsBBXIntersection+0x16>
  {
    if ( v1 >= a0 )
    2bbe:	08 17       	cp	r16, r24
    2bc0:	28 f4       	brcc	.+10     	; 0x2bcc <u8g_IsBBXIntersection+0x1e>
    2bc2:	02 c0       	rjmp	.+4      	; 0x2bc8 <u8g_IsBBXIntersection+0x1a>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    2bc4:	08 17       	cp	r16, r24
    2bc6:	50 f0       	brcs	.+20     	; 0x2bdc <u8g_IsBBXIntersection+0x2e>
    {
      if ( v0 > v1 )
    2bc8:	04 17       	cp	r16, r20
    2bca:	40 f4       	brcc	.+16     	; 0x2bdc <u8g_IsBBXIntersection+0x2e>
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
    2bcc:	21 50       	subi	r18, 0x01	; 1
    2bce:	26 0f       	add	r18, r22
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
    2bd0:	83 a9       	ldd	r24, Z+51	; 0x33
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    2bd2:	95 a9       	ldd	r25, Z+53	; 0x35
    2bd4:	96 17       	cp	r25, r22
    2bd6:	20 f4       	brcc	.+8      	; 0x2be0 <u8g_IsBBXIntersection+0x32>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    2bd8:	28 17       	cp	r18, r24
    2bda:	20 f4       	brcc	.+8      	; 0x2be4 <u8g_IsBBXIntersection+0x36>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	07 c0       	rjmp	.+14     	; 0x2bee <u8g_IsBBXIntersection+0x40>
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    2be0:	28 17       	cp	r18, r24
    2be2:	20 f4       	brcc	.+8      	; 0x2bec <u8g_IsBBXIntersection+0x3e>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	26 17       	cp	r18, r22
    2be8:	10 f0       	brcs	.+4      	; 0x2bee <u8g_IsBBXIntersection+0x40>
    2bea:	f8 cf       	rjmp	.-16     	; 0x2bdc <u8g_IsBBXIntersection+0x2e>
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    {
      return 1;
    2bec:	81 e0       	ldi	r24, 0x01	; 1
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
}
    2bee:	0f 91       	pop	r16
    2bf0:	08 95       	ret

00002bf2 <u8g_InitCom>:
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
}

uint8_t u8g_WriteSequenceP(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, const uint8_t *seq)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ_P, cnt, (void *)seq);
    2bf2:	db 01       	movw	r26, r22
    2bf4:	14 96       	adiw	r26, 0x04	; 4
    2bf6:	ed 91       	ld	r30, X+
    2bf8:	fc 91       	ld	r31, X
    2bfa:	15 97       	sbiw	r26, 0x05	; 5
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	61 e0       	ldi	r22, 0x01	; 1
    2c02:	09 94       	ijmp

00002c04 <u8g_SetChipSelect>:
    2c04:	db 01       	movw	r26, r22
    2c06:	14 96       	adiw	r26, 0x04	; 4
    2c08:	ed 91       	ld	r30, X+
    2c0a:	fc 91       	ld	r31, X
    2c0c:	15 97       	sbiw	r26, 0x05	; 5
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	63 e0       	ldi	r22, 0x03	; 3
    2c14:	09 94       	ijmp

00002c16 <u8g_SetResetLow>:
    2c16:	db 01       	movw	r26, r22
    2c18:	14 96       	adiw	r26, 0x04	; 4
    2c1a:	ed 91       	ld	r30, X+
    2c1c:	fc 91       	ld	r31, X
    2c1e:	15 97       	sbiw	r26, 0x05	; 5
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	40 e0       	ldi	r20, 0x00	; 0
    2c26:	64 e0       	ldi	r22, 0x04	; 4
    2c28:	09 94       	ijmp

00002c2a <u8g_SetResetHigh>:
    2c2a:	db 01       	movw	r26, r22
    2c2c:	14 96       	adiw	r26, 0x04	; 4
    2c2e:	ed 91       	ld	r30, X+
    2c30:	fc 91       	ld	r31, X
    2c32:	15 97       	sbiw	r26, 0x05	; 5
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	41 e0       	ldi	r20, 0x01	; 1
    2c3a:	64 e0       	ldi	r22, 0x04	; 4
    2c3c:	09 94       	ijmp

00002c3e <u8g_SetAddress>:
    2c3e:	db 01       	movw	r26, r22
    2c40:	14 96       	adiw	r26, 0x04	; 4
    2c42:	ed 91       	ld	r30, X+
    2c44:	fc 91       	ld	r31, X
    2c46:	15 97       	sbiw	r26, 0x05	; 5
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	62 e0       	ldi	r22, 0x02	; 2
    2c4e:	09 94       	ijmp

00002c50 <u8g_WriteByte>:
    2c50:	db 01       	movw	r26, r22
    2c52:	14 96       	adiw	r26, 0x04	; 4
    2c54:	ed 91       	ld	r30, X+
    2c56:	fc 91       	ld	r31, X
    2c58:	15 97       	sbiw	r26, 0x05	; 5
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	65 e0       	ldi	r22, 0x05	; 5
    2c60:	09 94       	ijmp

00002c62 <u8g_WriteSequence>:
    2c62:	db 01       	movw	r26, r22
    2c64:	14 96       	adiw	r26, 0x04	; 4
    2c66:	ed 91       	ld	r30, X+
    2c68:	fc 91       	ld	r31, X
    2c6a:	15 97       	sbiw	r26, 0x05	; 5
    2c6c:	66 e0       	ldi	r22, 0x06	; 6
    2c6e:	09 94       	ijmp

00002c70 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
    2c70:	cf 92       	push	r12
    2c72:	df 92       	push	r13
    2c74:	ef 92       	push	r14
    2c76:	ff 92       	push	r15
    2c78:	0f 93       	push	r16
    2c7a:	1f 93       	push	r17
    2c7c:	cf 93       	push	r28
    2c7e:	df 93       	push	r29
    2c80:	8c 01       	movw	r16, r24
    2c82:	6b 01       	movw	r12, r22
    2c84:	7a 01       	movw	r14, r20
  uint8_t is_escape = 0;
    2c86:	80 e0       	ldi	r24, 0x00	; 0
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
    2c88:	f7 01       	movw	r30, r14
    2c8a:	c4 91       	lpm	r28, Z
    if ( is_escape == 0 )
    2c8c:	81 11       	cpse	r24, r1
    2c8e:	0a c0       	rjmp	.+20     	; 0x2ca4 <u8g_WriteEscSeqP+0x34>
    {
      if ( value != 255 )
    2c90:	cf 3f       	cpi	r28, 0xFF	; 255
    2c92:	e9 f1       	breq	.+122    	; 0x2d0e <u8g_WriteEscSeqP+0x9e>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    2c94:	4c 2f       	mov	r20, r28
    2c96:	b6 01       	movw	r22, r12
    2c98:	c8 01       	movw	r24, r16
    2c9a:	0e 94 28 16 	call	0x2c50	; 0x2c50 <u8g_WriteByte>
    2c9e:	81 11       	cpse	r24, r1
    2ca0:	2f c0       	rjmp	.+94     	; 0x2d00 <u8g_WriteEscSeqP+0x90>
    2ca2:	3a c0       	rjmp	.+116    	; 0x2d18 <u8g_WriteEscSeqP+0xa8>
        is_escape = 1;
      }
    }
    else
    {
      if ( value == 255 )
    2ca4:	cf 3f       	cpi	r28, 0xFF	; 255
    2ca6:	11 f4       	brne	.+4      	; 0x2cac <u8g_WriteEscSeqP+0x3c>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    2ca8:	4f ef       	ldi	r20, 0xFF	; 255
    2caa:	f5 cf       	rjmp	.-22     	; 0x2c96 <u8g_WriteEscSeqP+0x26>
          return 0;
      }
      else if ( value == 254 )
    2cac:	ce 3f       	cpi	r28, 0xFE	; 254
    2cae:	b1 f1       	breq	.+108    	; 0x2d1c <u8g_WriteEscSeqP+0xac>
      {
        break;
      }
      else if ( value >= 0x0f0 )
    2cb0:	c0 3f       	cpi	r28, 0xF0	; 240
    2cb2:	30 f5       	brcc	.+76     	; 0x2d00 <u8g_WriteEscSeqP+0x90>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
    2cb4:	c0 3e       	cpi	r28, 0xE0	; 224
    2cb6:	38 f0       	brcs	.+14     	; 0x2cc6 <u8g_WriteEscSeqP+0x56>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
    2cb8:	4c 2f       	mov	r20, r28
    2cba:	4f 70       	andi	r20, 0x0F	; 15
    2cbc:	b6 01       	movw	r22, r12
    2cbe:	c8 01       	movw	r24, r16
    2cc0:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <u8g_SetAddress>
    2cc4:	1d c0       	rjmp	.+58     	; 0x2d00 <u8g_WriteEscSeqP+0x90>
      }
      else if ( value >= 0xd0 )
    2cc6:	c0 3d       	cpi	r28, 0xD0	; 208
    2cc8:	38 f0       	brcs	.+14     	; 0x2cd8 <u8g_WriteEscSeqP+0x68>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
    2cca:	4c 2f       	mov	r20, r28
    2ccc:	4f 70       	andi	r20, 0x0F	; 15
    2cce:	b6 01       	movw	r22, r12
    2cd0:	c8 01       	movw	r24, r16
    2cd2:	0e 94 02 16 	call	0x2c04	; 0x2c04 <u8g_SetChipSelect>
    2cd6:	14 c0       	rjmp	.+40     	; 0x2d00 <u8g_WriteEscSeqP+0x90>
      }
      else if ( value >= 0xc0 )
    2cd8:	c0 3c       	cpi	r28, 0xC0	; 192
    2cda:	a0 f0       	brcs	.+40     	; 0x2d04 <u8g_WriteEscSeqP+0x94>
      {
        u8g_SetResetLow(u8g, dev);
    2cdc:	b6 01       	movw	r22, r12
    2cde:	c8 01       	movw	r24, r16
    2ce0:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <u8g_SetResetLow>
        value &= 0x0f;
        value <<= 4;
    2ce4:	c2 95       	swap	r28
    2ce6:	c0 7f       	andi	r28, 0xF0	; 240
        value+=2;
        u8g_Delay(value);
    2ce8:	ce 5f       	subi	r28, 0xFE	; 254
    2cea:	d0 e0       	ldi	r29, 0x00	; 0
    2cec:	ce 01       	movw	r24, r28
    2cee:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
    2cf2:	b6 01       	movw	r22, r12
    2cf4:	c8 01       	movw	r24, r16
    2cf6:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <u8g_SetResetHigh>
        u8g_Delay(value);
    2cfa:	ce 01       	movw	r24, r28
    2cfc:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <u8g_Delay>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	06 c0       	rjmp	.+12     	; 0x2d10 <u8g_WriteEscSeqP+0xa0>
      else if ( value >= 0xbe )
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
    2d04:	c7 fd       	sbrc	r28, 7
    2d06:	fc cf       	rjmp	.-8      	; 0x2d00 <u8g_WriteEscSeqP+0x90>
      {
        u8g_Delay(value);
    2d08:	8c 2f       	mov	r24, r28
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	f7 cf       	rjmp	.-18     	; 0x2cfc <u8g_WriteEscSeqP+0x8c>
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    }
    esc_seq++;
    2d10:	ff ef       	ldi	r31, 0xFF	; 255
    2d12:	ef 1a       	sub	r14, r31
    2d14:	ff 0a       	sbc	r15, r31
  }
    2d16:	b8 cf       	rjmp	.-144    	; 0x2c88 <u8g_WriteEscSeqP+0x18>
    if ( is_escape == 0 )
    {
      if ( value != 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	01 c0       	rjmp	.+2      	; 0x2d1e <u8g_WriteEscSeqP+0xae>
      }
      is_escape = 0;
    }
    esc_seq++;
  }
  return 1;
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
}
    2d1e:	df 91       	pop	r29
    2d20:	cf 91       	pop	r28
    2d22:	1f 91       	pop	r17
    2d24:	0f 91       	pop	r16
    2d26:	ff 90       	pop	r15
    2d28:	ef 90       	pop	r14
    2d2a:	df 90       	pop	r13
    2d2c:	cf 90       	pop	r12
    2d2e:	08 95       	ret

00002d30 <u8g_com_arduino_ssd_start_sequence>:
//#define I2C_CMD_MODE  0x080
#define I2C_CMD_MODE    0x000
#define I2C_DATA_MODE   0x040

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
    2d30:	cf 93       	push	r28
    2d32:	df 93       	push	r29
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    2d34:	fc 01       	movw	r30, r24
    2d36:	23 a5       	ldd	r18, Z+43	; 0x2b
    2d38:	22 23       	and	r18, r18
    2d3a:	81 f0       	breq	.+32     	; 0x2d5c <u8g_com_arduino_ssd_start_sequence+0x2c>
    2d3c:	ec 01       	movw	r28, r24
    return 1;

  /* setup bus, might be a repeated start */
  if ( u8g_i2c_start(I2C_SLA) == 0 )
    2d3e:	88 e7       	ldi	r24, 0x78	; 120
    2d40:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <u8g_i2c_start>
    2d44:	81 11       	cpse	r24, r1
    2d46:	02 c0       	rjmp	.+4      	; 0x2d4c <u8g_com_arduino_ssd_start_sequence+0x1c>
    return 0;
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	09 c0       	rjmp	.+18     	; 0x2d5e <u8g_com_arduino_ssd_start_sequence+0x2e>
  if ( u8g->pin_list[U8G_PI_A0_STATE] == 0 )
    2d4c:	8e a1       	ldd	r24, Y+38	; 0x26
    2d4e:	81 11       	cpse	r24, r1
    if ( u8g_i2c_send_byte(I2C_CMD_MODE) == 0 )
      return 0;
  }
  else
  {
    if ( u8g_i2c_send_byte(I2C_DATA_MODE) == 0 )
    2d50:	80 e4       	ldi	r24, 0x40	; 64
    2d52:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <u8g_i2c_send_byte>
    2d56:	88 23       	and	r24, r24
    2d58:	b9 f3       	breq	.-18     	; 0x2d48 <u8g_com_arduino_ssd_start_sequence+0x18>
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
    2d5a:	1b a6       	std	Y+43, r1	; 0x2b

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    return 1;
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
  return 1;
}
    2d5e:	df 91       	pop	r29
    2d60:	cf 91       	pop	r28
    2d62:	08 95       	ret

00002d64 <u8g_com_arduino_ssd_i2c_fn>:

uint8_t u8g_com_arduino_ssd_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
    2d64:	0f 93       	push	r16
    2d66:	1f 93       	push	r17
    2d68:	cf 93       	push	r28
    2d6a:	c4 2f       	mov	r28, r20
    2d6c:	89 01       	movw	r16, r18
  switch(msg)
    2d6e:	63 30       	cpi	r22, 0x03	; 3
    2d70:	c1 f0       	breq	.+48     	; 0x2da2 <u8g_com_arduino_ssd_i2c_fn+0x3e>
    2d72:	50 f4       	brcc	.+20     	; 0x2d88 <u8g_com_arduino_ssd_i2c_fn+0x24>
    2d74:	61 30       	cpi	r22, 0x01	; 1
    2d76:	81 f0       	breq	.+32     	; 0x2d98 <u8g_com_arduino_ssd_i2c_fn+0x34>
    2d78:	62 30       	cpi	r22, 0x02	; 2
    2d7a:	09 f0       	breq	.+2      	; 0x2d7e <u8g_com_arduino_ssd_i2c_fn+0x1a>
    2d7c:	48 c0       	rjmp	.+144    	; 0x2e0e <u8g_com_arduino_ssd_i2c_fn+0xaa>
      }
      // u8g_i2c_stop();
      break;
      
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g->pin_list[U8G_PI_A0_STATE] = arg_val;
    2d7e:	fc 01       	movw	r30, r24
    2d80:	46 a3       	std	Z+38, r20	; 0x26
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again */
    2d82:	21 e0       	ldi	r18, 0x01	; 1
    2d84:	23 a7       	std	Z+43, r18	; 0x2b
    2d86:	43 c0       	rjmp	.+134    	; 0x2e0e <u8g_com_arduino_ssd_i2c_fn+0xaa>
  return 1;
}

uint8_t u8g_com_arduino_ssd_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
  switch(msg)
    2d88:	66 30       	cpi	r22, 0x06	; 6
    2d8a:	11 f1       	breq	.+68     	; 0x2dd0 <u8g_com_arduino_ssd_i2c_fn+0x6c>
    2d8c:	67 30       	cpi	r22, 0x07	; 7
    2d8e:	79 f1       	breq	.+94     	; 0x2dee <u8g_com_arduino_ssd_i2c_fn+0x8a>
    2d90:	65 30       	cpi	r22, 0x05	; 5
    2d92:	09 f0       	breq	.+2      	; 0x2d96 <u8g_com_arduino_ssd_i2c_fn+0x32>
    2d94:	3c c0       	rjmp	.+120    	; 0x2e0e <u8g_com_arduino_ssd_i2c_fn+0xaa>
    2d96:	0e c0       	rjmp	.+28     	; 0x2db4 <u8g_com_arduino_ssd_i2c_fn+0x50>
    case U8G_COM_MSG_INIT:
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SCL, HIGH);
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SDA, HIGH);
      //u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: unknown mode */
    
      u8g_i2c_init(u8g->pin_list[U8G_PI_I2C_OPTION]);
    2d98:	fc 01       	movw	r30, r24
    2d9a:	86 a5       	ldd	r24, Z+46	; 0x2e
    2d9c:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <u8g_i2c_init>
    2da0:	36 c0       	rjmp	.+108    	; 0x2e0e <u8g_com_arduino_ssd_i2c_fn+0xaa>
      /* Currently disabled, but it could be enable. Previous restrictions have been removed */
      /* u8g_com_arduino_digital_write(u8g, U8G_PI_RESET, arg_val); */
      break;
      
    case U8G_COM_MSG_CHIP_SELECT:
      u8g->pin_list[U8G_PI_A0_STATE] = 0;
    2da2:	fc 01       	movw	r30, r24
    2da4:	16 a2       	std	Z+38, r1	; 0x26
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again, also forces start condition */
    2da6:	21 e0       	ldi	r18, 0x01	; 1
    2da8:	23 a7       	std	Z+43, r18	; 0x2b
      if ( arg_val == 0 )
    2daa:	41 11       	cpse	r20, r1
    2dac:	30 c0       	rjmp	.+96     	; 0x2e0e <u8g_com_arduino_ssd_i2c_fn+0xaa>
      {
        /* disable chip, send stop condition */
	u8g_i2c_stop();
    2dae:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <u8g_i2c_stop>
    2db2:	2d c0       	rjmp	.+90     	; 0x2e0e <u8g_com_arduino_ssd_i2c_fn+0xaa>
      }
      break;

    case U8G_COM_MSG_WRITE_BYTE:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    2db4:	0e 94 98 16 	call	0x2d30	; 0x2d30 <u8g_com_arduino_ssd_start_sequence>
    2db8:	81 11       	cpse	r24, r1
    2dba:	04 c0       	rjmp	.+8      	; 0x2dc4 <u8g_com_arduino_ssd_i2c_fn+0x60>
	return u8g_i2c_stop(), 0;
    2dbc:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <u8g_i2c_stop>
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	26 c0       	rjmp	.+76     	; 0x2e10 <u8g_com_arduino_ssd_i2c_fn+0xac>
      if ( u8g_i2c_send_byte(arg_val) == 0 )
    2dc4:	8c 2f       	mov	r24, r28
    2dc6:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <u8g_i2c_send_byte>
    2dca:	81 11       	cpse	r24, r1
    2dcc:	20 c0       	rjmp	.+64     	; 0x2e0e <u8g_com_arduino_ssd_i2c_fn+0xaa>
    2dce:	f6 cf       	rjmp	.-20     	; 0x2dbc <u8g_com_arduino_ssd_i2c_fn+0x58>
      // u8g_i2c_stop();
      break;
    
    case U8G_COM_MSG_WRITE_SEQ:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    2dd0:	0e 94 98 16 	call	0x2d30	; 0x2d30 <u8g_com_arduino_ssd_start_sequence>
    2dd4:	88 23       	and	r24, r24
    2dd6:	91 f3       	breq	.-28     	; 0x2dbc <u8g_com_arduino_ssd_i2c_fn+0x58>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    2dd8:	cc 23       	and	r28, r28
    2dda:	c9 f0       	breq	.+50     	; 0x2e0e <u8g_com_arduino_ssd_i2c_fn+0xaa>
        {
	  if ( u8g_i2c_send_byte(*ptr++) == 0 )
    2ddc:	f8 01       	movw	r30, r16
    2dde:	81 91       	ld	r24, Z+
    2de0:	8f 01       	movw	r16, r30
    2de2:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <u8g_i2c_send_byte>
    2de6:	88 23       	and	r24, r24
    2de8:	49 f3       	breq	.-46     	; 0x2dbc <u8g_com_arduino_ssd_i2c_fn+0x58>
	    return u8g_i2c_stop(), 0;
          arg_val--;
    2dea:	c1 50       	subi	r28, 0x01	; 1
    2dec:	f5 cf       	rjmp	.-22     	; 0x2dd8 <u8g_com_arduino_ssd_i2c_fn+0x74>
      // u8g_i2c_stop();
      break;

    case U8G_COM_MSG_WRITE_SEQ_P:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    2dee:	0e 94 98 16 	call	0x2d30	; 0x2d30 <u8g_com_arduino_ssd_start_sequence>
    2df2:	88 23       	and	r24, r24
    2df4:	19 f3       	breq	.-58     	; 0x2dbc <u8g_com_arduino_ssd_i2c_fn+0x58>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    2df6:	cc 23       	and	r28, r28
    2df8:	51 f0       	breq	.+20     	; 0x2e0e <u8g_com_arduino_ssd_i2c_fn+0xaa>
        {
	  if ( u8g_i2c_send_byte(u8g_pgm_read(ptr)) == 0 )
    2dfa:	f8 01       	movw	r30, r16
    2dfc:	84 91       	lpm	r24, Z
    2dfe:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <u8g_i2c_send_byte>
    2e02:	88 23       	and	r24, r24
    2e04:	29 f0       	breq	.+10     	; 0x2e10 <u8g_com_arduino_ssd_i2c_fn+0xac>
	    return 0;
          ptr++;
    2e06:	0f 5f       	subi	r16, 0xFF	; 255
    2e08:	1f 4f       	sbci	r17, 0xFF	; 255
          arg_val--;
    2e0a:	c1 50       	subi	r28, 0x01	; 1
    2e0c:	f4 cf       	rjmp	.-24     	; 0x2df6 <u8g_com_arduino_ssd_i2c_fn+0x92>
      }
      */
#endif
      break;
  }
  return 1;
    2e0e:	81 e0       	ldi	r24, 0x01	; 1
}
    2e10:	cf 91       	pop	r28
    2e12:	1f 91       	pop	r17
    2e14:	0f 91       	pop	r16
    2e16:	08 95       	ret

00002e18 <u8g_i2c_set_error>:
}

uint8_t u8g_i2c_get_err_pos(void)
{
  return u8g_i2c_err_pos;
}
    2e18:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <u8g_i2c_err_code>
    2e1c:	91 11       	cpse	r25, r1
    2e1e:	04 c0       	rjmp	.+8      	; 0x2e28 <u8g_i2c_set_error+0x10>
    2e20:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <u8g_i2c_err_code>
    2e24:	60 93 30 04 	sts	0x0430, r22	; 0x800430 <u8g_i2c_err_pos>
    2e28:	08 95       	ret

00002e2a <u8g_i2c_clear_error>:
    2e2a:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <u8g_i2c_err_code>
    2e2e:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <u8g_i2c_err_pos>
    2e32:	08 95       	ret

00002e34 <u8g_i2c_init>:
    TWSR = 0;
	--> 400KHz

    F_CPU/(2*100000)-8  --> calculate TWBR value for 100KHz
*/
  u8g_i2c_opt = options;
    2e34:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <u8g_i2c_opt>
  TWSR = 0;
    2e38:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  if ( options & U8G_I2C_OPT_FAST )
    2e3c:	84 ff       	sbrs	r24, 4
    2e3e:	02 c0       	rjmp	.+4      	; 0x2e44 <u8g_i2c_init+0x10>
  {
    TWBR = F_CPU/(2*400000)-8;
    2e40:	8c e0       	ldi	r24, 0x0C	; 12
    2e42:	01 c0       	rjmp	.+2      	; 0x2e46 <u8g_i2c_init+0x12>
  }
  else
  {  
    TWBR = F_CPU/(2*100000)-8;
    2e44:	88 e4       	ldi	r24, 0x48	; 72
    2e46:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  }
  u8g_i2c_clear_error();
    2e4a:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <u8g_i2c_clear_error>

00002e4e <u8g_i2c_wait>:
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
    2e4e:	1f 93       	push	r17
    2e50:	cf 93       	push	r28
    2e52:	df 93       	push	r29
    2e54:	00 d0       	rcall	.+0      	; 0x2e56 <u8g_i2c_wait+0x8>
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
    2e5a:	20 ed       	ldi	r18, 0xD0	; 208
    2e5c:	37 e0       	ldi	r19, 0x07	; 7
	{
	  u8g_i2c_set_error(U8G_I2C_ERR_TIMEOUT, pos);
	  return 0; /* error */
	}
      }
      cnt--;
    2e5e:	3a 83       	std	Y+2, r19	; 0x02
    2e60:	29 83       	std	Y+1, r18	; 0x01
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
  while( !(TWCR & mask) )
    2e62:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2e66:	98 23       	and	r25, r24
    2e68:	99 f4       	brne	.+38     	; 0x2e90 <u8g_i2c_wait+0x42>
  {
      if ( cnt == 0 )
    2e6a:	29 81       	ldd	r18, Y+1	; 0x01
    2e6c:	3a 81       	ldd	r19, Y+2	; 0x02
    2e6e:	23 2b       	or	r18, r19
    2e70:	51 f4       	brne	.+20     	; 0x2e86 <u8g_i2c_wait+0x38>
    2e72:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <u8g_i2c_opt>
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    2e76:	18 2f       	mov	r17, r24
    2e78:	12 70       	andi	r17, 0x02	; 2
    2e7a:	81 fd       	sbrc	r24, 1
    2e7c:	09 c0       	rjmp	.+18     	; 0x2e90 <u8g_i2c_wait+0x42>
	{
	  return 1;	/* all ok */
	}
	else
	{
	  u8g_i2c_set_error(U8G_I2C_ERR_TIMEOUT, pos);
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <u8g_i2c_set_error>
	  return 0; /* error */
    2e84:	06 c0       	rjmp	.+12     	; 0x2e92 <u8g_i2c_wait+0x44>
	}
      }
      cnt--;
    2e86:	29 81       	ldd	r18, Y+1	; 0x01
    2e88:	3a 81       	ldd	r19, Y+2	; 0x02
    2e8a:	21 50       	subi	r18, 0x01	; 1
    2e8c:	31 09       	sbc	r19, r1
    2e8e:	e7 cf       	rjmp	.-50     	; 0x2e5e <u8g_i2c_wait+0x10>
  {
      if ( cnt == 0 )
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
	{
	  return 1;	/* all ok */
    2e90:	11 e0       	ldi	r17, 0x01	; 1
	}
      }
      cnt--;
    }
  return 1;	/* all ok */
}
    2e92:	81 2f       	mov	r24, r17
    2e94:	0f 90       	pop	r0
    2e96:	0f 90       	pop	r0
    2e98:	df 91       	pop	r29
    2e9a:	cf 91       	pop	r28
    2e9c:	1f 91       	pop	r17
    2e9e:	08 95       	ret

00002ea0 <u8g_i2c_start>:

/* sla includes all 8 bits (with r/w bit), assums master transmit */
uint8_t u8g_i2c_start(uint8_t sla)
{
    2ea0:	cf 93       	push	r28
    2ea2:	c8 2f       	mov	r28, r24
  register uint8_t status;
  
  /* send start */
  TWCR = _BV(TWINT) |  _BV(TWSTA)  |  _BV(TWEN);
    2ea4:	84 ea       	ldi	r24, 0xA4	; 164
    2ea6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
   
  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 1) == 0 )
    2eaa:	61 e0       	ldi	r22, 0x01	; 1
    2eac:	80 e8       	ldi	r24, 0x80	; 128
    2eae:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <u8g_i2c_wait>
    2eb2:	88 23       	and	r24, r24
    2eb4:	59 f0       	breq	.+22     	; 0x2ecc <u8g_i2c_start+0x2c>
    return 0;
  
  status = TW_STATUS;
    2eb6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2eba:	88 7f       	andi	r24, 0xF8	; 248
 
  /* check status after start */  
  if ( status != TW_START && status != TW_REP_START )
    2ebc:	88 30       	cpi	r24, 0x08	; 8
    2ebe:	41 f0       	breq	.+16     	; 0x2ed0 <u8g_i2c_start+0x30>
    2ec0:	80 31       	cpi	r24, 0x10	; 16
    2ec2:	31 f0       	breq	.+12     	; 0x2ed0 <u8g_i2c_start+0x30>
  {
    u8g_i2c_set_error(U8G_I2C_ERR_BUS, 1);
    2ec4:	61 e0       	ldi	r22, 0x01	; 1
    2ec6:	82 e0       	ldi	r24, 0x02	; 2
    2ec8:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <u8g_i2c_set_error>
    return 0;
    2ecc:	c0 e0       	ldi	r28, 0x00	; 0
    2ece:	1c c0       	rjmp	.+56     	; 0x2f08 <u8g_i2c_start+0x68>
  }

  /* set slave address */  
  TWDR = sla;
    2ed0:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  
  /* enable sla transfer */
  TWCR = _BV(TWINT)  |  _BV(TWEN);
    2ed4:	84 e8       	ldi	r24, 0x84	; 132
    2ed6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 2) == 0 )
    2eda:	62 e0       	ldi	r22, 0x02	; 2
    2edc:	80 e8       	ldi	r24, 0x80	; 128
    2ede:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <u8g_i2c_wait>
    2ee2:	88 23       	and	r24, r24
    2ee4:	99 f3       	breq	.-26     	; 0x2ecc <u8g_i2c_start+0x2c>
    2ee6:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <u8g_i2c_opt>
    return 0;

  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    2eea:	c8 2f       	mov	r28, r24
    2eec:	c2 70       	andi	r28, 0x02	; 2
    2eee:	81 fd       	sbrc	r24, 1
    2ef0:	0a c0       	rjmp	.+20     	; 0x2f06 <u8g_i2c_start+0x66>
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;
    2ef2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    /* check status after sla */  
    if ( status != TW_MT_SLA_ACK )
    2ef6:	88 7f       	andi	r24, 0xF8	; 248
    2ef8:	88 31       	cpi	r24, 0x18	; 24
    2efa:	29 f0       	breq	.+10     	; 0x2f06 <u8g_i2c_start+0x66>
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 2);
    2efc:	62 e0       	ldi	r22, 0x02	; 2
    2efe:	82 e0       	ldi	r24, 0x02	; 2
    2f00:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <u8g_i2c_set_error>
      return 0;
    2f04:	01 c0       	rjmp	.+2      	; 0x2f08 <u8g_i2c_start+0x68>
    }
  }

   return 1;
    2f06:	c1 e0       	ldi	r28, 0x01	; 1
}
    2f08:	8c 2f       	mov	r24, r28
    2f0a:	cf 91       	pop	r28
    2f0c:	08 95       	ret

00002f0e <u8g_i2c_send_byte>:

uint8_t u8g_i2c_send_byte(uint8_t data)
{
    2f0e:	cf 93       	push	r28
  register uint8_t status;
  TWDR = data;
    2f10:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  TWCR = _BV(TWINT)  |  _BV(TWEN);
    2f14:	84 e8       	ldi	r24, 0x84	; 132
    2f16:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  if ( u8g_i2c_wait(_BV(TWINT), 3) == 0 )
    2f1a:	63 e0       	ldi	r22, 0x03	; 3
    2f1c:	80 e8       	ldi	r24, 0x80	; 128
    2f1e:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <u8g_i2c_wait>
    2f22:	c8 2f       	mov	r28, r24
    2f24:	88 23       	and	r24, r24
    2f26:	89 f0       	breq	.+34     	; 0x2f4a <u8g_i2c_send_byte+0x3c>
    2f28:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <u8g_i2c_opt>
    return 0;
    
  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    2f2c:	c8 2f       	mov	r28, r24
    2f2e:	c2 70       	andi	r28, 0x02	; 2
    2f30:	81 fd       	sbrc	r24, 1
    2f32:	0a c0       	rjmp	.+20     	; 0x2f48 <u8g_i2c_send_byte+0x3a>
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;  
    2f34:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    if ( status != TW_MT_DATA_ACK )
    2f38:	88 7f       	andi	r24, 0xF8	; 248
    2f3a:	88 32       	cpi	r24, 0x28	; 40
    2f3c:	29 f0       	breq	.+10     	; 0x2f48 <u8g_i2c_send_byte+0x3a>
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 3);
    2f3e:	63 e0       	ldi	r22, 0x03	; 3
    2f40:	82 e0       	ldi	r24, 0x02	; 2
    2f42:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <u8g_i2c_set_error>
      return 0;
    2f46:	01 c0       	rjmp	.+2      	; 0x2f4a <u8g_i2c_send_byte+0x3c>
    }
  }

  return 1;  
    2f48:	c1 e0       	ldi	r28, 0x01	; 1
}
    2f4a:	8c 2f       	mov	r24, r28
    2f4c:	cf 91       	pop	r28
    2f4e:	08 95       	ret

00002f50 <u8g_i2c_stop>:

void u8g_i2c_stop(void)
{
  /* write stop */
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
    2f50:	84 e9       	ldi	r24, 0x94	; 148
    2f52:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  /* no error is checked for the stop condition */  
  u8g_i2c_wait(_BV(TWSTO), 4);
    2f56:	64 e0       	ldi	r22, 0x04	; 4
    2f58:	80 e1       	ldi	r24, 0x10	; 16
    2f5a:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <u8g_i2c_wait>

00002f5e <u8g_Delay>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f5e:	2e e9       	ldi	r18, 0x9E	; 158
    2f60:	3f e0       	ldi	r19, 0x0F	; 15
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    2f62:	00 97       	sbiw	r24, 0x00	; 0
    2f64:	29 f0       	breq	.+10     	; 0x2f70 <u8g_Delay+0x12>
    2f66:	f9 01       	movw	r30, r18
    2f68:	31 97       	sbiw	r30, 0x01	; 1
    2f6a:	f1 f7       	brne	.-4      	; 0x2f68 <u8g_Delay+0xa>
  {
    _delay_loop_2( (F_CPU / 4000 ) -2);
    val--;
    2f6c:	01 97       	sbiw	r24, 0x01	; 1
    2f6e:	f9 cf       	rjmp	.-14     	; 0x2f62 <u8g_Delay+0x4>
  }
}
    2f70:	08 95       	ret

00002f72 <u8g_page_First>:
void u8g_page_Init(u8g_page_t *p, u8g_uint_t page_height, u8g_uint_t total_height )
{
  p->page_height = page_height;
  p->total_height = total_height;
  p->page = 0;
  u8g_page_First(p);
    2f72:	fc 01       	movw	r30, r24
    2f74:	12 82       	std	Z+2, r1	; 0x02
    2f76:	80 81       	ld	r24, Z
    2f78:	81 50       	subi	r24, 0x01	; 1
    2f7a:	83 83       	std	Z+3, r24	; 0x03
    2f7c:	14 82       	std	Z+4, r1	; 0x04
    2f7e:	08 95       	ret

00002f80 <u8g_page_Next>:
  p->page_y1--;
  p->page = 0;
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
    2f80:	fc 01       	movw	r30, r24
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
    2f82:	30 81       	ld	r19, Z
    2f84:	92 81       	ldd	r25, Z+2	; 0x02
    2f86:	93 0f       	add	r25, r19
    2f88:	92 83       	std	Z+2, r25	; 0x02
  if ( p->page_y0 >= p->total_height )
    2f8a:	21 81       	ldd	r18, Z+1	; 0x01
    2f8c:	92 17       	cp	r25, r18
    2f8e:	60 f4       	brcc	.+24     	; 0x2fa8 <u8g_page_Next+0x28>
    return 0;
  p->page++;
    2f90:	94 81       	ldd	r25, Z+4	; 0x04
    2f92:	9f 5f       	subi	r25, 0xFF	; 255
    2f94:	94 83       	std	Z+4, r25	; 0x04
  y1 = p->page_y1;
    2f96:	83 81       	ldd	r24, Z+3	; 0x03
  y1 += p->page_height;
    2f98:	83 0f       	add	r24, r19
  if ( y1 >= p->total_height )
    2f9a:	82 17       	cp	r24, r18
    2f9c:	10 f0       	brcs	.+4      	; 0x2fa2 <u8g_page_Next+0x22>
  {
    y1 = p->total_height;
    y1--;
    2f9e:	8f ef       	ldi	r24, 0xFF	; 255
    2fa0:	82 0f       	add	r24, r18
  }
  p->page_y1 = y1;
    2fa2:	83 83       	std	Z+3, r24	; 0x03
  
  return 1;
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	08 95       	ret
uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
  if ( p->page_y0 >= p->total_height )
    return 0;
    2fa8:	80 e0       	ldi	r24, 0x00	; 0
    y1--;
  }
  p->page_y1 = y1;
  
  return 1;
}
    2faa:	08 95       	ret

00002fac <__udivmodsi4>:
    2fac:	a1 e2       	ldi	r26, 0x21	; 33
    2fae:	1a 2e       	mov	r1, r26
    2fb0:	aa 1b       	sub	r26, r26
    2fb2:	bb 1b       	sub	r27, r27
    2fb4:	fd 01       	movw	r30, r26
    2fb6:	0d c0       	rjmp	.+26     	; 0x2fd2 <__udivmodsi4_ep>

00002fb8 <__udivmodsi4_loop>:
    2fb8:	aa 1f       	adc	r26, r26
    2fba:	bb 1f       	adc	r27, r27
    2fbc:	ee 1f       	adc	r30, r30
    2fbe:	ff 1f       	adc	r31, r31
    2fc0:	a2 17       	cp	r26, r18
    2fc2:	b3 07       	cpc	r27, r19
    2fc4:	e4 07       	cpc	r30, r20
    2fc6:	f5 07       	cpc	r31, r21
    2fc8:	20 f0       	brcs	.+8      	; 0x2fd2 <__udivmodsi4_ep>
    2fca:	a2 1b       	sub	r26, r18
    2fcc:	b3 0b       	sbc	r27, r19
    2fce:	e4 0b       	sbc	r30, r20
    2fd0:	f5 0b       	sbc	r31, r21

00002fd2 <__udivmodsi4_ep>:
    2fd2:	66 1f       	adc	r22, r22
    2fd4:	77 1f       	adc	r23, r23
    2fd6:	88 1f       	adc	r24, r24
    2fd8:	99 1f       	adc	r25, r25
    2fda:	1a 94       	dec	r1
    2fdc:	69 f7       	brne	.-38     	; 0x2fb8 <__udivmodsi4_loop>
    2fde:	60 95       	com	r22
    2fe0:	70 95       	com	r23
    2fe2:	80 95       	com	r24
    2fe4:	90 95       	com	r25
    2fe6:	9b 01       	movw	r18, r22
    2fe8:	ac 01       	movw	r20, r24
    2fea:	bd 01       	movw	r22, r26
    2fec:	cf 01       	movw	r24, r30
    2fee:	08 95       	ret

00002ff0 <__tablejump2__>:
    2ff0:	ee 0f       	add	r30, r30
    2ff2:	ff 1f       	adc	r31, r31
    2ff4:	05 90       	lpm	r0, Z+
    2ff6:	f4 91       	lpm	r31, Z
    2ff8:	e0 2d       	mov	r30, r0
    2ffa:	09 94       	ijmp

00002ffc <dtostrf>:
    2ffc:	ef 92       	push	r14
    2ffe:	0f 93       	push	r16
    3000:	1f 93       	push	r17
    3002:	cf 93       	push	r28
    3004:	df 93       	push	r29
    3006:	e8 01       	movw	r28, r16
    3008:	47 fd       	sbrc	r20, 7
    300a:	02 c0       	rjmp	.+4      	; 0x3010 <dtostrf+0x14>
    300c:	34 e0       	ldi	r19, 0x04	; 4
    300e:	01 c0       	rjmp	.+2      	; 0x3012 <dtostrf+0x16>
    3010:	34 e1       	ldi	r19, 0x14	; 20
    3012:	04 2e       	mov	r0, r20
    3014:	00 0c       	add	r0, r0
    3016:	55 0b       	sbc	r21, r21
    3018:	57 ff       	sbrs	r21, 7
    301a:	03 c0       	rjmp	.+6      	; 0x3022 <dtostrf+0x26>
    301c:	51 95       	neg	r21
    301e:	41 95       	neg	r20
    3020:	51 09       	sbc	r21, r1
    3022:	e3 2e       	mov	r14, r19
    3024:	02 2f       	mov	r16, r18
    3026:	24 2f       	mov	r18, r20
    3028:	ae 01       	movw	r20, r28
    302a:	0e 94 37 1a 	call	0x346e	; 0x346e <dtoa_prf>
    302e:	ce 01       	movw	r24, r28
    3030:	df 91       	pop	r29
    3032:	cf 91       	pop	r28
    3034:	1f 91       	pop	r17
    3036:	0f 91       	pop	r16
    3038:	ef 90       	pop	r14
    303a:	08 95       	ret

0000303c <malloc>:
    303c:	0f 93       	push	r16
    303e:	1f 93       	push	r17
    3040:	cf 93       	push	r28
    3042:	df 93       	push	r29
    3044:	82 30       	cpi	r24, 0x02	; 2
    3046:	91 05       	cpc	r25, r1
    3048:	10 f4       	brcc	.+4      	; 0x304e <malloc+0x12>
    304a:	82 e0       	ldi	r24, 0x02	; 2
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	e0 91 35 04 	lds	r30, 0x0435	; 0x800435 <__flp>
    3052:	f0 91 36 04 	lds	r31, 0x0436	; 0x800436 <__flp+0x1>
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	a0 e0       	ldi	r26, 0x00	; 0
    305c:	b0 e0       	ldi	r27, 0x00	; 0
    305e:	30 97       	sbiw	r30, 0x00	; 0
    3060:	19 f1       	breq	.+70     	; 0x30a8 <malloc+0x6c>
    3062:	40 81       	ld	r20, Z
    3064:	51 81       	ldd	r21, Z+1	; 0x01
    3066:	02 81       	ldd	r16, Z+2	; 0x02
    3068:	13 81       	ldd	r17, Z+3	; 0x03
    306a:	48 17       	cp	r20, r24
    306c:	59 07       	cpc	r21, r25
    306e:	c8 f0       	brcs	.+50     	; 0x30a2 <malloc+0x66>
    3070:	84 17       	cp	r24, r20
    3072:	95 07       	cpc	r25, r21
    3074:	69 f4       	brne	.+26     	; 0x3090 <malloc+0x54>
    3076:	10 97       	sbiw	r26, 0x00	; 0
    3078:	31 f0       	breq	.+12     	; 0x3086 <malloc+0x4a>
    307a:	12 96       	adiw	r26, 0x02	; 2
    307c:	0c 93       	st	X, r16
    307e:	12 97       	sbiw	r26, 0x02	; 2
    3080:	13 96       	adiw	r26, 0x03	; 3
    3082:	1c 93       	st	X, r17
    3084:	27 c0       	rjmp	.+78     	; 0x30d4 <malloc+0x98>
    3086:	00 93 35 04 	sts	0x0435, r16	; 0x800435 <__flp>
    308a:	10 93 36 04 	sts	0x0436, r17	; 0x800436 <__flp+0x1>
    308e:	22 c0       	rjmp	.+68     	; 0x30d4 <malloc+0x98>
    3090:	21 15       	cp	r18, r1
    3092:	31 05       	cpc	r19, r1
    3094:	19 f0       	breq	.+6      	; 0x309c <malloc+0x60>
    3096:	42 17       	cp	r20, r18
    3098:	53 07       	cpc	r21, r19
    309a:	18 f4       	brcc	.+6      	; 0x30a2 <malloc+0x66>
    309c:	9a 01       	movw	r18, r20
    309e:	bd 01       	movw	r22, r26
    30a0:	ef 01       	movw	r28, r30
    30a2:	df 01       	movw	r26, r30
    30a4:	f8 01       	movw	r30, r16
    30a6:	db cf       	rjmp	.-74     	; 0x305e <malloc+0x22>
    30a8:	21 15       	cp	r18, r1
    30aa:	31 05       	cpc	r19, r1
    30ac:	f9 f0       	breq	.+62     	; 0x30ec <malloc+0xb0>
    30ae:	28 1b       	sub	r18, r24
    30b0:	39 0b       	sbc	r19, r25
    30b2:	24 30       	cpi	r18, 0x04	; 4
    30b4:	31 05       	cpc	r19, r1
    30b6:	80 f4       	brcc	.+32     	; 0x30d8 <malloc+0x9c>
    30b8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ba:	9b 81       	ldd	r25, Y+3	; 0x03
    30bc:	61 15       	cp	r22, r1
    30be:	71 05       	cpc	r23, r1
    30c0:	21 f0       	breq	.+8      	; 0x30ca <malloc+0x8e>
    30c2:	fb 01       	movw	r30, r22
    30c4:	93 83       	std	Z+3, r25	; 0x03
    30c6:	82 83       	std	Z+2, r24	; 0x02
    30c8:	04 c0       	rjmp	.+8      	; 0x30d2 <malloc+0x96>
    30ca:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <__flp+0x1>
    30ce:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__flp>
    30d2:	fe 01       	movw	r30, r28
    30d4:	32 96       	adiw	r30, 0x02	; 2
    30d6:	44 c0       	rjmp	.+136    	; 0x3160 <malloc+0x124>
    30d8:	fe 01       	movw	r30, r28
    30da:	e2 0f       	add	r30, r18
    30dc:	f3 1f       	adc	r31, r19
    30de:	81 93       	st	Z+, r24
    30e0:	91 93       	st	Z+, r25
    30e2:	22 50       	subi	r18, 0x02	; 2
    30e4:	31 09       	sbc	r19, r1
    30e6:	39 83       	std	Y+1, r19	; 0x01
    30e8:	28 83       	st	Y, r18
    30ea:	3a c0       	rjmp	.+116    	; 0x3160 <malloc+0x124>
    30ec:	20 91 33 04 	lds	r18, 0x0433	; 0x800433 <__brkval>
    30f0:	30 91 34 04 	lds	r19, 0x0434	; 0x800434 <__brkval+0x1>
    30f4:	23 2b       	or	r18, r19
    30f6:	41 f4       	brne	.+16     	; 0x3108 <malloc+0xcc>
    30f8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    30fc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3100:	30 93 34 04 	sts	0x0434, r19	; 0x800434 <__brkval+0x1>
    3104:	20 93 33 04 	sts	0x0433, r18	; 0x800433 <__brkval>
    3108:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    310c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3110:	21 15       	cp	r18, r1
    3112:	31 05       	cpc	r19, r1
    3114:	41 f4       	brne	.+16     	; 0x3126 <malloc+0xea>
    3116:	2d b7       	in	r18, 0x3d	; 61
    3118:	3e b7       	in	r19, 0x3e	; 62
    311a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    311e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3122:	24 1b       	sub	r18, r20
    3124:	35 0b       	sbc	r19, r21
    3126:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <__brkval>
    312a:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <__brkval+0x1>
    312e:	e2 17       	cp	r30, r18
    3130:	f3 07       	cpc	r31, r19
    3132:	a0 f4       	brcc	.+40     	; 0x315c <malloc+0x120>
    3134:	2e 1b       	sub	r18, r30
    3136:	3f 0b       	sbc	r19, r31
    3138:	28 17       	cp	r18, r24
    313a:	39 07       	cpc	r19, r25
    313c:	78 f0       	brcs	.+30     	; 0x315c <malloc+0x120>
    313e:	ac 01       	movw	r20, r24
    3140:	4e 5f       	subi	r20, 0xFE	; 254
    3142:	5f 4f       	sbci	r21, 0xFF	; 255
    3144:	24 17       	cp	r18, r20
    3146:	35 07       	cpc	r19, r21
    3148:	48 f0       	brcs	.+18     	; 0x315c <malloc+0x120>
    314a:	4e 0f       	add	r20, r30
    314c:	5f 1f       	adc	r21, r31
    314e:	50 93 34 04 	sts	0x0434, r21	; 0x800434 <__brkval+0x1>
    3152:	40 93 33 04 	sts	0x0433, r20	; 0x800433 <__brkval>
    3156:	81 93       	st	Z+, r24
    3158:	91 93       	st	Z+, r25
    315a:	02 c0       	rjmp	.+4      	; 0x3160 <malloc+0x124>
    315c:	e0 e0       	ldi	r30, 0x00	; 0
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	cf 01       	movw	r24, r30
    3162:	df 91       	pop	r29
    3164:	cf 91       	pop	r28
    3166:	1f 91       	pop	r17
    3168:	0f 91       	pop	r16
    316a:	08 95       	ret

0000316c <free>:
    316c:	cf 93       	push	r28
    316e:	df 93       	push	r29
    3170:	00 97       	sbiw	r24, 0x00	; 0
    3172:	09 f4       	brne	.+2      	; 0x3176 <free+0xa>
    3174:	81 c0       	rjmp	.+258    	; 0x3278 <free+0x10c>
    3176:	fc 01       	movw	r30, r24
    3178:	32 97       	sbiw	r30, 0x02	; 2
    317a:	13 82       	std	Z+3, r1	; 0x03
    317c:	12 82       	std	Z+2, r1	; 0x02
    317e:	a0 91 35 04 	lds	r26, 0x0435	; 0x800435 <__flp>
    3182:	b0 91 36 04 	lds	r27, 0x0436	; 0x800436 <__flp+0x1>
    3186:	10 97       	sbiw	r26, 0x00	; 0
    3188:	81 f4       	brne	.+32     	; 0x31aa <free+0x3e>
    318a:	20 81       	ld	r18, Z
    318c:	31 81       	ldd	r19, Z+1	; 0x01
    318e:	82 0f       	add	r24, r18
    3190:	93 1f       	adc	r25, r19
    3192:	20 91 33 04 	lds	r18, 0x0433	; 0x800433 <__brkval>
    3196:	30 91 34 04 	lds	r19, 0x0434	; 0x800434 <__brkval+0x1>
    319a:	28 17       	cp	r18, r24
    319c:	39 07       	cpc	r19, r25
    319e:	51 f5       	brne	.+84     	; 0x31f4 <free+0x88>
    31a0:	f0 93 34 04 	sts	0x0434, r31	; 0x800434 <__brkval+0x1>
    31a4:	e0 93 33 04 	sts	0x0433, r30	; 0x800433 <__brkval>
    31a8:	67 c0       	rjmp	.+206    	; 0x3278 <free+0x10c>
    31aa:	ed 01       	movw	r28, r26
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	ce 17       	cp	r28, r30
    31b2:	df 07       	cpc	r29, r31
    31b4:	40 f4       	brcc	.+16     	; 0x31c6 <free+0x5a>
    31b6:	4a 81       	ldd	r20, Y+2	; 0x02
    31b8:	5b 81       	ldd	r21, Y+3	; 0x03
    31ba:	9e 01       	movw	r18, r28
    31bc:	41 15       	cp	r20, r1
    31be:	51 05       	cpc	r21, r1
    31c0:	f1 f0       	breq	.+60     	; 0x31fe <free+0x92>
    31c2:	ea 01       	movw	r28, r20
    31c4:	f5 cf       	rjmp	.-22     	; 0x31b0 <free+0x44>
    31c6:	d3 83       	std	Z+3, r29	; 0x03
    31c8:	c2 83       	std	Z+2, r28	; 0x02
    31ca:	40 81       	ld	r20, Z
    31cc:	51 81       	ldd	r21, Z+1	; 0x01
    31ce:	84 0f       	add	r24, r20
    31d0:	95 1f       	adc	r25, r21
    31d2:	c8 17       	cp	r28, r24
    31d4:	d9 07       	cpc	r29, r25
    31d6:	59 f4       	brne	.+22     	; 0x31ee <free+0x82>
    31d8:	88 81       	ld	r24, Y
    31da:	99 81       	ldd	r25, Y+1	; 0x01
    31dc:	84 0f       	add	r24, r20
    31de:	95 1f       	adc	r25, r21
    31e0:	02 96       	adiw	r24, 0x02	; 2
    31e2:	91 83       	std	Z+1, r25	; 0x01
    31e4:	80 83       	st	Z, r24
    31e6:	8a 81       	ldd	r24, Y+2	; 0x02
    31e8:	9b 81       	ldd	r25, Y+3	; 0x03
    31ea:	93 83       	std	Z+3, r25	; 0x03
    31ec:	82 83       	std	Z+2, r24	; 0x02
    31ee:	21 15       	cp	r18, r1
    31f0:	31 05       	cpc	r19, r1
    31f2:	29 f4       	brne	.+10     	; 0x31fe <free+0x92>
    31f4:	f0 93 36 04 	sts	0x0436, r31	; 0x800436 <__flp+0x1>
    31f8:	e0 93 35 04 	sts	0x0435, r30	; 0x800435 <__flp>
    31fc:	3d c0       	rjmp	.+122    	; 0x3278 <free+0x10c>
    31fe:	e9 01       	movw	r28, r18
    3200:	fb 83       	std	Y+3, r31	; 0x03
    3202:	ea 83       	std	Y+2, r30	; 0x02
    3204:	49 91       	ld	r20, Y+
    3206:	59 91       	ld	r21, Y+
    3208:	c4 0f       	add	r28, r20
    320a:	d5 1f       	adc	r29, r21
    320c:	ec 17       	cp	r30, r28
    320e:	fd 07       	cpc	r31, r29
    3210:	61 f4       	brne	.+24     	; 0x322a <free+0xbe>
    3212:	80 81       	ld	r24, Z
    3214:	91 81       	ldd	r25, Z+1	; 0x01
    3216:	84 0f       	add	r24, r20
    3218:	95 1f       	adc	r25, r21
    321a:	02 96       	adiw	r24, 0x02	; 2
    321c:	e9 01       	movw	r28, r18
    321e:	99 83       	std	Y+1, r25	; 0x01
    3220:	88 83       	st	Y, r24
    3222:	82 81       	ldd	r24, Z+2	; 0x02
    3224:	93 81       	ldd	r25, Z+3	; 0x03
    3226:	9b 83       	std	Y+3, r25	; 0x03
    3228:	8a 83       	std	Y+2, r24	; 0x02
    322a:	e0 e0       	ldi	r30, 0x00	; 0
    322c:	f0 e0       	ldi	r31, 0x00	; 0
    322e:	12 96       	adiw	r26, 0x02	; 2
    3230:	8d 91       	ld	r24, X+
    3232:	9c 91       	ld	r25, X
    3234:	13 97       	sbiw	r26, 0x03	; 3
    3236:	00 97       	sbiw	r24, 0x00	; 0
    3238:	19 f0       	breq	.+6      	; 0x3240 <free+0xd4>
    323a:	fd 01       	movw	r30, r26
    323c:	dc 01       	movw	r26, r24
    323e:	f7 cf       	rjmp	.-18     	; 0x322e <free+0xc2>
    3240:	8d 91       	ld	r24, X+
    3242:	9c 91       	ld	r25, X
    3244:	11 97       	sbiw	r26, 0x01	; 1
    3246:	9d 01       	movw	r18, r26
    3248:	2e 5f       	subi	r18, 0xFE	; 254
    324a:	3f 4f       	sbci	r19, 0xFF	; 255
    324c:	82 0f       	add	r24, r18
    324e:	93 1f       	adc	r25, r19
    3250:	20 91 33 04 	lds	r18, 0x0433	; 0x800433 <__brkval>
    3254:	30 91 34 04 	lds	r19, 0x0434	; 0x800434 <__brkval+0x1>
    3258:	28 17       	cp	r18, r24
    325a:	39 07       	cpc	r19, r25
    325c:	69 f4       	brne	.+26     	; 0x3278 <free+0x10c>
    325e:	30 97       	sbiw	r30, 0x00	; 0
    3260:	29 f4       	brne	.+10     	; 0x326c <free+0x100>
    3262:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <__flp+0x1>
    3266:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <__flp>
    326a:	02 c0       	rjmp	.+4      	; 0x3270 <free+0x104>
    326c:	13 82       	std	Z+3, r1	; 0x03
    326e:	12 82       	std	Z+2, r1	; 0x02
    3270:	b0 93 34 04 	sts	0x0434, r27	; 0x800434 <__brkval+0x1>
    3274:	a0 93 33 04 	sts	0x0433, r26	; 0x800433 <__brkval>
    3278:	df 91       	pop	r29
    327a:	cf 91       	pop	r28
    327c:	08 95       	ret

0000327e <realloc>:
    327e:	a0 e0       	ldi	r26, 0x00	; 0
    3280:	b0 e0       	ldi	r27, 0x00	; 0
    3282:	e5 e4       	ldi	r30, 0x45	; 69
    3284:	f9 e1       	ldi	r31, 0x19	; 25
    3286:	0c 94 7d 1c 	jmp	0x38fa	; 0x38fa <__prologue_saves__+0x8>
    328a:	ec 01       	movw	r28, r24
    328c:	00 97       	sbiw	r24, 0x00	; 0
    328e:	21 f4       	brne	.+8      	; 0x3298 <realloc+0x1a>
    3290:	cb 01       	movw	r24, r22
    3292:	0e 94 1e 18 	call	0x303c	; 0x303c <malloc>
    3296:	b4 c0       	rjmp	.+360    	; 0x3400 <realloc+0x182>
    3298:	fc 01       	movw	r30, r24
    329a:	e6 0f       	add	r30, r22
    329c:	f7 1f       	adc	r31, r23
    329e:	9c 01       	movw	r18, r24
    32a0:	22 50       	subi	r18, 0x02	; 2
    32a2:	31 09       	sbc	r19, r1
    32a4:	e2 17       	cp	r30, r18
    32a6:	f3 07       	cpc	r31, r19
    32a8:	08 f4       	brcc	.+2      	; 0x32ac <realloc+0x2e>
    32aa:	a8 c0       	rjmp	.+336    	; 0x33fc <realloc+0x17e>
    32ac:	d9 01       	movw	r26, r18
    32ae:	0d 91       	ld	r16, X+
    32b0:	1c 91       	ld	r17, X
    32b2:	11 97       	sbiw	r26, 0x01	; 1
    32b4:	06 17       	cp	r16, r22
    32b6:	17 07       	cpc	r17, r23
    32b8:	b0 f0       	brcs	.+44     	; 0x32e6 <realloc+0x68>
    32ba:	05 30       	cpi	r16, 0x05	; 5
    32bc:	11 05       	cpc	r17, r1
    32be:	08 f4       	brcc	.+2      	; 0x32c2 <realloc+0x44>
    32c0:	9b c0       	rjmp	.+310    	; 0x33f8 <realloc+0x17a>
    32c2:	c8 01       	movw	r24, r16
    32c4:	04 97       	sbiw	r24, 0x04	; 4
    32c6:	86 17       	cp	r24, r22
    32c8:	97 07       	cpc	r25, r23
    32ca:	08 f4       	brcc	.+2      	; 0x32ce <realloc+0x50>
    32cc:	95 c0       	rjmp	.+298    	; 0x33f8 <realloc+0x17a>
    32ce:	02 50       	subi	r16, 0x02	; 2
    32d0:	11 09       	sbc	r17, r1
    32d2:	06 1b       	sub	r16, r22
    32d4:	17 0b       	sbc	r17, r23
    32d6:	01 93       	st	Z+, r16
    32d8:	11 93       	st	Z+, r17
    32da:	6d 93       	st	X+, r22
    32dc:	7c 93       	st	X, r23
    32de:	cf 01       	movw	r24, r30
    32e0:	0e 94 b6 18 	call	0x316c	; 0x316c <free>
    32e4:	89 c0       	rjmp	.+274    	; 0x33f8 <realloc+0x17a>
    32e6:	5b 01       	movw	r10, r22
    32e8:	a0 1a       	sub	r10, r16
    32ea:	b1 0a       	sbc	r11, r17
    32ec:	4c 01       	movw	r8, r24
    32ee:	80 0e       	add	r8, r16
    32f0:	91 1e       	adc	r9, r17
    32f2:	a0 91 35 04 	lds	r26, 0x0435	; 0x800435 <__flp>
    32f6:	b0 91 36 04 	lds	r27, 0x0436	; 0x800436 <__flp+0x1>
    32fa:	61 2c       	mov	r6, r1
    32fc:	71 2c       	mov	r7, r1
    32fe:	e1 2c       	mov	r14, r1
    3300:	f1 2c       	mov	r15, r1
    3302:	10 97       	sbiw	r26, 0x00	; 0
    3304:	09 f4       	brne	.+2      	; 0x3308 <realloc+0x8a>
    3306:	46 c0       	rjmp	.+140    	; 0x3394 <realloc+0x116>
    3308:	8d 91       	ld	r24, X+
    330a:	9c 91       	ld	r25, X
    330c:	11 97       	sbiw	r26, 0x01	; 1
    330e:	a8 15       	cp	r26, r8
    3310:	b9 05       	cpc	r27, r9
    3312:	b1 f5       	brne	.+108    	; 0x3380 <realloc+0x102>
    3314:	6c 01       	movw	r12, r24
    3316:	42 e0       	ldi	r20, 0x02	; 2
    3318:	c4 0e       	add	r12, r20
    331a:	d1 1c       	adc	r13, r1
    331c:	ca 14       	cp	r12, r10
    331e:	db 04       	cpc	r13, r11
    3320:	78 f1       	brcs	.+94     	; 0x3380 <realloc+0x102>
    3322:	4c 01       	movw	r8, r24
    3324:	8a 18       	sub	r8, r10
    3326:	9b 08       	sbc	r9, r11
    3328:	64 01       	movw	r12, r8
    332a:	42 e0       	ldi	r20, 0x02	; 2
    332c:	c4 0e       	add	r12, r20
    332e:	d1 1c       	adc	r13, r1
    3330:	12 96       	adiw	r26, 0x02	; 2
    3332:	bc 90       	ld	r11, X
    3334:	12 97       	sbiw	r26, 0x02	; 2
    3336:	13 96       	adiw	r26, 0x03	; 3
    3338:	ac 91       	ld	r26, X
    333a:	b5 e0       	ldi	r27, 0x05	; 5
    333c:	cb 16       	cp	r12, r27
    333e:	d1 04       	cpc	r13, r1
    3340:	40 f0       	brcs	.+16     	; 0x3352 <realloc+0xd4>
    3342:	b2 82       	std	Z+2, r11	; 0x02
    3344:	a3 83       	std	Z+3, r26	; 0x03
    3346:	91 82       	std	Z+1, r9	; 0x01
    3348:	80 82       	st	Z, r8
    334a:	d9 01       	movw	r26, r18
    334c:	6d 93       	st	X+, r22
    334e:	7c 93       	st	X, r23
    3350:	09 c0       	rjmp	.+18     	; 0x3364 <realloc+0xe6>
    3352:	0e 5f       	subi	r16, 0xFE	; 254
    3354:	1f 4f       	sbci	r17, 0xFF	; 255
    3356:	80 0f       	add	r24, r16
    3358:	91 1f       	adc	r25, r17
    335a:	f9 01       	movw	r30, r18
    335c:	91 83       	std	Z+1, r25	; 0x01
    335e:	80 83       	st	Z, r24
    3360:	eb 2d       	mov	r30, r11
    3362:	fa 2f       	mov	r31, r26
    3364:	e1 14       	cp	r14, r1
    3366:	f1 04       	cpc	r15, r1
    3368:	31 f0       	breq	.+12     	; 0x3376 <realloc+0xf8>
    336a:	d7 01       	movw	r26, r14
    336c:	13 96       	adiw	r26, 0x03	; 3
    336e:	fc 93       	st	X, r31
    3370:	ee 93       	st	-X, r30
    3372:	12 97       	sbiw	r26, 0x02	; 2
    3374:	41 c0       	rjmp	.+130    	; 0x33f8 <realloc+0x17a>
    3376:	f0 93 36 04 	sts	0x0436, r31	; 0x800436 <__flp+0x1>
    337a:	e0 93 35 04 	sts	0x0435, r30	; 0x800435 <__flp>
    337e:	3c c0       	rjmp	.+120    	; 0x33f8 <realloc+0x17a>
    3380:	68 16       	cp	r6, r24
    3382:	79 06       	cpc	r7, r25
    3384:	08 f4       	brcc	.+2      	; 0x3388 <realloc+0x10a>
    3386:	3c 01       	movw	r6, r24
    3388:	7d 01       	movw	r14, r26
    338a:	12 96       	adiw	r26, 0x02	; 2
    338c:	0d 90       	ld	r0, X+
    338e:	bc 91       	ld	r27, X
    3390:	a0 2d       	mov	r26, r0
    3392:	b7 cf       	rjmp	.-146    	; 0x3302 <realloc+0x84>
    3394:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__brkval>
    3398:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <__brkval+0x1>
    339c:	88 16       	cp	r8, r24
    339e:	99 06       	cpc	r9, r25
    33a0:	e1 f4       	brne	.+56     	; 0x33da <realloc+0x15c>
    33a2:	66 16       	cp	r6, r22
    33a4:	77 06       	cpc	r7, r23
    33a6:	c8 f4       	brcc	.+50     	; 0x33da <realloc+0x15c>
    33a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    33ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    33b0:	00 97       	sbiw	r24, 0x00	; 0
    33b2:	41 f4       	brne	.+16     	; 0x33c4 <realloc+0x146>
    33b4:	8d b7       	in	r24, 0x3d	; 61
    33b6:	9e b7       	in	r25, 0x3e	; 62
    33b8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    33bc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    33c0:	84 1b       	sub	r24, r20
    33c2:	95 0b       	sbc	r25, r21
    33c4:	e8 17       	cp	r30, r24
    33c6:	f9 07       	cpc	r31, r25
    33c8:	c8 f4       	brcc	.+50     	; 0x33fc <realloc+0x17e>
    33ca:	f0 93 34 04 	sts	0x0434, r31	; 0x800434 <__brkval+0x1>
    33ce:	e0 93 33 04 	sts	0x0433, r30	; 0x800433 <__brkval>
    33d2:	f9 01       	movw	r30, r18
    33d4:	71 83       	std	Z+1, r23	; 0x01
    33d6:	60 83       	st	Z, r22
    33d8:	0f c0       	rjmp	.+30     	; 0x33f8 <realloc+0x17a>
    33da:	cb 01       	movw	r24, r22
    33dc:	0e 94 1e 18 	call	0x303c	; 0x303c <malloc>
    33e0:	7c 01       	movw	r14, r24
    33e2:	00 97       	sbiw	r24, 0x00	; 0
    33e4:	59 f0       	breq	.+22     	; 0x33fc <realloc+0x17e>
    33e6:	a8 01       	movw	r20, r16
    33e8:	be 01       	movw	r22, r28
    33ea:	0e 94 05 1a 	call	0x340a	; 0x340a <memcpy>
    33ee:	ce 01       	movw	r24, r28
    33f0:	0e 94 b6 18 	call	0x316c	; 0x316c <free>
    33f4:	c7 01       	movw	r24, r14
    33f6:	04 c0       	rjmp	.+8      	; 0x3400 <realloc+0x182>
    33f8:	ce 01       	movw	r24, r28
    33fa:	02 c0       	rjmp	.+4      	; 0x3400 <realloc+0x182>
    33fc:	80 e0       	ldi	r24, 0x00	; 0
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	cd b7       	in	r28, 0x3d	; 61
    3402:	de b7       	in	r29, 0x3e	; 62
    3404:	ee e0       	ldi	r30, 0x0E	; 14
    3406:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <__epilogue_restores__+0x8>

0000340a <memcpy>:
    340a:	fb 01       	movw	r30, r22
    340c:	dc 01       	movw	r26, r24
    340e:	02 c0       	rjmp	.+4      	; 0x3414 <memcpy+0xa>
    3410:	01 90       	ld	r0, Z+
    3412:	0d 92       	st	X+, r0
    3414:	41 50       	subi	r20, 0x01	; 1
    3416:	50 40       	sbci	r21, 0x00	; 0
    3418:	d8 f7       	brcc	.-10     	; 0x3410 <memcpy+0x6>
    341a:	08 95       	ret

0000341c <strcpy>:
    341c:	fb 01       	movw	r30, r22
    341e:	dc 01       	movw	r26, r24
    3420:	01 90       	ld	r0, Z+
    3422:	0d 92       	st	X+, r0
    3424:	00 20       	and	r0, r0
    3426:	e1 f7       	brne	.-8      	; 0x3420 <strcpy+0x4>
    3428:	08 95       	ret

0000342a <__ultoa_ncheck>:
    342a:	bb 27       	eor	r27, r27

0000342c <__ultoa_common>:
    342c:	fa 01       	movw	r30, r20
    342e:	a6 2f       	mov	r26, r22
    3430:	62 17       	cp	r22, r18
    3432:	71 05       	cpc	r23, r1
    3434:	81 05       	cpc	r24, r1
    3436:	91 05       	cpc	r25, r1
    3438:	33 0b       	sbc	r19, r19
    343a:	30 fb       	bst	r19, 0
    343c:	66 f0       	brts	.+24     	; 0x3456 <__ultoa_common+0x2a>
    343e:	aa 27       	eor	r26, r26
    3440:	66 0f       	add	r22, r22
    3442:	77 1f       	adc	r23, r23
    3444:	88 1f       	adc	r24, r24
    3446:	99 1f       	adc	r25, r25
    3448:	aa 1f       	adc	r26, r26
    344a:	a2 17       	cp	r26, r18
    344c:	10 f0       	brcs	.+4      	; 0x3452 <__ultoa_common+0x26>
    344e:	a2 1b       	sub	r26, r18
    3450:	63 95       	inc	r22
    3452:	38 50       	subi	r19, 0x08	; 8
    3454:	a9 f7       	brne	.-22     	; 0x3440 <__ultoa_common+0x14>
    3456:	a0 5d       	subi	r26, 0xD0	; 208
    3458:	aa 33       	cpi	r26, 0x3A	; 58
    345a:	08 f0       	brcs	.+2      	; 0x345e <__ultoa_common+0x32>
    345c:	a9 5d       	subi	r26, 0xD9	; 217
    345e:	a1 93       	st	Z+, r26
    3460:	36 f7       	brtc	.-52     	; 0x342e <__ultoa_common+0x2>
    3462:	b1 11       	cpse	r27, r1
    3464:	b1 93       	st	Z+, r27
    3466:	10 82       	st	Z, r1
    3468:	ca 01       	movw	r24, r20
    346a:	0c 94 69 1c 	jmp	0x38d2	; 0x38d2 <strrev>

0000346e <dtoa_prf>:
    346e:	a9 e0       	ldi	r26, 0x09	; 9
    3470:	b0 e0       	ldi	r27, 0x00	; 0
    3472:	ed e3       	ldi	r30, 0x3D	; 61
    3474:	fa e1       	ldi	r31, 0x1A	; 26
    3476:	0c 94 7f 1c 	jmp	0x38fe	; 0x38fe <__prologue_saves__+0xc>
    347a:	6a 01       	movw	r12, r20
    347c:	12 2f       	mov	r17, r18
    347e:	b0 2e       	mov	r11, r16
    3480:	2b e3       	ldi	r18, 0x3B	; 59
    3482:	20 17       	cp	r18, r16
    3484:	20 f0       	brcs	.+8      	; 0x348e <dtoa_prf+0x20>
    3486:	ff 24       	eor	r15, r15
    3488:	f3 94       	inc	r15
    348a:	f0 0e       	add	r15, r16
    348c:	02 c0       	rjmp	.+4      	; 0x3492 <dtoa_prf+0x24>
    348e:	2c e3       	ldi	r18, 0x3C	; 60
    3490:	f2 2e       	mov	r15, r18
    3492:	0f 2d       	mov	r16, r15
    3494:	27 e0       	ldi	r18, 0x07	; 7
    3496:	ae 01       	movw	r20, r28
    3498:	4f 5f       	subi	r20, 0xFF	; 255
    349a:	5f 4f       	sbci	r21, 0xFF	; 255
    349c:	0e 94 91 1b 	call	0x3722	; 0x3722 <__ftoa_engine>
    34a0:	bc 01       	movw	r22, r24
    34a2:	49 81       	ldd	r20, Y+1	; 0x01
    34a4:	84 2f       	mov	r24, r20
    34a6:	89 70       	andi	r24, 0x09	; 9
    34a8:	81 30       	cpi	r24, 0x01	; 1
    34aa:	31 f0       	breq	.+12     	; 0x34b8 <dtoa_prf+0x4a>
    34ac:	e1 fc       	sbrc	r14, 1
    34ae:	06 c0       	rjmp	.+12     	; 0x34bc <dtoa_prf+0x4e>
    34b0:	e0 fe       	sbrs	r14, 0
    34b2:	06 c0       	rjmp	.+12     	; 0x34c0 <dtoa_prf+0x52>
    34b4:	90 e2       	ldi	r25, 0x20	; 32
    34b6:	05 c0       	rjmp	.+10     	; 0x34c2 <dtoa_prf+0x54>
    34b8:	9d e2       	ldi	r25, 0x2D	; 45
    34ba:	03 c0       	rjmp	.+6      	; 0x34c2 <dtoa_prf+0x54>
    34bc:	9b e2       	ldi	r25, 0x2B	; 43
    34be:	01 c0       	rjmp	.+2      	; 0x34c2 <dtoa_prf+0x54>
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	5e 2d       	mov	r21, r14
    34c4:	50 71       	andi	r21, 0x10	; 16
    34c6:	43 ff       	sbrs	r20, 3
    34c8:	3c c0       	rjmp	.+120    	; 0x3542 <dtoa_prf+0xd4>
    34ca:	91 11       	cpse	r25, r1
    34cc:	02 c0       	rjmp	.+4      	; 0x34d2 <dtoa_prf+0x64>
    34ce:	83 e0       	ldi	r24, 0x03	; 3
    34d0:	01 c0       	rjmp	.+2      	; 0x34d4 <dtoa_prf+0x66>
    34d2:	84 e0       	ldi	r24, 0x04	; 4
    34d4:	81 17       	cp	r24, r17
    34d6:	18 f4       	brcc	.+6      	; 0x34de <dtoa_prf+0x70>
    34d8:	21 2f       	mov	r18, r17
    34da:	28 1b       	sub	r18, r24
    34dc:	01 c0       	rjmp	.+2      	; 0x34e0 <dtoa_prf+0x72>
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	51 11       	cpse	r21, r1
    34e2:	0b c0       	rjmp	.+22     	; 0x34fa <dtoa_prf+0x8c>
    34e4:	f6 01       	movw	r30, r12
    34e6:	82 2f       	mov	r24, r18
    34e8:	30 e2       	ldi	r19, 0x20	; 32
    34ea:	88 23       	and	r24, r24
    34ec:	19 f0       	breq	.+6      	; 0x34f4 <dtoa_prf+0x86>
    34ee:	31 93       	st	Z+, r19
    34f0:	81 50       	subi	r24, 0x01	; 1
    34f2:	fb cf       	rjmp	.-10     	; 0x34ea <dtoa_prf+0x7c>
    34f4:	c2 0e       	add	r12, r18
    34f6:	d1 1c       	adc	r13, r1
    34f8:	20 e0       	ldi	r18, 0x00	; 0
    34fa:	99 23       	and	r25, r25
    34fc:	29 f0       	breq	.+10     	; 0x3508 <dtoa_prf+0x9a>
    34fe:	d6 01       	movw	r26, r12
    3500:	9c 93       	st	X, r25
    3502:	f6 01       	movw	r30, r12
    3504:	31 96       	adiw	r30, 0x01	; 1
    3506:	6f 01       	movw	r12, r30
    3508:	c6 01       	movw	r24, r12
    350a:	03 96       	adiw	r24, 0x03	; 3
    350c:	e2 fe       	sbrs	r14, 2
    350e:	0a c0       	rjmp	.+20     	; 0x3524 <dtoa_prf+0xb6>
    3510:	3e e4       	ldi	r19, 0x4E	; 78
    3512:	d6 01       	movw	r26, r12
    3514:	3c 93       	st	X, r19
    3516:	41 e4       	ldi	r20, 0x41	; 65
    3518:	11 96       	adiw	r26, 0x01	; 1
    351a:	4c 93       	st	X, r20
    351c:	11 97       	sbiw	r26, 0x01	; 1
    351e:	12 96       	adiw	r26, 0x02	; 2
    3520:	3c 93       	st	X, r19
    3522:	06 c0       	rjmp	.+12     	; 0x3530 <dtoa_prf+0xc2>
    3524:	3e e6       	ldi	r19, 0x6E	; 110
    3526:	f6 01       	movw	r30, r12
    3528:	30 83       	st	Z, r19
    352a:	41 e6       	ldi	r20, 0x61	; 97
    352c:	41 83       	std	Z+1, r20	; 0x01
    352e:	32 83       	std	Z+2, r19	; 0x02
    3530:	fc 01       	movw	r30, r24
    3532:	32 2f       	mov	r19, r18
    3534:	40 e2       	ldi	r20, 0x20	; 32
    3536:	33 23       	and	r19, r19
    3538:	09 f4       	brne	.+2      	; 0x353c <dtoa_prf+0xce>
    353a:	42 c0       	rjmp	.+132    	; 0x35c0 <dtoa_prf+0x152>
    353c:	41 93       	st	Z+, r20
    353e:	31 50       	subi	r19, 0x01	; 1
    3540:	fa cf       	rjmp	.-12     	; 0x3536 <dtoa_prf+0xc8>
    3542:	42 ff       	sbrs	r20, 2
    3544:	44 c0       	rjmp	.+136    	; 0x35ce <dtoa_prf+0x160>
    3546:	91 11       	cpse	r25, r1
    3548:	02 c0       	rjmp	.+4      	; 0x354e <dtoa_prf+0xe0>
    354a:	83 e0       	ldi	r24, 0x03	; 3
    354c:	01 c0       	rjmp	.+2      	; 0x3550 <dtoa_prf+0xe2>
    354e:	84 e0       	ldi	r24, 0x04	; 4
    3550:	81 17       	cp	r24, r17
    3552:	18 f4       	brcc	.+6      	; 0x355a <dtoa_prf+0xec>
    3554:	21 2f       	mov	r18, r17
    3556:	28 1b       	sub	r18, r24
    3558:	01 c0       	rjmp	.+2      	; 0x355c <dtoa_prf+0xee>
    355a:	20 e0       	ldi	r18, 0x00	; 0
    355c:	51 11       	cpse	r21, r1
    355e:	0b c0       	rjmp	.+22     	; 0x3576 <dtoa_prf+0x108>
    3560:	f6 01       	movw	r30, r12
    3562:	82 2f       	mov	r24, r18
    3564:	30 e2       	ldi	r19, 0x20	; 32
    3566:	88 23       	and	r24, r24
    3568:	19 f0       	breq	.+6      	; 0x3570 <dtoa_prf+0x102>
    356a:	31 93       	st	Z+, r19
    356c:	81 50       	subi	r24, 0x01	; 1
    356e:	fb cf       	rjmp	.-10     	; 0x3566 <dtoa_prf+0xf8>
    3570:	c2 0e       	add	r12, r18
    3572:	d1 1c       	adc	r13, r1
    3574:	20 e0       	ldi	r18, 0x00	; 0
    3576:	99 23       	and	r25, r25
    3578:	29 f0       	breq	.+10     	; 0x3584 <dtoa_prf+0x116>
    357a:	d6 01       	movw	r26, r12
    357c:	9c 93       	st	X, r25
    357e:	f6 01       	movw	r30, r12
    3580:	31 96       	adiw	r30, 0x01	; 1
    3582:	6f 01       	movw	r12, r30
    3584:	c6 01       	movw	r24, r12
    3586:	03 96       	adiw	r24, 0x03	; 3
    3588:	e2 fe       	sbrs	r14, 2
    358a:	0b c0       	rjmp	.+22     	; 0x35a2 <dtoa_prf+0x134>
    358c:	39 e4       	ldi	r19, 0x49	; 73
    358e:	d6 01       	movw	r26, r12
    3590:	3c 93       	st	X, r19
    3592:	3e e4       	ldi	r19, 0x4E	; 78
    3594:	11 96       	adiw	r26, 0x01	; 1
    3596:	3c 93       	st	X, r19
    3598:	11 97       	sbiw	r26, 0x01	; 1
    359a:	36 e4       	ldi	r19, 0x46	; 70
    359c:	12 96       	adiw	r26, 0x02	; 2
    359e:	3c 93       	st	X, r19
    35a0:	07 c0       	rjmp	.+14     	; 0x35b0 <dtoa_prf+0x142>
    35a2:	39 e6       	ldi	r19, 0x69	; 105
    35a4:	f6 01       	movw	r30, r12
    35a6:	30 83       	st	Z, r19
    35a8:	3e e6       	ldi	r19, 0x6E	; 110
    35aa:	31 83       	std	Z+1, r19	; 0x01
    35ac:	36 e6       	ldi	r19, 0x66	; 102
    35ae:	32 83       	std	Z+2, r19	; 0x02
    35b0:	fc 01       	movw	r30, r24
    35b2:	32 2f       	mov	r19, r18
    35b4:	40 e2       	ldi	r20, 0x20	; 32
    35b6:	33 23       	and	r19, r19
    35b8:	19 f0       	breq	.+6      	; 0x35c0 <dtoa_prf+0x152>
    35ba:	41 93       	st	Z+, r20
    35bc:	31 50       	subi	r19, 0x01	; 1
    35be:	fb cf       	rjmp	.-10     	; 0x35b6 <dtoa_prf+0x148>
    35c0:	fc 01       	movw	r30, r24
    35c2:	e2 0f       	add	r30, r18
    35c4:	f1 1d       	adc	r31, r1
    35c6:	10 82       	st	Z, r1
    35c8:	8e ef       	ldi	r24, 0xFE	; 254
    35ca:	9f ef       	ldi	r25, 0xFF	; 255
    35cc:	a6 c0       	rjmp	.+332    	; 0x371a <dtoa_prf+0x2ac>
    35ce:	21 e0       	ldi	r18, 0x01	; 1
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	91 11       	cpse	r25, r1
    35d4:	02 c0       	rjmp	.+4      	; 0x35da <dtoa_prf+0x16c>
    35d6:	20 e0       	ldi	r18, 0x00	; 0
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	16 16       	cp	r1, r22
    35dc:	17 06       	cpc	r1, r23
    35de:	1c f4       	brge	.+6      	; 0x35e6 <dtoa_prf+0x178>
    35e0:	fb 01       	movw	r30, r22
    35e2:	31 96       	adiw	r30, 0x01	; 1
    35e4:	02 c0       	rjmp	.+4      	; 0x35ea <dtoa_prf+0x17c>
    35e6:	e1 e0       	ldi	r30, 0x01	; 1
    35e8:	f0 e0       	ldi	r31, 0x00	; 0
    35ea:	2e 0f       	add	r18, r30
    35ec:	3f 1f       	adc	r19, r31
    35ee:	bb 20       	and	r11, r11
    35f0:	21 f0       	breq	.+8      	; 0x35fa <dtoa_prf+0x18c>
    35f2:	eb 2d       	mov	r30, r11
    35f4:	f0 e0       	ldi	r31, 0x00	; 0
    35f6:	31 96       	adiw	r30, 0x01	; 1
    35f8:	02 c0       	rjmp	.+4      	; 0x35fe <dtoa_prf+0x190>
    35fa:	e0 e0       	ldi	r30, 0x00	; 0
    35fc:	f0 e0       	ldi	r31, 0x00	; 0
    35fe:	2e 0f       	add	r18, r30
    3600:	3f 1f       	adc	r19, r31
    3602:	e1 2f       	mov	r30, r17
    3604:	f0 e0       	ldi	r31, 0x00	; 0
    3606:	2e 17       	cp	r18, r30
    3608:	3f 07       	cpc	r19, r31
    360a:	1c f4       	brge	.+6      	; 0x3612 <dtoa_prf+0x1a4>
    360c:	12 1b       	sub	r17, r18
    360e:	21 2f       	mov	r18, r17
    3610:	01 c0       	rjmp	.+2      	; 0x3614 <dtoa_prf+0x1a6>
    3612:	20 e0       	ldi	r18, 0x00	; 0
    3614:	8e 2d       	mov	r24, r14
    3616:	88 71       	andi	r24, 0x18	; 24
    3618:	59 f4       	brne	.+22     	; 0x3630 <dtoa_prf+0x1c2>
    361a:	f6 01       	movw	r30, r12
    361c:	82 2f       	mov	r24, r18
    361e:	30 e2       	ldi	r19, 0x20	; 32
    3620:	88 23       	and	r24, r24
    3622:	19 f0       	breq	.+6      	; 0x362a <dtoa_prf+0x1bc>
    3624:	31 93       	st	Z+, r19
    3626:	81 50       	subi	r24, 0x01	; 1
    3628:	fb cf       	rjmp	.-10     	; 0x3620 <dtoa_prf+0x1b2>
    362a:	c2 0e       	add	r12, r18
    362c:	d1 1c       	adc	r13, r1
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	99 23       	and	r25, r25
    3632:	29 f0       	breq	.+10     	; 0x363e <dtoa_prf+0x1d0>
    3634:	d6 01       	movw	r26, r12
    3636:	9c 93       	st	X, r25
    3638:	f6 01       	movw	r30, r12
    363a:	31 96       	adiw	r30, 0x01	; 1
    363c:	6f 01       	movw	r12, r30
    363e:	51 11       	cpse	r21, r1
    3640:	0b c0       	rjmp	.+22     	; 0x3658 <dtoa_prf+0x1ea>
    3642:	f6 01       	movw	r30, r12
    3644:	82 2f       	mov	r24, r18
    3646:	90 e3       	ldi	r25, 0x30	; 48
    3648:	88 23       	and	r24, r24
    364a:	19 f0       	breq	.+6      	; 0x3652 <dtoa_prf+0x1e4>
    364c:	91 93       	st	Z+, r25
    364e:	81 50       	subi	r24, 0x01	; 1
    3650:	fb cf       	rjmp	.-10     	; 0x3648 <dtoa_prf+0x1da>
    3652:	c2 0e       	add	r12, r18
    3654:	d1 1c       	adc	r13, r1
    3656:	20 e0       	ldi	r18, 0x00	; 0
    3658:	0f 2d       	mov	r16, r15
    365a:	06 0f       	add	r16, r22
    365c:	9a 81       	ldd	r25, Y+2	; 0x02
    365e:	34 2f       	mov	r19, r20
    3660:	30 71       	andi	r19, 0x10	; 16
    3662:	44 ff       	sbrs	r20, 4
    3664:	03 c0       	rjmp	.+6      	; 0x366c <dtoa_prf+0x1fe>
    3666:	91 33       	cpi	r25, 0x31	; 49
    3668:	09 f4       	brne	.+2      	; 0x366c <dtoa_prf+0x1fe>
    366a:	01 50       	subi	r16, 0x01	; 1
    366c:	10 16       	cp	r1, r16
    366e:	24 f4       	brge	.+8      	; 0x3678 <dtoa_prf+0x20a>
    3670:	09 30       	cpi	r16, 0x09	; 9
    3672:	18 f0       	brcs	.+6      	; 0x367a <dtoa_prf+0x20c>
    3674:	08 e0       	ldi	r16, 0x08	; 8
    3676:	01 c0       	rjmp	.+2      	; 0x367a <dtoa_prf+0x20c>
    3678:	01 e0       	ldi	r16, 0x01	; 1
    367a:	ab 01       	movw	r20, r22
    367c:	77 ff       	sbrs	r23, 7
    367e:	02 c0       	rjmp	.+4      	; 0x3684 <dtoa_prf+0x216>
    3680:	40 e0       	ldi	r20, 0x00	; 0
    3682:	50 e0       	ldi	r21, 0x00	; 0
    3684:	fb 01       	movw	r30, r22
    3686:	e4 1b       	sub	r30, r20
    3688:	f5 0b       	sbc	r31, r21
    368a:	a1 e0       	ldi	r26, 0x01	; 1
    368c:	b0 e0       	ldi	r27, 0x00	; 0
    368e:	ac 0f       	add	r26, r28
    3690:	bd 1f       	adc	r27, r29
    3692:	ea 0f       	add	r30, r26
    3694:	fb 1f       	adc	r31, r27
    3696:	8e e2       	ldi	r24, 0x2E	; 46
    3698:	a8 2e       	mov	r10, r24
    369a:	4b 01       	movw	r8, r22
    369c:	80 1a       	sub	r8, r16
    369e:	91 08       	sbc	r9, r1
    36a0:	0b 2d       	mov	r16, r11
    36a2:	10 e0       	ldi	r17, 0x00	; 0
    36a4:	11 95       	neg	r17
    36a6:	01 95       	neg	r16
    36a8:	11 09       	sbc	r17, r1
    36aa:	4f 3f       	cpi	r20, 0xFF	; 255
    36ac:	bf ef       	ldi	r27, 0xFF	; 255
    36ae:	5b 07       	cpc	r21, r27
    36b0:	21 f4       	brne	.+8      	; 0x36ba <dtoa_prf+0x24c>
    36b2:	d6 01       	movw	r26, r12
    36b4:	ac 92       	st	X, r10
    36b6:	11 96       	adiw	r26, 0x01	; 1
    36b8:	6d 01       	movw	r12, r26
    36ba:	64 17       	cp	r22, r20
    36bc:	75 07       	cpc	r23, r21
    36be:	2c f0       	brlt	.+10     	; 0x36ca <dtoa_prf+0x25c>
    36c0:	84 16       	cp	r8, r20
    36c2:	95 06       	cpc	r9, r21
    36c4:	14 f4       	brge	.+4      	; 0x36ca <dtoa_prf+0x25c>
    36c6:	81 81       	ldd	r24, Z+1	; 0x01
    36c8:	01 c0       	rjmp	.+2      	; 0x36cc <dtoa_prf+0x25e>
    36ca:	80 e3       	ldi	r24, 0x30	; 48
    36cc:	41 50       	subi	r20, 0x01	; 1
    36ce:	51 09       	sbc	r21, r1
    36d0:	31 96       	adiw	r30, 0x01	; 1
    36d2:	d6 01       	movw	r26, r12
    36d4:	11 96       	adiw	r26, 0x01	; 1
    36d6:	7d 01       	movw	r14, r26
    36d8:	40 17       	cp	r20, r16
    36da:	51 07       	cpc	r21, r17
    36dc:	24 f0       	brlt	.+8      	; 0x36e6 <dtoa_prf+0x278>
    36de:	d6 01       	movw	r26, r12
    36e0:	8c 93       	st	X, r24
    36e2:	67 01       	movw	r12, r14
    36e4:	e2 cf       	rjmp	.-60     	; 0x36aa <dtoa_prf+0x23c>
    36e6:	64 17       	cp	r22, r20
    36e8:	75 07       	cpc	r23, r21
    36ea:	39 f4       	brne	.+14     	; 0x36fa <dtoa_prf+0x28c>
    36ec:	96 33       	cpi	r25, 0x36	; 54
    36ee:	20 f4       	brcc	.+8      	; 0x36f8 <dtoa_prf+0x28a>
    36f0:	95 33       	cpi	r25, 0x35	; 53
    36f2:	19 f4       	brne	.+6      	; 0x36fa <dtoa_prf+0x28c>
    36f4:	31 11       	cpse	r19, r1
    36f6:	01 c0       	rjmp	.+2      	; 0x36fa <dtoa_prf+0x28c>
    36f8:	81 e3       	ldi	r24, 0x31	; 49
    36fa:	f6 01       	movw	r30, r12
    36fc:	80 83       	st	Z, r24
    36fe:	f7 01       	movw	r30, r14
    3700:	82 2f       	mov	r24, r18
    3702:	90 e2       	ldi	r25, 0x20	; 32
    3704:	88 23       	and	r24, r24
    3706:	19 f0       	breq	.+6      	; 0x370e <dtoa_prf+0x2a0>
    3708:	91 93       	st	Z+, r25
    370a:	81 50       	subi	r24, 0x01	; 1
    370c:	fb cf       	rjmp	.-10     	; 0x3704 <dtoa_prf+0x296>
    370e:	f7 01       	movw	r30, r14
    3710:	e2 0f       	add	r30, r18
    3712:	f1 1d       	adc	r31, r1
    3714:	10 82       	st	Z, r1
    3716:	80 e0       	ldi	r24, 0x00	; 0
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	29 96       	adiw	r28, 0x09	; 9
    371c:	ec e0       	ldi	r30, 0x0C	; 12
    371e:	0c 94 9b 1c 	jmp	0x3936	; 0x3936 <__epilogue_restores__+0xc>

00003722 <__ftoa_engine>:
    3722:	28 30       	cpi	r18, 0x08	; 8
    3724:	08 f0       	brcs	.+2      	; 0x3728 <__ftoa_engine+0x6>
    3726:	27 e0       	ldi	r18, 0x07	; 7
    3728:	33 27       	eor	r19, r19
    372a:	da 01       	movw	r26, r20
    372c:	99 0f       	add	r25, r25
    372e:	31 1d       	adc	r19, r1
    3730:	87 fd       	sbrc	r24, 7
    3732:	91 60       	ori	r25, 0x01	; 1
    3734:	00 96       	adiw	r24, 0x00	; 0
    3736:	61 05       	cpc	r22, r1
    3738:	71 05       	cpc	r23, r1
    373a:	39 f4       	brne	.+14     	; 0x374a <__ftoa_engine+0x28>
    373c:	32 60       	ori	r19, 0x02	; 2
    373e:	2e 5f       	subi	r18, 0xFE	; 254
    3740:	3d 93       	st	X+, r19
    3742:	30 e3       	ldi	r19, 0x30	; 48
    3744:	2a 95       	dec	r18
    3746:	e1 f7       	brne	.-8      	; 0x3740 <__ftoa_engine+0x1e>
    3748:	08 95       	ret
    374a:	9f 3f       	cpi	r25, 0xFF	; 255
    374c:	30 f0       	brcs	.+12     	; 0x375a <__ftoa_engine+0x38>
    374e:	80 38       	cpi	r24, 0x80	; 128
    3750:	71 05       	cpc	r23, r1
    3752:	61 05       	cpc	r22, r1
    3754:	09 f0       	breq	.+2      	; 0x3758 <__ftoa_engine+0x36>
    3756:	3c 5f       	subi	r19, 0xFC	; 252
    3758:	3c 5f       	subi	r19, 0xFC	; 252
    375a:	3d 93       	st	X+, r19
    375c:	91 30       	cpi	r25, 0x01	; 1
    375e:	08 f0       	brcs	.+2      	; 0x3762 <__ftoa_engine+0x40>
    3760:	80 68       	ori	r24, 0x80	; 128
    3762:	91 1d       	adc	r25, r1
    3764:	df 93       	push	r29
    3766:	cf 93       	push	r28
    3768:	1f 93       	push	r17
    376a:	0f 93       	push	r16
    376c:	ff 92       	push	r15
    376e:	ef 92       	push	r14
    3770:	19 2f       	mov	r17, r25
    3772:	98 7f       	andi	r25, 0xF8	; 248
    3774:	96 95       	lsr	r25
    3776:	e9 2f       	mov	r30, r25
    3778:	96 95       	lsr	r25
    377a:	96 95       	lsr	r25
    377c:	e9 0f       	add	r30, r25
    377e:	ff 27       	eor	r31, r31
    3780:	ee 53       	subi	r30, 0x3E	; 62
    3782:	ff 4f       	sbci	r31, 0xFF	; 255
    3784:	99 27       	eor	r25, r25
    3786:	33 27       	eor	r19, r19
    3788:	ee 24       	eor	r14, r14
    378a:	ff 24       	eor	r15, r15
    378c:	a7 01       	movw	r20, r14
    378e:	e7 01       	movw	r28, r14
    3790:	05 90       	lpm	r0, Z+
    3792:	08 94       	sec
    3794:	07 94       	ror	r0
    3796:	28 f4       	brcc	.+10     	; 0x37a2 <__ftoa_engine+0x80>
    3798:	36 0f       	add	r19, r22
    379a:	e7 1e       	adc	r14, r23
    379c:	f8 1e       	adc	r15, r24
    379e:	49 1f       	adc	r20, r25
    37a0:	51 1d       	adc	r21, r1
    37a2:	66 0f       	add	r22, r22
    37a4:	77 1f       	adc	r23, r23
    37a6:	88 1f       	adc	r24, r24
    37a8:	99 1f       	adc	r25, r25
    37aa:	06 94       	lsr	r0
    37ac:	a1 f7       	brne	.-24     	; 0x3796 <__ftoa_engine+0x74>
    37ae:	05 90       	lpm	r0, Z+
    37b0:	07 94       	ror	r0
    37b2:	28 f4       	brcc	.+10     	; 0x37be <__ftoa_engine+0x9c>
    37b4:	e7 0e       	add	r14, r23
    37b6:	f8 1e       	adc	r15, r24
    37b8:	49 1f       	adc	r20, r25
    37ba:	56 1f       	adc	r21, r22
    37bc:	c1 1d       	adc	r28, r1
    37be:	77 0f       	add	r23, r23
    37c0:	88 1f       	adc	r24, r24
    37c2:	99 1f       	adc	r25, r25
    37c4:	66 1f       	adc	r22, r22
    37c6:	06 94       	lsr	r0
    37c8:	a1 f7       	brne	.-24     	; 0x37b2 <__ftoa_engine+0x90>
    37ca:	05 90       	lpm	r0, Z+
    37cc:	07 94       	ror	r0
    37ce:	28 f4       	brcc	.+10     	; 0x37da <__ftoa_engine+0xb8>
    37d0:	f8 0e       	add	r15, r24
    37d2:	49 1f       	adc	r20, r25
    37d4:	56 1f       	adc	r21, r22
    37d6:	c7 1f       	adc	r28, r23
    37d8:	d1 1d       	adc	r29, r1
    37da:	88 0f       	add	r24, r24
    37dc:	99 1f       	adc	r25, r25
    37de:	66 1f       	adc	r22, r22
    37e0:	77 1f       	adc	r23, r23
    37e2:	06 94       	lsr	r0
    37e4:	a1 f7       	brne	.-24     	; 0x37ce <__ftoa_engine+0xac>
    37e6:	05 90       	lpm	r0, Z+
    37e8:	07 94       	ror	r0
    37ea:	20 f4       	brcc	.+8      	; 0x37f4 <__ftoa_engine+0xd2>
    37ec:	49 0f       	add	r20, r25
    37ee:	56 1f       	adc	r21, r22
    37f0:	c7 1f       	adc	r28, r23
    37f2:	d8 1f       	adc	r29, r24
    37f4:	99 0f       	add	r25, r25
    37f6:	66 1f       	adc	r22, r22
    37f8:	77 1f       	adc	r23, r23
    37fa:	88 1f       	adc	r24, r24
    37fc:	06 94       	lsr	r0
    37fe:	a9 f7       	brne	.-22     	; 0x37ea <__ftoa_engine+0xc8>
    3800:	84 91       	lpm	r24, Z
    3802:	10 95       	com	r17
    3804:	17 70       	andi	r17, 0x07	; 7
    3806:	41 f0       	breq	.+16     	; 0x3818 <__ftoa_engine+0xf6>
    3808:	d6 95       	lsr	r29
    380a:	c7 95       	ror	r28
    380c:	57 95       	ror	r21
    380e:	47 95       	ror	r20
    3810:	f7 94       	ror	r15
    3812:	e7 94       	ror	r14
    3814:	1a 95       	dec	r17
    3816:	c1 f7       	brne	.-16     	; 0x3808 <__ftoa_engine+0xe6>
    3818:	e8 e6       	ldi	r30, 0x68	; 104
    381a:	f0 e0       	ldi	r31, 0x00	; 0
    381c:	68 94       	set
    381e:	15 90       	lpm	r1, Z+
    3820:	15 91       	lpm	r17, Z+
    3822:	35 91       	lpm	r19, Z+
    3824:	65 91       	lpm	r22, Z+
    3826:	95 91       	lpm	r25, Z+
    3828:	05 90       	lpm	r0, Z+
    382a:	7f e2       	ldi	r23, 0x2F	; 47
    382c:	73 95       	inc	r23
    382e:	e1 18       	sub	r14, r1
    3830:	f1 0a       	sbc	r15, r17
    3832:	43 0b       	sbc	r20, r19
    3834:	56 0b       	sbc	r21, r22
    3836:	c9 0b       	sbc	r28, r25
    3838:	d0 09       	sbc	r29, r0
    383a:	c0 f7       	brcc	.-16     	; 0x382c <__ftoa_engine+0x10a>
    383c:	e1 0c       	add	r14, r1
    383e:	f1 1e       	adc	r15, r17
    3840:	43 1f       	adc	r20, r19
    3842:	56 1f       	adc	r21, r22
    3844:	c9 1f       	adc	r28, r25
    3846:	d0 1d       	adc	r29, r0
    3848:	7e f4       	brtc	.+30     	; 0x3868 <__ftoa_engine+0x146>
    384a:	70 33       	cpi	r23, 0x30	; 48
    384c:	11 f4       	brne	.+4      	; 0x3852 <__ftoa_engine+0x130>
    384e:	8a 95       	dec	r24
    3850:	e6 cf       	rjmp	.-52     	; 0x381e <__ftoa_engine+0xfc>
    3852:	e8 94       	clt
    3854:	01 50       	subi	r16, 0x01	; 1
    3856:	30 f0       	brcs	.+12     	; 0x3864 <__ftoa_engine+0x142>
    3858:	08 0f       	add	r16, r24
    385a:	0a f4       	brpl	.+2      	; 0x385e <__ftoa_engine+0x13c>
    385c:	00 27       	eor	r16, r16
    385e:	02 17       	cp	r16, r18
    3860:	08 f4       	brcc	.+2      	; 0x3864 <__ftoa_engine+0x142>
    3862:	20 2f       	mov	r18, r16
    3864:	23 95       	inc	r18
    3866:	02 2f       	mov	r16, r18
    3868:	7a 33       	cpi	r23, 0x3A	; 58
    386a:	28 f0       	brcs	.+10     	; 0x3876 <__ftoa_engine+0x154>
    386c:	79 e3       	ldi	r23, 0x39	; 57
    386e:	7d 93       	st	X+, r23
    3870:	2a 95       	dec	r18
    3872:	e9 f7       	brne	.-6      	; 0x386e <__ftoa_engine+0x14c>
    3874:	10 c0       	rjmp	.+32     	; 0x3896 <__ftoa_engine+0x174>
    3876:	7d 93       	st	X+, r23
    3878:	2a 95       	dec	r18
    387a:	89 f6       	brne	.-94     	; 0x381e <__ftoa_engine+0xfc>
    387c:	06 94       	lsr	r0
    387e:	97 95       	ror	r25
    3880:	67 95       	ror	r22
    3882:	37 95       	ror	r19
    3884:	17 95       	ror	r17
    3886:	17 94       	ror	r1
    3888:	e1 18       	sub	r14, r1
    388a:	f1 0a       	sbc	r15, r17
    388c:	43 0b       	sbc	r20, r19
    388e:	56 0b       	sbc	r21, r22
    3890:	c9 0b       	sbc	r28, r25
    3892:	d0 09       	sbc	r29, r0
    3894:	98 f0       	brcs	.+38     	; 0x38bc <__ftoa_engine+0x19a>
    3896:	23 95       	inc	r18
    3898:	7e 91       	ld	r23, -X
    389a:	73 95       	inc	r23
    389c:	7a 33       	cpi	r23, 0x3A	; 58
    389e:	08 f0       	brcs	.+2      	; 0x38a2 <__ftoa_engine+0x180>
    38a0:	70 e3       	ldi	r23, 0x30	; 48
    38a2:	7c 93       	st	X, r23
    38a4:	20 13       	cpse	r18, r16
    38a6:	b8 f7       	brcc	.-18     	; 0x3896 <__ftoa_engine+0x174>
    38a8:	7e 91       	ld	r23, -X
    38aa:	70 61       	ori	r23, 0x10	; 16
    38ac:	7d 93       	st	X+, r23
    38ae:	30 f0       	brcs	.+12     	; 0x38bc <__ftoa_engine+0x19a>
    38b0:	83 95       	inc	r24
    38b2:	71 e3       	ldi	r23, 0x31	; 49
    38b4:	7d 93       	st	X+, r23
    38b6:	70 e3       	ldi	r23, 0x30	; 48
    38b8:	2a 95       	dec	r18
    38ba:	e1 f7       	brne	.-8      	; 0x38b4 <__ftoa_engine+0x192>
    38bc:	11 24       	eor	r1, r1
    38be:	ef 90       	pop	r14
    38c0:	ff 90       	pop	r15
    38c2:	0f 91       	pop	r16
    38c4:	1f 91       	pop	r17
    38c6:	cf 91       	pop	r28
    38c8:	df 91       	pop	r29
    38ca:	99 27       	eor	r25, r25
    38cc:	87 fd       	sbrc	r24, 7
    38ce:	90 95       	com	r25
    38d0:	08 95       	ret

000038d2 <strrev>:
    38d2:	dc 01       	movw	r26, r24
    38d4:	fc 01       	movw	r30, r24
    38d6:	67 2f       	mov	r22, r23
    38d8:	71 91       	ld	r23, Z+
    38da:	77 23       	and	r23, r23
    38dc:	e1 f7       	brne	.-8      	; 0x38d6 <strrev+0x4>
    38de:	32 97       	sbiw	r30, 0x02	; 2
    38e0:	04 c0       	rjmp	.+8      	; 0x38ea <strrev+0x18>
    38e2:	7c 91       	ld	r23, X
    38e4:	6d 93       	st	X+, r22
    38e6:	70 83       	st	Z, r23
    38e8:	62 91       	ld	r22, -Z
    38ea:	ae 17       	cp	r26, r30
    38ec:	bf 07       	cpc	r27, r31
    38ee:	c8 f3       	brcs	.-14     	; 0x38e2 <strrev+0x10>
    38f0:	08 95       	ret

000038f2 <__prologue_saves__>:
    38f2:	2f 92       	push	r2
    38f4:	3f 92       	push	r3
    38f6:	4f 92       	push	r4
    38f8:	5f 92       	push	r5
    38fa:	6f 92       	push	r6
    38fc:	7f 92       	push	r7
    38fe:	8f 92       	push	r8
    3900:	9f 92       	push	r9
    3902:	af 92       	push	r10
    3904:	bf 92       	push	r11
    3906:	cf 92       	push	r12
    3908:	df 92       	push	r13
    390a:	ef 92       	push	r14
    390c:	ff 92       	push	r15
    390e:	0f 93       	push	r16
    3910:	1f 93       	push	r17
    3912:	cf 93       	push	r28
    3914:	df 93       	push	r29
    3916:	cd b7       	in	r28, 0x3d	; 61
    3918:	de b7       	in	r29, 0x3e	; 62
    391a:	ca 1b       	sub	r28, r26
    391c:	db 0b       	sbc	r29, r27
    391e:	0f b6       	in	r0, 0x3f	; 63
    3920:	f8 94       	cli
    3922:	de bf       	out	0x3e, r29	; 62
    3924:	0f be       	out	0x3f, r0	; 63
    3926:	cd bf       	out	0x3d, r28	; 61
    3928:	09 94       	ijmp

0000392a <__epilogue_restores__>:
    392a:	2a 88       	ldd	r2, Y+18	; 0x12
    392c:	39 88       	ldd	r3, Y+17	; 0x11
    392e:	48 88       	ldd	r4, Y+16	; 0x10
    3930:	5f 84       	ldd	r5, Y+15	; 0x0f
    3932:	6e 84       	ldd	r6, Y+14	; 0x0e
    3934:	7d 84       	ldd	r7, Y+13	; 0x0d
    3936:	8c 84       	ldd	r8, Y+12	; 0x0c
    3938:	9b 84       	ldd	r9, Y+11	; 0x0b
    393a:	aa 84       	ldd	r10, Y+10	; 0x0a
    393c:	b9 84       	ldd	r11, Y+9	; 0x09
    393e:	c8 84       	ldd	r12, Y+8	; 0x08
    3940:	df 80       	ldd	r13, Y+7	; 0x07
    3942:	ee 80       	ldd	r14, Y+6	; 0x06
    3944:	fd 80       	ldd	r15, Y+5	; 0x05
    3946:	0c 81       	ldd	r16, Y+4	; 0x04
    3948:	1b 81       	ldd	r17, Y+3	; 0x03
    394a:	aa 81       	ldd	r26, Y+2	; 0x02
    394c:	b9 81       	ldd	r27, Y+1	; 0x01
    394e:	ce 0f       	add	r28, r30
    3950:	d1 1d       	adc	r29, r1
    3952:	0f b6       	in	r0, 0x3f	; 63
    3954:	f8 94       	cli
    3956:	de bf       	out	0x3e, r29	; 62
    3958:	0f be       	out	0x3f, r0	; 63
    395a:	cd bf       	out	0x3d, r28	; 61
    395c:	ed 01       	movw	r28, r26
    395e:	08 95       	ret

00003960 <__do_global_dtors>:
    3960:	13 e0       	ldi	r17, 0x03	; 3
    3962:	c9 e0       	ldi	r28, 0x09	; 9
    3964:	d3 e0       	ldi	r29, 0x03	; 3
    3966:	04 c0       	rjmp	.+8      	; 0x3970 <__do_global_dtors+0x10>
    3968:	fe 01       	movw	r30, r28
    396a:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__tablejump2__>
    396e:	21 96       	adiw	r28, 0x01	; 1
    3970:	ca 30       	cpi	r28, 0x0A	; 10
    3972:	d1 07       	cpc	r29, r17
    3974:	c9 f7       	brne	.-14     	; 0x3968 <__do_global_dtors+0x8>
    3976:	f8 94       	cli

00003978 <__stop_program>:
    3978:	ff cf       	rjmp	.-2      	; 0x3978 <__stop_program>
