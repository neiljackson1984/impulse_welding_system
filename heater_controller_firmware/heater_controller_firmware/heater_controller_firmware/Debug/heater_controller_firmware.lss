
heater_controller_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  00003498  0000352c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003498  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002bb  00800194  00800194  000035c0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000035c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000361c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000970  00000000  00000000  0000365c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001abcc  00000000  00000000  00003fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000370a  00000000  00000000  0001eb98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004fc8  00000000  00000000  000222a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001eb8  00000000  00000000  0002726c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000801f  00000000  00000000  00029124  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d5f7  00000000  00000000  00031143  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a30  00000000  00000000  0003e73a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 01 03 	jmp	0x602	; 0x602 <__ctors_end>
       4:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
       8:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
       c:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      10:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      14:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      18:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      1c:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      20:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      24:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      28:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      2c:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      30:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      34:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      38:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      3c:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      40:	0c 94 81 0b 	jmp	0x1702	; 0x1702 <__vector_16>
      44:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      48:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__vector_18>
      4c:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__vector_19>
      50:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      54:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      58:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      5c:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      60:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      64:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      68:	0e 04       	cpc	r0, r14
      6a:	1b 04       	cpc	r1, r11
      6c:	3b 04       	cpc	r3, r11
      6e:	28 04       	cpc	r2, r8
      70:	31 04       	cpc	r3, r1
      72:	3b 04       	cpc	r3, r11
      74:	48 04       	cpc	r4, r8

00000076 <__trampolines_end>:
      76:	00 40       	sbci	r16, 0x00	; 0
      78:	7a 10       	cpse	r7, r10
      7a:	f3 5a       	subi	r31, 0xA3	; 163
      7c:	00 a0       	ldd	r0, Z+32	; 0x20
      7e:	72 4e       	sbci	r23, 0xE2	; 226
      80:	18 09       	sbc	r17, r8
      82:	00 10       	cpse	r0, r0
      84:	a5 d4       	rcall	.+2378   	; 0x9d0 <_Z21getSmoothedADCReadingi+0x4e>
      86:	e8 00       	.word	0x00e8	; ????
      88:	00 e8       	ldi	r16, 0x80	; 128
      8a:	76 48       	sbci	r23, 0x86	; 134
      8c:	17 00       	.word	0x0017	; ????
      8e:	00 e4       	ldi	r16, 0x40	; 64
      90:	0b 54       	subi	r16, 0x4B	; 75
      92:	02 00       	.word	0x0002	; ????
      94:	00 ca       	rjmp	.-3072   	; 0xfffff496 <__eeprom_end+0xff7ef496>
      96:	9a 3b       	cpi	r25, 0xBA	; 186
      98:	00 00       	nop
      9a:	00 e1       	ldi	r16, 0x10	; 16
      9c:	f5 05       	cpc	r31, r5
      9e:	00 00       	nop
      a0:	80 96       	adiw	r24, 0x20	; 32
      a2:	98 00       	.word	0x0098	; ????
      a4:	00 00       	nop
      a6:	40 42       	sbci	r20, 0x20	; 32
      a8:	0f 00       	.word	0x000f	; ????
      aa:	00 00       	nop
      ac:	a0 86       	std	Z+8, r10	; 0x08
      ae:	01 00       	.word	0x0001	; ????
      b0:	00 00       	nop
      b2:	10 27       	eor	r17, r16
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	e8 03       	fmulsu	r22, r16
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	64 00       	.word	0x0064	; ????
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	0a 00       	.word	0x000a	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	01 00       	.word	0x0001	; ????
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	2c 76       	andi	r18, 0x6C	; 108
      d2:	d8 88       	ldd	r13, Y+16	; 0x10
      d4:	dc 67       	ori	r29, 0x7C	; 124
      d6:	4f 08       	sbc	r4, r15
      d8:	23 df       	rcall	.-442    	; 0xffffff20 <__eeprom_end+0xff7eff20>
      da:	c1 df       	rcall	.-126    	; 0x5e <__SREG__+0x1f>
      dc:	ae 59       	subi	r26, 0x9E	; 158
      de:	e1 b1       	in	r30, 0x01	; 1
      e0:	b7 96       	adiw	r30, 0x27	; 39
      e2:	e5 e3       	ldi	r30, 0x35	; 53
      e4:	e4 53       	subi	r30, 0x34	; 52
      e6:	c6 3a       	cpi	r28, 0xA6	; 166
      e8:	e6 51       	subi	r30, 0x16	; 22
      ea:	99 76       	andi	r25, 0x69	; 105
      ec:	96 e8       	ldi	r25, 0x86	; 134
      ee:	e6 c2       	rjmp	.+1484   	; 0x6bc <_ZN10debugger_t8drawFormEv+0x44>
      f0:	84 26       	eor	r8, r20
      f2:	eb 89       	ldd	r30, Y+19	; 0x13
      f4:	8c 9b       	sbis	0x11, 4	; 17
      f6:	62 ed       	ldi	r22, 0xD2	; 210
      f8:	40 7c       	andi	r20, 0xC0	; 192
      fa:	6f fc       	.word	0xfc6f	; ????
      fc:	ef bc       	out	0x2f, r14	; 47
      fe:	9c 9f       	mul	r25, r28
     100:	40 f2       	brcs	.-112    	; 0x92 <__trampolines_end+0x1c>
     102:	ba a5       	ldd	r27, Y+42	; 0x2a
     104:	6f a5       	ldd	r22, Y+47	; 0x2f
     106:	f4 90       	lpm	r15, Z
     108:	05 5a       	subi	r16, 0xA5	; 165
     10a:	2a f7       	brpl	.-54     	; 0xd6 <__trampolines_end+0x60>
     10c:	5c 93       	st	X, r21
     10e:	6b 6c       	ori	r22, 0xCB	; 203
     110:	f9 67       	ori	r31, 0x79	; 121
     112:	6d c1       	rjmp	.+730    	; 0x3ee <u8g_font_babyr+0x200>
     114:	1b fc       	.word	0xfc1b	; ????
     116:	e0 e4       	ldi	r30, 0x40	; 64
     118:	0d 47       	sbci	r16, 0x7D	; 125
     11a:	fe f5       	brtc	.+126    	; 0x19a <port_to_output_PGM+0x2>
     11c:	20 e6       	ldi	r18, 0x60	; 96
     11e:	b5 00       	.word	0x00b5	; ????
     120:	d0 ed       	ldi	r29, 0xD0	; 208
     122:	90 2e       	mov	r9, r16
     124:	03 00       	.word	0x0003	; ????
     126:	94 35       	cpi	r25, 0x54	; 84
     128:	77 05       	cpc	r23, r7
     12a:	00 80       	ld	r0, Z
     12c:	84 1e       	adc	r8, r20
     12e:	08 00       	.word	0x0008	; ????
     130:	00 20       	and	r0, r0
     132:	4e 0a       	sbc	r4, r30
     134:	00 00       	nop
     136:	00 c8       	rjmp	.-4096   	; 0xfffff138 <__eeprom_end+0xff7ef138>
     138:	0c 33       	cpi	r16, 0x3C	; 60
     13a:	33 33       	cpi	r19, 0x33	; 51
     13c:	33 0f       	add	r19, r19
     13e:	98 6e       	ori	r25, 0xE8	; 232
     140:	12 83       	std	Z+2, r17	; 0x02
     142:	11 41       	sbci	r17, 0x11	; 17
     144:	ef 8d       	ldd	r30, Y+31	; 0x1f
     146:	21 14       	cp	r2, r1
     148:	89 3b       	cpi	r24, 0xB9	; 185
     14a:	e6 55       	subi	r30, 0x56	; 86
     14c:	16 cf       	rjmp	.-468    	; 0xffffff7a <__eeprom_end+0xff7eff7a>
     14e:	fe e6       	ldi	r31, 0x6E	; 110
     150:	db 18       	sub	r13, r11
     152:	d1 84       	ldd	r13, Z+9	; 0x09
     154:	4b 38       	cpi	r20, 0x8B	; 139
     156:	1b f7       	brvc	.-58     	; 0x11e <__trampolines_end+0xa8>
     158:	7c 1d       	adc	r23, r12
     15a:	90 1d       	adc	r25, r0
     15c:	a4 bb       	out	0x14, r26	; 20
     15e:	e4 24       	eor	r14, r4
     160:	20 32       	cpi	r18, 0x20	; 32
     162:	84 72       	andi	r24, 0x24	; 36
     164:	5e 22       	and	r5, r30
     166:	81 00       	.word	0x0081	; ????
     168:	c9 f1       	breq	.+114    	; 0x1dc <u8g_dev_ssd1306_128x64_adafruit2_init_seq+0x14>
     16a:	24 ec       	ldi	r18, 0xC4	; 196
     16c:	a1 e5       	ldi	r26, 0x51	; 81
     16e:	3d 27       	eor	r19, r29

00000170 <digital_pin_to_bit_mask_PGM>:
     170:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     180:	04 08 10 20                                         ... 

00000184 <digital_pin_to_port_PGM>:
     184:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     194:	03 03 03 03                                         ....

00000198 <port_to_output_PGM>:
     198:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000001a2 <port_to_mode_PGM>:
     1a2:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000001ac <u8g_dev_ssd13xx_sleep_off>:
     1ac:	ff e0 ff d1 af ff 32 ff d0 ff fe                    ......2....

000001b7 <u8g_dev_ssd13xx_sleep_on>:
     1b7:	ff e0 ff d1 ae ff d0 ff fe                          .........

000001c0 <u8g_dev_ssd1306_128x64_data_start>:
     1c0:	ff e0 ff d1 10 00 ff fe                             ........

000001c8 <u8g_dev_ssd1306_128x64_adafruit2_init_seq>:
     1c8:	ff d0 ff e0 ff c1 ff d1 ae d5 80 a8 3f d3 00 40     ............?..@
     1d8:	8d 14 20 00 a1 c8 da 12 81 cf d9 f1 db 40 2e a4     .. ..........@..
     1e8:	a6 af ff d0 ff fe                                   ......

000001ee <u8g_font_babyr>:
     1ee:	00 0a 0a ff fe 05 01 6c 02 c8 20 7f fe 07 fe 06     .......l.. .....
     1fe:	fe 00 00 00 02 00 00 01 06 06 03 01 00 80 80 80     ................
     20e:	80 00 80 03 03 03 04 00 04 a0 a0 a0 05 05 05 06     ................
     21e:	00 00 50 f8 50 f8 50 03 07 07 04 00 ff 40 60 80     ..P.P.P......@`.
     22e:	40 20 c0 40 05 05 05 06 00 00 c8 d0 20 58 98 05     @ .@........ X..
     23e:	06 06 06 00 00 40 a0 40 a0 90 68 01 03 03 02 00     .....@.@..h.....
     24e:	04 80 80 80 02 07 07 03 00 ff 40 80 80 80 80 80     ..........@.....
     25e:	40 02 07 07 03 00 ff 80 40 40 40 40 40 80 03 03     @.......@@@@@...
     26e:	03 04 00 03 a0 40 a0 03 03 03 05 01 01 40 e0 40     .....@.......@.@
     27e:	02 03 03 03 00 fe c0 40 80 03 01 01 04 00 02 e0     .......@........
     28e:	01 01 01 02 00 00 80 03 06 06 04 00 ff 20 20 40     .............  @
     29e:	40 80 80 03 05 05 04 00 00 40 a0 a0 a0 40 02 05     @........@...@..
     2ae:	05 03 00 00 40 c0 40 40 40 04 05 05 05 00 00 60     ....@.@@@......`
     2be:	90 20 40 f0 04 05 05 05 00 00 e0 10 60 10 e0 04     . @.........`...
     2ce:	05 05 05 00 00 90 90 90 70 10 04 05 05 05 00 00     ........p.......
     2de:	f0 80 e0 10 e0 04 05 05 05 00 00 60 80 e0 90 60     ...........`...`
     2ee:	04 05 05 05 00 00 f0 10 20 40 80 04 05 05 05 00     ........ @......
     2fe:	00 60 90 60 90 60 04 05 05 05 00 00 60 90 70 10     .`.`.`......`.p.
     30e:	60 01 03 03 03 01 00 80 00 80 02 05 05 03 00 fe     `...............
     31e:	40 00 40 40 80 04 05 05 05 00 00 10 60 80 60 10     @.@@........`.`.
     32e:	03 03 03 04 00 01 e0 00 e0 04 05 05 05 00 00 80     ................
     33e:	60 10 60 80 04 06 06 05 00 00 60 90 20 40 00 40     `.`.......`. @.@
     34e:	05 06 06 06 00 00 70 88 a8 b0 80 70 04 05 05 05     ......p....p....
     35e:	00 00 60 90 90 f0 90 04 05 05 05 00 00 e0 90 e0     ..`.............
     36e:	90 e0 04 05 05 05 00 00 60 90 80 90 60 04 05 05     ........`...`...
     37e:	05 00 00 e0 90 90 90 e0 04 05 05 05 00 00 f0 80     ................
     38e:	e0 80 f0 04 05 05 05 00 00 f0 80 e0 80 80 04 05     ................
     39e:	05 05 00 00 60 80 b0 90 60 04 05 05 05 00 00 90     ....`...`.......
     3ae:	90 f0 90 90 03 05 05 04 00 00 e0 40 40 40 e0 04     ...........@@@..
     3be:	05 05 05 00 00 70 10 10 90 60 04 05 05 05 00 00     .....p...`......
     3ce:	90 90 90 e0 90 03 05 05 04 00 00 80 80 80 80 e0     ................
     3de:	05 05 05 06 00 00 d8 a8 a8 a8 88 04 05 05 05 00     ................
     3ee:	00 90 90 d0 b0 90 04 05 05 05 00 00 60 90 90 90     ............`...
     3fe:	60 04 05 05 05 00 00 e0 90 90 e0 80 04 05 05 05     `...............
     40e:	00 00 60 90 90 50 e0 04 05 05 05 00 00 e0 90 90     ..`..P..........
     41e:	e0 90 03 05 05 04 00 00 60 80 40 20 c0 03 05 05     ........`.@ ....
     42e:	04 00 00 e0 40 40 40 40 04 05 05 05 00 00 90 90     ....@@@@........
     43e:	90 90 60 05 05 05 06 00 00 88 50 50 50 20 05 05     ..`.......PPP ..
     44e:	05 06 00 00 88 88 88 a8 50 04 05 05 05 00 00 90     ........P.......
     45e:	90 90 60 90 04 06 06 05 00 ff 90 90 90 70 10 60     ..`..........p.`
     46e:	04 05 05 05 00 00 f0 20 40 80 f0 02 07 07 03 00     ....... @.......
     47e:	ff c0 80 80 80 80 80 c0 03 06 06 04 00 ff 80 80     ................
     48e:	40 40 20 20 02 07 07 03 00 ff c0 40 40 40 40 40     @@  .......@@@@@
     49e:	c0 03 02 02 04 00 04 40 a0 04 01 01 05 00 ff f0     .......@........
     4ae:	02 02 02 03 00 05 80 40 04 04 04 05 00 00 60 90     .......@......`.
     4be:	90 70 04 05 05 05 00 00 80 e0 90 90 60 03 04 04     .p..........`...
     4ce:	04 00 00 60 80 80 60 04 05 05 05 00 00 10 70 90     ...`..`.......p.
     4de:	90 60 04 04 04 05 00 00 60 90 a0 70 04 05 05 05     .`......`..p....
     4ee:	00 00 60 90 80 c0 80 04 06 06 05 00 fe 60 90 90     ..`..........`..
     4fe:	70 10 60 04 05 05 05 00 00 80 e0 90 90 90 01 05     p.`.............
     50e:	05 02 00 00 80 00 80 80 80 03 07 07 03 ff fe 20     ............... 
     51e:	00 20 20 20 20 c0 03 05 05 04 00 00 80 a0 c0 a0     .    ...........
     52e:	a0 01 05 05 02 00 00 80 80 80 80 80 05 04 04 06     ................
     53e:	00 00 d0 a8 a8 88 04 04 04 05 00 00 e0 90 90 90     ................
     54e:	04 04 04 05 00 00 60 90 90 60 04 06 06 05 00 fe     ......`..`......
     55e:	60 90 90 e0 80 80 04 06 06 05 00 fe 60 90 90 70     `...........`..p
     56e:	10 10 04 04 04 05 00 00 e0 90 80 80 04 04 04 05     ................
     57e:	00 00 70 40 20 e0 03 05 05 04 00 00 40 e0 40 40     ..p@ .......@.@@
     58e:	40 04 04 04 05 00 00 90 90 90 70 04 04 04 05 00     @.........p.....
     59e:	00 90 90 90 60 05 04 04 06 00 00 88 a8 a8 50 04     ....`.........P.
     5ae:	04 04 05 00 00 90 90 60 90 04 06 06 05 00 fe 90     .......`........
     5be:	90 90 70 10 60 04 04 04 05 00 00 f0 20 40 f0 03     ..p.`....... @..
     5ce:	07 07 04 00 ff 20 40 40 80 40 40 20 01 07 07 02     ..... @@.@@ ....
     5de:	00 ff 80 80 80 80 80 80 80 03 07 07 04 00 ff 80     ................
     5ee:	40 40 20 40 40 80 05 03 03 06 00 01 40 a8 10 ff     @@ @@.......@...

000005fe <__ctors_start>:
     5fe:	38 06       	cpc	r3, r24
     600:	6b 09       	sbc	r22, r11

00000602 <__ctors_end>:
     602:	11 24       	eor	r1, r1
     604:	1f be       	out	0x3f, r1	; 63
     606:	cf ef       	ldi	r28, 0xFF	; 255
     608:	d8 e0       	ldi	r29, 0x08	; 8
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	cd bf       	out	0x3d, r28	; 61

0000060e <__do_copy_data>:
     60e:	11 e0       	ldi	r17, 0x01	; 1
     610:	a0 e0       	ldi	r26, 0x00	; 0
     612:	b1 e0       	ldi	r27, 0x01	; 1
     614:	e8 e9       	ldi	r30, 0x98	; 152
     616:	f4 e3       	ldi	r31, 0x34	; 52
     618:	02 c0       	rjmp	.+4      	; 0x61e <__do_copy_data+0x10>
     61a:	05 90       	lpm	r0, Z+
     61c:	0d 92       	st	X+, r0
     61e:	a4 39       	cpi	r26, 0x94	; 148
     620:	b1 07       	cpc	r27, r17
     622:	d9 f7       	brne	.-10     	; 0x61a <__do_copy_data+0xc>

00000624 <__do_clear_bss>:
     624:	24 e0       	ldi	r18, 0x04	; 4
     626:	a4 e9       	ldi	r26, 0x94	; 148
     628:	b1 e0       	ldi	r27, 0x01	; 1
     62a:	01 c0       	rjmp	.+2      	; 0x62e <.do_clear_bss_start>

0000062c <.do_clear_bss_loop>:
     62c:	1d 92       	st	X+, r1

0000062e <.do_clear_bss_start>:
     62e:	af 34       	cpi	r26, 0x4F	; 79
     630:	b2 07       	cpc	r27, r18
     632:	e1 f7       	brne	.-8      	; 0x62c <.do_clear_bss_loop>

00000634 <__do_global_ctors>:
     634:	12 e0       	ldi	r17, 0x02	; 2
     636:	c1 e0       	ldi	r28, 0x01	; 1
     638:	d3 e0       	ldi	r29, 0x03	; 3
     63a:	04 c0       	rjmp	.+8      	; 0x644 <__do_global_ctors+0x10>
     63c:	21 97       	sbiw	r28, 0x01	; 1
     63e:	fe 01       	movw	r30, r28
     640:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__tablejump2__>
     644:	cf 3f       	cpi	r28, 0xFF	; 255
     646:	d1 07       	cpc	r29, r17
     648:	c9 f7       	brne	.-14     	; 0x63c <__do_global_ctors+0x8>
     64a:	0e 94 99 09 	call	0x1332	; 0x1332 <main>
     64e:	0c 94 4a 1a 	jmp	0x3494	; 0x3494 <_exit>

00000652 <__bad_interrupt>:
     652:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000656 <_ZN6U8GLIB5writeEh>:
     break;
   }
   x++;
 }
 return returnValue;
}
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	ec 01       	movw	r28, r24
     65c:	26 2f       	mov	r18, r22
     65e:	4c ad       	ldd	r20, Y+60	; 0x3c
     660:	6b ad       	ldd	r22, Y+59	; 0x3b
     662:	04 96       	adiw	r24, 0x04	; 4
     664:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <u8g_DrawGlyph>
     668:	9b ad       	ldd	r25, Y+59	; 0x3b
     66a:	89 0f       	add	r24, r25
     66c:	8b af       	std	Y+59, r24	; 0x3b
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	08 95       	ret

00000678 <_ZN10debugger_t8drawFormEv>:
     678:	8f 92       	push	r8
     67a:	9f 92       	push	r9
     67c:	af 92       	push	r10
     67e:	bf 92       	push	r11
     680:	cf 92       	push	r12
     682:	df 92       	push	r13
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	8c 01       	movw	r16, r24
     692:	65 e1       	ldi	r22, 0x15	; 21
     694:	71 e0       	ldi	r23, 0x01	; 1
     696:	82 e2       	ldi	r24, 0x22	; 34
     698:	93 e0       	ldi	r25, 0x03	; 3
     69a:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_ZN5Print5printEPKc>
     69e:	48 01       	movw	r8, r16
     6a0:	8e e5       	ldi	r24, 0x5E	; 94
     6a2:	88 0e       	add	r8, r24
     6a4:	91 1c       	adc	r9, r1
     6a6:	e1 2c       	mov	r14, r1
     6a8:	f1 2c       	mov	r15, r1
     6aa:	87 e1       	ldi	r24, 0x17	; 23
     6ac:	a8 2e       	mov	r10, r24
     6ae:	b1 2c       	mov	r11, r1
     6b0:	f8 01       	movw	r30, r16
     6b2:	80 81       	ld	r24, Z
     6b4:	91 81       	ldd	r25, Z+1	; 0x01
     6b6:	e8 16       	cp	r14, r24
     6b8:	f9 06       	cpc	r15, r25
     6ba:	0c f0       	brlt	.+2      	; 0x6be <_ZN10debugger_t8drawFormEv+0x46>
     6bc:	45 c0       	rjmp	.+138    	; 0x748 <_ZN10debugger_t8drawFormEv+0xd0>
     6be:	f4 01       	movw	r30, r8
     6c0:	c1 90       	ld	r12, Z+
     6c2:	d1 90       	ld	r13, Z+
     6c4:	4f 01       	movw	r8, r30
     6c6:	e6 01       	movw	r28, r12
     6c8:	09 90       	ld	r0, Y+
     6ca:	00 20       	and	r0, r0
     6cc:	e9 f7       	brne	.-6      	; 0x6c8 <_ZN10debugger_t8drawFormEv+0x50>
     6ce:	21 97       	sbiw	r28, 0x01	; 1
     6d0:	cc 19       	sub	r28, r12
     6d2:	dd 09       	sbc	r29, r13
     6d4:	65 e2       	ldi	r22, 0x25	; 37
     6d6:	71 e0       	ldi	r23, 0x01	; 1
     6d8:	82 e2       	ldi	r24, 0x22	; 34
     6da:	93 e0       	ldi	r25, 0x03	; 3
     6dc:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_ZN5Print5printEPKc>
     6e0:	67 e2       	ldi	r22, 0x27	; 39
     6e2:	71 e0       	ldi	r23, 0x01	; 1
     6e4:	82 e2       	ldi	r24, 0x22	; 34
     6e6:	93 e0       	ldi	r25, 0x03	; 3
     6e8:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_ZN5Print5printEPKc>
     6ec:	b7 01       	movw	r22, r14
     6ee:	77 27       	eor	r23, r23
     6f0:	6f 5f       	subi	r22, 0xFF	; 255
     6f2:	7f 4f       	sbci	r23, 0xFF	; 255
     6f4:	4a e0       	ldi	r20, 0x0A	; 10
     6f6:	50 e0       	ldi	r21, 0x00	; 0
     6f8:	82 e2       	ldi	r24, 0x22	; 34
     6fa:	93 e0       	ldi	r25, 0x03	; 3
     6fc:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN5Print5printEii>
     700:	69 e2       	ldi	r22, 0x29	; 41
     702:	71 e0       	ldi	r23, 0x01	; 1
     704:	82 e2       	ldi	r24, 0x22	; 34
     706:	93 e0       	ldi	r25, 0x03	; 3
     708:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_ZN5Print5printEPKc>
     70c:	b5 01       	movw	r22, r10
     70e:	6c 1b       	sub	r22, r28
     710:	7d 0b       	sbc	r23, r29
     712:	4a e0       	ldi	r20, 0x0A	; 10
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	82 e2       	ldi	r24, 0x22	; 34
     718:	93 e0       	ldi	r25, 0x03	; 3
     71a:	0e 94 4d 0a 	call	0x149a	; 0x149a <_ZN5Print5printEji>
     71e:	63 e2       	ldi	r22, 0x23	; 35
     720:	71 e0       	ldi	r23, 0x01	; 1
     722:	82 e2       	ldi	r24, 0x22	; 34
     724:	93 e0       	ldi	r25, 0x03	; 3
     726:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_ZN5Print5printEPKc>
     72a:	b6 01       	movw	r22, r12
     72c:	82 e2       	ldi	r24, 0x22	; 34
     72e:	93 e0       	ldi	r25, 0x03	; 3
     730:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_ZN5Print5printEPKc>
     734:	6b e2       	ldi	r22, 0x2B	; 43
     736:	71 e0       	ldi	r23, 0x01	; 1
     738:	82 e2       	ldi	r24, 0x22	; 34
     73a:	93 e0       	ldi	r25, 0x03	; 3
     73c:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_ZN5Print5printEPKc>
     740:	ff ef       	ldi	r31, 0xFF	; 255
     742:	ef 1a       	sub	r14, r31
     744:	ff 0a       	sbc	r15, r31
     746:	b4 cf       	rjmp	.-152    	; 0x6b0 <_ZN10debugger_t8drawFormEv+0x38>
     748:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <__data_end>
     74c:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <__data_end+0x1>
     750:	a0 91 96 01 	lds	r26, 0x0196	; 0x800196 <__data_end+0x2>
     754:	b0 91 97 01 	lds	r27, 0x0197	; 0x800197 <__data_end+0x3>
     758:	f8 01       	movw	r30, r16
     75a:	86 83       	std	Z+6, r24	; 0x06
     75c:	97 83       	std	Z+7, r25	; 0x07
     75e:	a0 87       	std	Z+8, r26	; 0x08
     760:	b1 87       	std	Z+9, r27	; 0x09
     762:	12 8a       	std	Z+18, r1	; 0x12
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	1f 91       	pop	r17
     76a:	0f 91       	pop	r16
     76c:	ff 90       	pop	r15
     76e:	ef 90       	pop	r14
     770:	df 90       	pop	r13
     772:	cf 90       	pop	r12
     774:	bf 90       	pop	r11
     776:	af 90       	pop	r10
     778:	9f 90       	pop	r9
     77a:	8f 90       	pop	r8
     77c:	08 95       	ret

0000077e <_ZN10debugger_t14refreshDisplayEv>:
     77e:	cf 92       	push	r12
     780:	df 92       	push	r13
     782:	ef 92       	push	r14
     784:	ff 92       	push	r15
     786:	0f 93       	push	r16
     788:	1f 93       	push	r17
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	8c 01       	movw	r16, r24
     790:	ec 01       	movw	r28, r24
     792:	6c 01       	movw	r12, r24
     794:	85 e4       	ldi	r24, 0x45	; 69
     796:	c8 0e       	add	r12, r24
     798:	d1 1c       	adc	r13, r1
     79a:	e1 2c       	mov	r14, r1
     79c:	f1 2c       	mov	r15, r1
     79e:	d8 01       	movw	r26, r16
     7a0:	8d 91       	ld	r24, X+
     7a2:	9c 91       	ld	r25, X
     7a4:	e8 16       	cp	r14, r24
     7a6:	f9 06       	cpc	r15, r25
     7a8:	0c f0       	brlt	.+2      	; 0x7ac <_ZN10debugger_t14refreshDisplayEv+0x2e>
     7aa:	84 c0       	rjmp	.+264    	; 0x8b4 <_ZN10debugger_t14refreshDisplayEv+0x136>
     7ac:	65 e2       	ldi	r22, 0x25	; 37
     7ae:	71 e0       	ldi	r23, 0x01	; 1
     7b0:	82 e2       	ldi	r24, 0x22	; 34
     7b2:	93 e0       	ldi	r25, 0x03	; 3
     7b4:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_ZN5Print5printEPKc>
     7b8:	67 e2       	ldi	r22, 0x27	; 39
     7ba:	71 e0       	ldi	r23, 0x01	; 1
     7bc:	82 e2       	ldi	r24, 0x22	; 34
     7be:	93 e0       	ldi	r25, 0x03	; 3
     7c0:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_ZN5Print5printEPKc>
     7c4:	b7 01       	movw	r22, r14
     7c6:	77 27       	eor	r23, r23
     7c8:	6f 5f       	subi	r22, 0xFF	; 255
     7ca:	7f 4f       	sbci	r23, 0xFF	; 255
     7cc:	4a e0       	ldi	r20, 0x0A	; 10
     7ce:	50 e0       	ldi	r21, 0x00	; 0
     7d0:	82 e2       	ldi	r24, 0x22	; 34
     7d2:	93 e0       	ldi	r25, 0x03	; 3
     7d4:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN5Print5printEii>
     7d8:	69 e2       	ldi	r22, 0x29	; 41
     7da:	71 e0       	ldi	r23, 0x01	; 1
     7dc:	82 e2       	ldi	r24, 0x22	; 34
     7de:	93 e0       	ldi	r25, 0x03	; 3
     7e0:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_ZN5Print5printEPKc>
     7e4:	4a e0       	ldi	r20, 0x0A	; 10
     7e6:	50 e0       	ldi	r21, 0x00	; 0
     7e8:	6a e1       	ldi	r22, 0x1A	; 26
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	82 e2       	ldi	r24, 0x22	; 34
     7ee:	93 e0       	ldi	r25, 0x03	; 3
     7f0:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN5Print5printEii>
     7f4:	63 e2       	ldi	r22, 0x23	; 35
     7f6:	71 e0       	ldi	r23, 0x01	; 1
     7f8:	82 e2       	ldi	r24, 0x22	; 34
     7fa:	93 e0       	ldi	r25, 0x03	; 3
     7fc:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_ZN5Print5printEPKc>
     800:	d6 01       	movw	r26, r12
     802:	ed 91       	ld	r30, X+
     804:	6d 01       	movw	r12, r26
     806:	8e 2f       	mov	r24, r30
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	87 30       	cpi	r24, 0x07	; 7
     80c:	91 05       	cpc	r25, r1
     80e:	08 f0       	brcs	.+2      	; 0x812 <_ZN10debugger_t14refreshDisplayEv+0x94>
     810:	46 c0       	rjmp	.+140    	; 0x89e <_ZN10debugger_t14refreshDisplayEv+0x120>
     812:	fc 01       	movw	r30, r24
     814:	ec 5c       	subi	r30, 0xCC	; 204
     816:	ff 4f       	sbci	r31, 0xFF	; 255
     818:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__tablejump2__>
     81c:	eb 89       	ldd	r30, Y+19	; 0x13
     81e:	fc 89       	ldd	r31, Y+20	; 0x14
     820:	40 81       	ld	r20, Z
     822:	51 81       	ldd	r21, Z+1	; 0x01
     824:	62 81       	ldd	r22, Z+2	; 0x02
     826:	73 81       	ldd	r23, Z+3	; 0x03
     828:	2a e0       	ldi	r18, 0x0A	; 10
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	82 e2       	ldi	r24, 0x22	; 34
     82e:	93 e0       	ldi	r25, 0x03	; 3
     830:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <_ZN5Print5printEli>
     834:	34 c0       	rjmp	.+104    	; 0x89e <_ZN10debugger_t14refreshDisplayEv+0x120>
     836:	eb 89       	ldd	r30, Y+19	; 0x13
     838:	fc 89       	ldd	r31, Y+20	; 0x14
     83a:	40 81       	ld	r20, Z
     83c:	51 81       	ldd	r21, Z+1	; 0x01
     83e:	62 81       	ldd	r22, Z+2	; 0x02
     840:	73 81       	ldd	r23, Z+3	; 0x03
     842:	2a e0       	ldi	r18, 0x0A	; 10
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	82 e2       	ldi	r24, 0x22	; 34
     848:	93 e0       	ldi	r25, 0x03	; 3
     84a:	0e 94 39 0a 	call	0x1472	; 0x1472 <_ZN5Print5printEmi>
     84e:	27 c0       	rjmp	.+78     	; 0x89e <_ZN10debugger_t14refreshDisplayEv+0x120>
     850:	eb 89       	ldd	r30, Y+19	; 0x13
     852:	fc 89       	ldd	r31, Y+20	; 0x14
     854:	60 81       	ld	r22, Z
     856:	71 81       	ldd	r23, Z+1	; 0x01
     858:	82 e2       	ldi	r24, 0x22	; 34
     85a:	93 e0       	ldi	r25, 0x03	; 3
     85c:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_ZN5Print5printEPKc>
     860:	1e c0       	rjmp	.+60     	; 0x89e <_ZN10debugger_t14refreshDisplayEv+0x120>
     862:	eb 89       	ldd	r30, Y+19	; 0x13
     864:	fc 89       	ldd	r31, Y+20	; 0x14
     866:	4a e0       	ldi	r20, 0x0A	; 10
     868:	50 e0       	ldi	r21, 0x00	; 0
     86a:	60 81       	ld	r22, Z
     86c:	82 e2       	ldi	r24, 0x22	; 34
     86e:	93 e0       	ldi	r25, 0x03	; 3
     870:	0e 94 46 0a 	call	0x148c	; 0x148c <_ZN5Print5printEhi>
     874:	14 c0       	rjmp	.+40     	; 0x89e <_ZN10debugger_t14refreshDisplayEv+0x120>
     876:	eb 89       	ldd	r30, Y+19	; 0x13
     878:	fc 89       	ldd	r31, Y+20	; 0x14
     87a:	40 81       	ld	r20, Z
     87c:	51 81       	ldd	r21, Z+1	; 0x01
     87e:	62 81       	ldd	r22, Z+2	; 0x02
     880:	73 81       	ldd	r23, Z+3	; 0x03
     882:	22 e0       	ldi	r18, 0x02	; 2
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	82 e2       	ldi	r24, 0x22	; 34
     888:	93 e0       	ldi	r25, 0x03	; 3
     88a:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <_ZN5Print5printEdi>
     88e:	07 c0       	rjmp	.+14     	; 0x89e <_ZN10debugger_t14refreshDisplayEv+0x120>
     890:	eb 89       	ldd	r30, Y+19	; 0x13
     892:	fc 89       	ldd	r31, Y+20	; 0x14
     894:	60 81       	ld	r22, Z
     896:	82 e2       	ldi	r24, 0x22	; 34
     898:	93 e0       	ldi	r25, 0x03	; 3
     89a:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <_ZN5Print5printEc>
     89e:	6f e2       	ldi	r22, 0x2F	; 47
     8a0:	71 e0       	ldi	r23, 0x01	; 1
     8a2:	82 e2       	ldi	r24, 0x22	; 34
     8a4:	93 e0       	ldi	r25, 0x03	; 3
     8a6:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_ZN5Print5printEPKc>
     8aa:	bf ef       	ldi	r27, 0xFF	; 255
     8ac:	eb 1a       	sub	r14, r27
     8ae:	fb 0a       	sbc	r15, r27
     8b0:	22 96       	adiw	r28, 0x02	; 2
     8b2:	75 cf       	rjmp	.-278    	; 0x79e <_ZN10debugger_t14refreshDisplayEv+0x20>
     8b4:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <__data_end>
     8b8:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <__data_end+0x1>
     8bc:	a0 91 96 01 	lds	r26, 0x0196	; 0x800196 <__data_end+0x2>
     8c0:	b0 91 97 01 	lds	r27, 0x0197	; 0x800197 <__data_end+0x3>
     8c4:	f8 01       	movw	r30, r16
     8c6:	82 83       	std	Z+2, r24	; 0x02
     8c8:	93 83       	std	Z+3, r25	; 0x03
     8ca:	a4 83       	std	Z+4, r26	; 0x04
     8cc:	b5 83       	std	Z+5, r27	; 0x05
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	ff 90       	pop	r15
     8d8:	ef 90       	pop	r14
     8da:	df 90       	pop	r13
     8dc:	cf 90       	pop	r12
     8de:	08 95       	ret

000008e0 <setup>:
     8e0:	26 e0       	ldi	r18, 0x06	; 6
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	52 ec       	ldi	r21, 0xC2	; 194
     8e6:	61 e0       	ldi	r22, 0x01	; 1
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	82 e2       	ldi	r24, 0x22	; 34
     8ec:	93 e0       	ldi	r25, 0x03	; 3
     8ee:	0e 94 a4 08 	call	0x1148	; 0x1148 <_ZN14HardwareSerial5beginEmh>
     8f2:	61 e0       	ldi	r22, 0x01	; 1
     8f4:	83 e0       	ldi	r24, 0x03	; 3
     8f6:	0e 94 2f 0c 	call	0x185e	; 0x185e <pinMode>
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <u8g+0x3d>
     900:	88 ee       	ldi	r24, 0xE8	; 232
     902:	92 e0       	ldi	r25, 0x02	; 2
     904:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <u8g_Begin>

00000908 <_Z14refreshDisplayv>:
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	61 e0       	ldi	r22, 0x01	; 1
     910:	88 ee       	ldi	r24, 0xE8	; 232
     912:	92 e0       	ldi	r25, 0x02	; 2
     914:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <u8g_SetColorIndex>
     918:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <u8g+0x3d>
     91c:	81 11       	cpse	r24, r1
     91e:	07 c0       	rjmp	.+14     	; 0x92e <_Z14refreshDisplayv+0x26>
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <u8g+0x3d>
     926:	88 ee       	ldi	r24, 0xE8	; 232
     928:	92 e0       	ldi	r25, 0x02	; 2
     92a:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <u8g_Begin>
     92e:	88 ee       	ldi	r24, 0xE8	; 232
     930:	92 e0       	ldi	r25, 0x02	; 2
     932:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <u8g_FirstPage>
     936:	6e ee       	ldi	r22, 0xEE	; 238
     938:	71 e0       	ldi	r23, 0x01	; 1
     93a:	88 ee       	ldi	r24, 0xE8	; 232
     93c:	92 e0       	ldi	r25, 0x02	; 2
     93e:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <u8g_SetFont>
     942:	08 e9       	ldi	r16, 0x98	; 152
     944:	11 e0       	ldi	r17, 0x01	; 1
     946:	c1 e0       	ldi	r28, 0x01	; 1
     948:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <u8g+0x1f>
     94c:	c8 9f       	mul	r28, r24
     94e:	80 2d       	mov	r24, r0
     950:	11 24       	eor	r1, r1
     952:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <u8g+0x3b>
     956:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <u8g+0x3c>
     95a:	b8 01       	movw	r22, r16
     95c:	84 ee       	ldi	r24, 0xE4	; 228
     95e:	92 e0       	ldi	r25, 0x02	; 2
     960:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_ZN5Print5printEPKc>
     964:	cf 5f       	subi	r28, 0xFF	; 255
     966:	02 5e       	subi	r16, 0xE2	; 226
     968:	1f 4f       	sbci	r17, 0xFF	; 255
     96a:	c7 30       	cpi	r28, 0x07	; 7
     96c:	69 f7       	brne	.-38     	; 0x948 <_Z14refreshDisplayv+0x40>
     96e:	88 ee       	ldi	r24, 0xE8	; 232
     970:	92 e0       	ldi	r25, 0x02	; 2
     972:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <u8g_NextPage>
     976:	81 11       	cpse	r24, r1
     978:	de cf       	rjmp	.-68     	; 0x936 <_Z14refreshDisplayv+0x2e>
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	08 95       	ret

00000982 <_Z21getSmoothedADCReadingi>:
     982:	2f 92       	push	r2
     984:	3f 92       	push	r3
     986:	4f 92       	push	r4
     988:	5f 92       	push	r5
     98a:	6f 92       	push	r6
     98c:	7f 92       	push	r7
     98e:	8f 92       	push	r8
     990:	9f 92       	push	r9
     992:	af 92       	push	r10
     994:	bf 92       	push	r11
     996:	cf 92       	push	r12
     998:	df 92       	push	r13
     99a:	ef 92       	push	r14
     99c:	ff 92       	push	r15
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	cd b7       	in	r28, 0x3d	; 61
     9a8:	de b7       	in	r29, 0x3e	; 62
     9aa:	27 97       	sbiw	r28, 0x07	; 7
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	f8 94       	cli
     9b0:	de bf       	out	0x3e, r29	; 62
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	cd bf       	out	0x3d, r28	; 61
     9b6:	8d 83       	std	Y+5, r24	; 0x05
     9b8:	80 e9       	ldi	r24, 0x90	; 144
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	0e 94 ff 13 	call	0x27fe	; 0x27fe <malloc>
     9c0:	8c 01       	movw	r16, r24
     9c2:	fc 01       	movw	r30, r24
     9c4:	80 57       	subi	r24, 0x70	; 112
     9c6:	9e 4f       	sbci	r25, 0xFE	; 254
     9c8:	11 92       	st	Z+, r1
     9ca:	11 92       	st	Z+, r1
     9cc:	11 92       	st	Z+, r1
     9ce:	11 92       	st	Z+, r1
     9d0:	e8 17       	cp	r30, r24
     9d2:	f9 07       	cpc	r31, r25
     9d4:	c9 f7       	brne	.-14     	; 0x9c8 <_Z21getSmoothedADCReadingi+0x46>
     9d6:	34 e6       	ldi	r19, 0x64	; 100
     9d8:	23 2e       	mov	r2, r19
     9da:	31 2c       	mov	r3, r1
     9dc:	81 2c       	mov	r8, r1
     9de:	91 2c       	mov	r9, r1
     9e0:	54 01       	movw	r10, r8
     9e2:	41 2c       	mov	r4, r1
     9e4:	51 2c       	mov	r5, r1
     9e6:	32 01       	movw	r6, r4
     9e8:	c1 2c       	mov	r12, r1
     9ea:	d1 2c       	mov	r13, r1
     9ec:	76 01       	movw	r14, r12
     9ee:	8d 81       	ldd	r24, Y+5	; 0x05
     9f0:	0e 94 12 0c 	call	0x1824	; 0x1824 <analogRead>
     9f4:	bc 01       	movw	r22, r24
     9f6:	99 0f       	add	r25, r25
     9f8:	88 0b       	sbc	r24, r24
     9fa:	99 0b       	sbc	r25, r25
     9fc:	0e 94 52 07 	call	0xea4	; 0xea4 <__floatsisf>
     a00:	69 83       	std	Y+1, r22	; 0x01
     a02:	7a 83       	std	Y+2, r23	; 0x02
     a04:	8b 83       	std	Y+3, r24	; 0x03
     a06:	9c 83       	std	Y+4, r25	; 0x04
     a08:	c2 01       	movw	r24, r4
     a0a:	88 0f       	add	r24, r24
     a0c:	99 1f       	adc	r25, r25
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	9f 83       	std	Y+7, r25	; 0x07
     a14:	8e 83       	std	Y+6, r24	; 0x06
     a16:	94 e6       	ldi	r25, 0x64	; 100
     a18:	89 16       	cp	r8, r25
     a1a:	91 04       	cpc	r9, r1
     a1c:	a1 04       	cpc	r10, r1
     a1e:	b1 04       	cpc	r11, r1
     a20:	30 f4       	brcc	.+12     	; 0xa2e <_Z21getSmoothedADCReadingi+0xac>
     a22:	af ef       	ldi	r26, 0xFF	; 255
     a24:	8a 1a       	sub	r8, r26
     a26:	9a 0a       	sbc	r9, r26
     a28:	aa 0a       	sbc	r10, r26
     a2a:	ba 0a       	sbc	r11, r26
     a2c:	0e c0       	rjmp	.+28     	; 0xa4a <_Z21getSmoothedADCReadingi+0xc8>
     a2e:	ee 81       	ldd	r30, Y+6	; 0x06
     a30:	ff 81       	ldd	r31, Y+7	; 0x07
     a32:	e0 0f       	add	r30, r16
     a34:	f1 1f       	adc	r31, r17
     a36:	20 81       	ld	r18, Z
     a38:	31 81       	ldd	r19, Z+1	; 0x01
     a3a:	42 81       	ldd	r20, Z+2	; 0x02
     a3c:	53 81       	ldd	r21, Z+3	; 0x03
     a3e:	c7 01       	movw	r24, r14
     a40:	b6 01       	movw	r22, r12
     a42:	0e 94 71 06 	call	0xce2	; 0xce2 <__subsf3>
     a46:	6b 01       	movw	r12, r22
     a48:	7c 01       	movw	r14, r24
     a4a:	ee 81       	ldd	r30, Y+6	; 0x06
     a4c:	ff 81       	ldd	r31, Y+7	; 0x07
     a4e:	e0 0f       	add	r30, r16
     a50:	f1 1f       	adc	r31, r17
     a52:	89 81       	ldd	r24, Y+1	; 0x01
     a54:	9a 81       	ldd	r25, Y+2	; 0x02
     a56:	ab 81       	ldd	r26, Y+3	; 0x03
     a58:	bc 81       	ldd	r27, Y+4	; 0x04
     a5a:	80 83       	st	Z, r24
     a5c:	91 83       	std	Z+1, r25	; 0x01
     a5e:	a2 83       	std	Z+2, r26	; 0x02
     a60:	b3 83       	std	Z+3, r27	; 0x03
     a62:	9c 01       	movw	r18, r24
     a64:	ad 01       	movw	r20, r26
     a66:	c7 01       	movw	r24, r14
     a68:	b6 01       	movw	r22, r12
     a6a:	0e 94 72 06 	call	0xce4	; 0xce4 <__addsf3>
     a6e:	6b 01       	movw	r12, r22
     a70:	7c 01       	movw	r14, r24
     a72:	ff ef       	ldi	r31, 0xFF	; 255
     a74:	4f 1a       	sub	r4, r31
     a76:	5f 0a       	sbc	r5, r31
     a78:	6f 0a       	sbc	r6, r31
     a7a:	7f 0a       	sbc	r7, r31
     a7c:	84 e6       	ldi	r24, 0x64	; 100
     a7e:	48 16       	cp	r4, r24
     a80:	51 04       	cpc	r5, r1
     a82:	61 04       	cpc	r6, r1
     a84:	71 04       	cpc	r7, r1
     a86:	18 f0       	brcs	.+6      	; 0xa8e <_Z21getSmoothedADCReadingi+0x10c>
     a88:	41 2c       	mov	r4, r1
     a8a:	51 2c       	mov	r5, r1
     a8c:	32 01       	movw	r6, r4
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	29 1a       	sub	r2, r25
     a92:	31 08       	sbc	r3, r1
     a94:	09 f0       	breq	.+2      	; 0xa98 <_Z21getSmoothedADCReadingi+0x116>
     a96:	ab cf       	rjmp	.-170    	; 0x9ee <_Z21getSmoothedADCReadingi+0x6c>
     a98:	c8 01       	movw	r24, r16
     a9a:	0e 94 97 14 	call	0x292e	; 0x292e <free>
     a9e:	c5 01       	movw	r24, r10
     aa0:	b4 01       	movw	r22, r8
     aa2:	0e 94 50 07 	call	0xea0	; 0xea0 <__floatunsisf>
     aa6:	9b 01       	movw	r18, r22
     aa8:	ac 01       	movw	r20, r24
     aaa:	c7 01       	movw	r24, r14
     aac:	b6 01       	movw	r22, r12
     aae:	0e 94 de 06 	call	0xdbc	; 0xdbc <__divsf3>
     ab2:	27 96       	adiw	r28, 0x07	; 7
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	f8 94       	cli
     ab8:	de bf       	out	0x3e, r29	; 62
     aba:	0f be       	out	0x3f, r0	; 63
     abc:	cd bf       	out	0x3d, r28	; 61
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	ff 90       	pop	r15
     ac8:	ef 90       	pop	r14
     aca:	df 90       	pop	r13
     acc:	cf 90       	pop	r12
     ace:	bf 90       	pop	r11
     ad0:	af 90       	pop	r10
     ad2:	9f 90       	pop	r9
     ad4:	8f 90       	pop	r8
     ad6:	7f 90       	pop	r7
     ad8:	6f 90       	pop	r6
     ada:	5f 90       	pop	r5
     adc:	4f 90       	pop	r4
     ade:	3f 90       	pop	r3
     ae0:	2f 90       	pop	r2
     ae2:	08 95       	ret

00000ae4 <loop>:
     ae4:	cf 92       	push	r12
     ae6:	df 92       	push	r13
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	cd b7       	in	r28, 0x3d	; 61
     af6:	de b7       	in	r29, 0x3e	; 62
     af8:	27 97       	sbiw	r28, 0x07	; 7
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	de bf       	out	0x3e, r29	; 62
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	cd bf       	out	0x3d, r28	; 61
     b04:	0e 94 cb 0b 	call	0x1796	; 0x1796 <millis>
     b08:	60 93 94 01 	sts	0x0194, r22	; 0x800194 <__data_end>
     b0c:	70 93 95 01 	sts	0x0195, r23	; 0x800195 <__data_end+0x1>
     b10:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <__data_end+0x2>
     b14:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <__data_end+0x3>
     b18:	00 91 56 02 	lds	r16, 0x0256	; 0x800256 <Debugger+0x2>
     b1c:	10 91 57 02 	lds	r17, 0x0257	; 0x800257 <Debugger+0x3>
     b20:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <Debugger+0x4>
     b24:	30 91 59 02 	lds	r19, 0x0259	; 0x800259 <Debugger+0x5>
     b28:	6b 01       	movw	r12, r22
     b2a:	7c 01       	movw	r14, r24
     b2c:	c0 1a       	sub	r12, r16
     b2e:	d1 0a       	sbc	r13, r17
     b30:	e2 0a       	sbc	r14, r18
     b32:	f3 0a       	sbc	r15, r19
     b34:	00 91 5e 02 	lds	r16, 0x025E	; 0x80025e <Debugger+0xa>
     b38:	10 91 5f 02 	lds	r17, 0x025F	; 0x80025f <Debugger+0xb>
     b3c:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <Debugger+0xc>
     b40:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <Debugger+0xd>
     b44:	c0 16       	cp	r12, r16
     b46:	d1 06       	cpc	r13, r17
     b48:	e2 06       	cpc	r14, r18
     b4a:	f3 06       	cpc	r15, r19
     b4c:	50 f1       	brcs	.+84     	; 0xba2 <loop+0xbe>
     b4e:	00 91 5a 02 	lds	r16, 0x025A	; 0x80025a <Debugger+0x6>
     b52:	10 91 5b 02 	lds	r17, 0x025B	; 0x80025b <Debugger+0x7>
     b56:	20 91 5c 02 	lds	r18, 0x025C	; 0x80025c <Debugger+0x8>
     b5a:	30 91 5d 02 	lds	r19, 0x025D	; 0x80025d <Debugger+0x9>
     b5e:	dc 01       	movw	r26, r24
     b60:	cb 01       	movw	r24, r22
     b62:	80 1b       	sub	r24, r16
     b64:	91 0b       	sbc	r25, r17
     b66:	a2 0b       	sbc	r26, r18
     b68:	b3 0b       	sbc	r27, r19
     b6a:	00 91 62 02 	lds	r16, 0x0262	; 0x800262 <Debugger+0xe>
     b6e:	10 91 63 02 	lds	r17, 0x0263	; 0x800263 <Debugger+0xf>
     b72:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <Debugger+0x10>
     b76:	30 91 65 02 	lds	r19, 0x0265	; 0x800265 <Debugger+0x11>
     b7a:	80 17       	cp	r24, r16
     b7c:	91 07       	cpc	r25, r17
     b7e:	a2 07       	cpc	r26, r18
     b80:	b3 07       	cpc	r27, r19
     b82:	18 f0       	brcs	.+6      	; 0xb8a <loop+0xa6>
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <Debugger+0x12>
     b8a:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <Debugger+0x12>
     b8e:	88 23       	and	r24, r24
     b90:	21 f0       	breq	.+8      	; 0xb9a <loop+0xb6>
     b92:	84 e5       	ldi	r24, 0x54	; 84
     b94:	92 e0       	ldi	r25, 0x02	; 2
     b96:	0e 94 3c 03 	call	0x678	; 0x678 <_ZN10debugger_t8drawFormEv>
     b9a:	84 e5       	ldi	r24, 0x54	; 84
     b9c:	92 e0       	ldi	r25, 0x02	; 2
     b9e:	0e 94 bf 03 	call	0x77e	; 0x77e <_ZN10debugger_t14refreshDisplayEv>
     ba2:	8e e0       	ldi	r24, 0x0E	; 14
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 c1 04 	call	0x982	; 0x982 <_Z21getSmoothedADCReadingi>
     baa:	60 93 50 02 	sts	0x0250, r22	; 0x800250 <throttleReading>
     bae:	70 93 51 02 	sts	0x0251, r23	; 0x800251 <throttleReading+0x1>
     bb2:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <throttleReading+0x2>
     bb6:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <throttleReading+0x3>
     bba:	8f e0       	ldi	r24, 0x0F	; 15
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 c1 04 	call	0x982	; 0x982 <_Z21getSmoothedADCReadingi>
     bc2:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <pulseDurationReading>
     bc6:	70 93 4d 02 	sts	0x024D, r23	; 0x80024d <pulseDurationReading+0x1>
     bca:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <pulseDurationReading+0x2>
     bce:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <pulseDurationReading+0x3>
     bd2:	60 91 50 02 	lds	r22, 0x0250	; 0x800250 <throttleReading>
     bd6:	70 91 51 02 	lds	r23, 0x0251	; 0x800251 <throttleReading+0x1>
     bda:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <throttleReading+0x2>
     bde:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <throttleReading+0x3>
     be2:	8e 01       	movw	r16, r28
     be4:	0f 5f       	subi	r16, 0xFF	; 255
     be6:	1f 4f       	sbci	r17, 0xFF	; 255
     be8:	21 e0       	ldi	r18, 0x01	; 1
     bea:	46 e0       	ldi	r20, 0x06	; 6
     bec:	0e 94 df 13 	call	0x27be	; 0x27be <dtostrf>
     bf0:	9f 93       	push	r25
     bf2:	8f 93       	push	r24
     bf4:	86 e3       	ldi	r24, 0x36	; 54
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	9f 93       	push	r25
     bfa:	8f 93       	push	r24
     bfc:	1f 92       	push	r1
     bfe:	8e e1       	ldi	r24, 0x1E	; 30
     c00:	f8 2e       	mov	r15, r24
     c02:	ff 92       	push	r15
     c04:	88 e9       	ldi	r24, 0x98	; 152
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	9f 93       	push	r25
     c0a:	8f 93       	push	r24
     c0c:	0e 94 20 15 	call	0x2a40	; 0x2a40 <snprintf>
     c10:	60 91 4c 02 	lds	r22, 0x024C	; 0x80024c <pulseDurationReading>
     c14:	70 91 4d 02 	lds	r23, 0x024D	; 0x80024d <pulseDurationReading+0x1>
     c18:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <pulseDurationReading+0x2>
     c1c:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <pulseDurationReading+0x3>
     c20:	21 e0       	ldi	r18, 0x01	; 1
     c22:	46 e0       	ldi	r20, 0x06	; 6
     c24:	0e 94 df 13 	call	0x27be	; 0x27be <dtostrf>
     c28:	9f 93       	push	r25
     c2a:	8f 93       	push	r24
     c2c:	8a e4       	ldi	r24, 0x4A	; 74
     c2e:	91 e0       	ldi	r25, 0x01	; 1
     c30:	9f 93       	push	r25
     c32:	8f 93       	push	r24
     c34:	1f 92       	push	r1
     c36:	ff 92       	push	r15
     c38:	86 eb       	ldi	r24, 0xB6	; 182
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	9f 93       	push	r25
     c3e:	8f 93       	push	r24
     c40:	0e 94 20 15 	call	0x2a40	; 0x2a40 <snprintf>
     c44:	0e 94 84 04 	call	0x908	; 0x908 <_Z14refreshDisplayv>
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	f8 94       	cli
     c4c:	de bf       	out	0x3e, r29	; 62
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	cd bf       	out	0x3d, r28	; 61
     c52:	27 96       	adiw	r28, 0x07	; 7
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	cd bf       	out	0x3d, r28	; 61
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	ff 90       	pop	r15
     c68:	ef 90       	pop	r14
     c6a:	df 90       	pop	r13
     c6c:	cf 90       	pop	r12
     c6e:	08 95       	ret

00000c70 <_GLOBAL__sub_I_u8g>:
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     c74:	c4 ee       	ldi	r28, 0xE4	; 228
     c76:	d2 e0       	ldi	r29, 0x02	; 2
     c78:	1b 82       	std	Y+3, r1	; 0x03
     c7a:	1a 82       	std	Y+2, r1	; 0x02
    U8GLIB(u8g_dev_t *dev, uint8_t sck, uint8_t mosi, uint8_t cs, uint8_t a0, uint8_t reset) 
      { initSPI(dev, sck, mosi, cs, a0, reset); }
    U8GLIB(u8g_dev_t *dev, uint8_t cs, uint8_t a0, uint8_t reset) 
      { initHWSPI(dev, cs, a0, reset); }
    U8GLIB(u8g_dev_t *dev, uint8_t options) 
      { initI2C(dev, options); }
     c7c:	87 e6       	ldi	r24, 0x67	; 103
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	99 83       	std	Y+1, r25	; 0x01
     c82:	88 83       	st	Y, r24
     c84:	42 e1       	ldi	r20, 0x12	; 18
     c86:	67 e0       	ldi	r22, 0x07	; 7
     c88:	71 e0       	ldi	r23, 0x01	; 1
     c8a:	ce 01       	movw	r24, r28
     c8c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <_ZN6U8GLIB7initI2CEP10_u8g_dev_th>
      { }
    U8GLIB_SSD1306_128X64(uint8_t cs, uint8_t a0, uint8_t reset = U8G_PIN_NONE) 
      : U8GLIB(&u8g_dev_ssd1306_128x64_hw_spi, cs, a0, reset)
      { }
    U8GLIB_SSD1306_128X64(uint8_t options = U8G_I2C_OPT_NONE) 
      : U8GLIB(&u8g_dev_ssd1306_128x64_i2c, options)
     c90:	8f e6       	ldi	r24, 0x6F	; 111
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	99 83       	std	Y+1, r25	; 0x01
     c96:	88 83       	st	Y, r24
			 }
		};
				
		debugger_t()
		{
			numberOfWatchedItems = 0;
     c98:	e4 e5       	ldi	r30, 0x54	; 84
     c9a:	f2 e0       	ldi	r31, 0x02	; 2
     c9c:	11 82       	std	Z+1, r1	; 0x01
     c9e:	10 82       	st	Z, r1
			timeOfLastDisplayRefresh = currentTime;
     ca0:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <__data_end>
     ca4:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <__data_end+0x1>
     ca8:	a0 91 96 01 	lds	r26, 0x0196	; 0x800196 <__data_end+0x2>
     cac:	b0 91 97 01 	lds	r27, 0x0197	; 0x800197 <__data_end+0x3>
     cb0:	82 83       	std	Z+2, r24	; 0x02
     cb2:	93 83       	std	Z+3, r25	; 0x03
     cb4:	a4 83       	std	Z+4, r26	; 0x04
     cb6:	b5 83       	std	Z+5, r27	; 0x05
			displayRefreshInterval = 250;
     cb8:	8a ef       	ldi	r24, 0xFA	; 250
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a0 e0       	ldi	r26, 0x00	; 0
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	82 87       	std	Z+10, r24	; 0x0a
     cc2:	93 87       	std	Z+11, r25	; 0x0b
     cc4:	a4 87       	std	Z+12, r26	; 0x0c
     cc6:	b5 87       	std	Z+13, r27	; 0x0d
			formRedrawInterval = 5000;
     cc8:	88 e8       	ldi	r24, 0x88	; 136
     cca:	93 e1       	ldi	r25, 0x13	; 19
     ccc:	a0 e0       	ldi	r26, 0x00	; 0
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	86 87       	std	Z+14, r24	; 0x0e
     cd2:	97 87       	std	Z+15, r25	; 0x0f
     cd4:	a0 8b       	std	Z+16, r26	; 0x10
     cd6:	b1 8b       	std	Z+17, r27	; 0x11
			formNeedsToBeRedrawn = true;
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	82 8b       	std	Z+18, r24	; 0x12
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <__subsf3>:
     ce2:	50 58       	subi	r21, 0x80	; 128

00000ce4 <__addsf3>:
     ce4:	bb 27       	eor	r27, r27
     ce6:	aa 27       	eor	r26, r26
     ce8:	0e 94 89 06 	call	0xd12	; 0xd12 <__addsf3x>
     cec:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__fp_round>
     cf0:	0e 94 96 07 	call	0xf2c	; 0xf2c <__fp_pscA>
     cf4:	38 f0       	brcs	.+14     	; 0xd04 <__addsf3+0x20>
     cf6:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__fp_pscB>
     cfa:	20 f0       	brcs	.+8      	; 0xd04 <__addsf3+0x20>
     cfc:	39 f4       	brne	.+14     	; 0xd0c <__addsf3+0x28>
     cfe:	9f 3f       	cpi	r25, 0xFF	; 255
     d00:	19 f4       	brne	.+6      	; 0xd08 <__addsf3+0x24>
     d02:	26 f4       	brtc	.+8      	; 0xd0c <__addsf3+0x28>
     d04:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__fp_nan>
     d08:	0e f4       	brtc	.+2      	; 0xd0c <__addsf3+0x28>
     d0a:	e0 95       	com	r30
     d0c:	e7 fb       	bst	r30, 7
     d0e:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_inf>

00000d12 <__addsf3x>:
     d12:	e9 2f       	mov	r30, r25
     d14:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__fp_split3>
     d18:	58 f3       	brcs	.-42     	; 0xcf0 <__addsf3+0xc>
     d1a:	ba 17       	cp	r27, r26
     d1c:	62 07       	cpc	r22, r18
     d1e:	73 07       	cpc	r23, r19
     d20:	84 07       	cpc	r24, r20
     d22:	95 07       	cpc	r25, r21
     d24:	20 f0       	brcs	.+8      	; 0xd2e <__addsf3x+0x1c>
     d26:	79 f4       	brne	.+30     	; 0xd46 <__addsf3x+0x34>
     d28:	a6 f5       	brtc	.+104    	; 0xd92 <__addsf3x+0x80>
     d2a:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_zero>
     d2e:	0e f4       	brtc	.+2      	; 0xd32 <__addsf3x+0x20>
     d30:	e0 95       	com	r30
     d32:	0b 2e       	mov	r0, r27
     d34:	ba 2f       	mov	r27, r26
     d36:	a0 2d       	mov	r26, r0
     d38:	0b 01       	movw	r0, r22
     d3a:	b9 01       	movw	r22, r18
     d3c:	90 01       	movw	r18, r0
     d3e:	0c 01       	movw	r0, r24
     d40:	ca 01       	movw	r24, r20
     d42:	a0 01       	movw	r20, r0
     d44:	11 24       	eor	r1, r1
     d46:	ff 27       	eor	r31, r31
     d48:	59 1b       	sub	r21, r25
     d4a:	99 f0       	breq	.+38     	; 0xd72 <__addsf3x+0x60>
     d4c:	59 3f       	cpi	r21, 0xF9	; 249
     d4e:	50 f4       	brcc	.+20     	; 0xd64 <__addsf3x+0x52>
     d50:	50 3e       	cpi	r21, 0xE0	; 224
     d52:	68 f1       	brcs	.+90     	; 0xdae <__addsf3x+0x9c>
     d54:	1a 16       	cp	r1, r26
     d56:	f0 40       	sbci	r31, 0x00	; 0
     d58:	a2 2f       	mov	r26, r18
     d5a:	23 2f       	mov	r18, r19
     d5c:	34 2f       	mov	r19, r20
     d5e:	44 27       	eor	r20, r20
     d60:	58 5f       	subi	r21, 0xF8	; 248
     d62:	f3 cf       	rjmp	.-26     	; 0xd4a <__addsf3x+0x38>
     d64:	46 95       	lsr	r20
     d66:	37 95       	ror	r19
     d68:	27 95       	ror	r18
     d6a:	a7 95       	ror	r26
     d6c:	f0 40       	sbci	r31, 0x00	; 0
     d6e:	53 95       	inc	r21
     d70:	c9 f7       	brne	.-14     	; 0xd64 <__addsf3x+0x52>
     d72:	7e f4       	brtc	.+30     	; 0xd92 <__addsf3x+0x80>
     d74:	1f 16       	cp	r1, r31
     d76:	ba 0b       	sbc	r27, r26
     d78:	62 0b       	sbc	r22, r18
     d7a:	73 0b       	sbc	r23, r19
     d7c:	84 0b       	sbc	r24, r20
     d7e:	ba f0       	brmi	.+46     	; 0xdae <__addsf3x+0x9c>
     d80:	91 50       	subi	r25, 0x01	; 1
     d82:	a1 f0       	breq	.+40     	; 0xdac <__addsf3x+0x9a>
     d84:	ff 0f       	add	r31, r31
     d86:	bb 1f       	adc	r27, r27
     d88:	66 1f       	adc	r22, r22
     d8a:	77 1f       	adc	r23, r23
     d8c:	88 1f       	adc	r24, r24
     d8e:	c2 f7       	brpl	.-16     	; 0xd80 <__addsf3x+0x6e>
     d90:	0e c0       	rjmp	.+28     	; 0xdae <__addsf3x+0x9c>
     d92:	ba 0f       	add	r27, r26
     d94:	62 1f       	adc	r22, r18
     d96:	73 1f       	adc	r23, r19
     d98:	84 1f       	adc	r24, r20
     d9a:	48 f4       	brcc	.+18     	; 0xdae <__addsf3x+0x9c>
     d9c:	87 95       	ror	r24
     d9e:	77 95       	ror	r23
     da0:	67 95       	ror	r22
     da2:	b7 95       	ror	r27
     da4:	f7 95       	ror	r31
     da6:	9e 3f       	cpi	r25, 0xFE	; 254
     da8:	08 f0       	brcs	.+2      	; 0xdac <__addsf3x+0x9a>
     daa:	b0 cf       	rjmp	.-160    	; 0xd0c <__addsf3+0x28>
     dac:	93 95       	inc	r25
     dae:	88 0f       	add	r24, r24
     db0:	08 f0       	brcs	.+2      	; 0xdb4 <__addsf3x+0xa2>
     db2:	99 27       	eor	r25, r25
     db4:	ee 0f       	add	r30, r30
     db6:	97 95       	ror	r25
     db8:	87 95       	ror	r24
     dba:	08 95       	ret

00000dbc <__divsf3>:
     dbc:	0e 94 f2 06 	call	0xde4	; 0xde4 <__divsf3x>
     dc0:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__fp_round>
     dc4:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__fp_pscB>
     dc8:	58 f0       	brcs	.+22     	; 0xde0 <__divsf3+0x24>
     dca:	0e 94 96 07 	call	0xf2c	; 0xf2c <__fp_pscA>
     dce:	40 f0       	brcs	.+16     	; 0xde0 <__divsf3+0x24>
     dd0:	29 f4       	brne	.+10     	; 0xddc <__divsf3+0x20>
     dd2:	5f 3f       	cpi	r21, 0xFF	; 255
     dd4:	29 f0       	breq	.+10     	; 0xde0 <__divsf3+0x24>
     dd6:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_inf>
     dda:	51 11       	cpse	r21, r1
     ddc:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__fp_szero>
     de0:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__fp_nan>

00000de4 <__divsf3x>:
     de4:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__fp_split3>
     de8:	68 f3       	brcs	.-38     	; 0xdc4 <__divsf3+0x8>

00000dea <__divsf3_pse>:
     dea:	99 23       	and	r25, r25
     dec:	b1 f3       	breq	.-20     	; 0xdda <__divsf3+0x1e>
     dee:	55 23       	and	r21, r21
     df0:	91 f3       	breq	.-28     	; 0xdd6 <__divsf3+0x1a>
     df2:	95 1b       	sub	r25, r21
     df4:	55 0b       	sbc	r21, r21
     df6:	bb 27       	eor	r27, r27
     df8:	aa 27       	eor	r26, r26
     dfa:	62 17       	cp	r22, r18
     dfc:	73 07       	cpc	r23, r19
     dfe:	84 07       	cpc	r24, r20
     e00:	38 f0       	brcs	.+14     	; 0xe10 <__divsf3_pse+0x26>
     e02:	9f 5f       	subi	r25, 0xFF	; 255
     e04:	5f 4f       	sbci	r21, 0xFF	; 255
     e06:	22 0f       	add	r18, r18
     e08:	33 1f       	adc	r19, r19
     e0a:	44 1f       	adc	r20, r20
     e0c:	aa 1f       	adc	r26, r26
     e0e:	a9 f3       	breq	.-22     	; 0xdfa <__divsf3_pse+0x10>
     e10:	35 d0       	rcall	.+106    	; 0xe7c <__divsf3_pse+0x92>
     e12:	0e 2e       	mov	r0, r30
     e14:	3a f0       	brmi	.+14     	; 0xe24 <__divsf3_pse+0x3a>
     e16:	e0 e8       	ldi	r30, 0x80	; 128
     e18:	32 d0       	rcall	.+100    	; 0xe7e <__divsf3_pse+0x94>
     e1a:	91 50       	subi	r25, 0x01	; 1
     e1c:	50 40       	sbci	r21, 0x00	; 0
     e1e:	e6 95       	lsr	r30
     e20:	00 1c       	adc	r0, r0
     e22:	ca f7       	brpl	.-14     	; 0xe16 <__divsf3_pse+0x2c>
     e24:	2b d0       	rcall	.+86     	; 0xe7c <__divsf3_pse+0x92>
     e26:	fe 2f       	mov	r31, r30
     e28:	29 d0       	rcall	.+82     	; 0xe7c <__divsf3_pse+0x92>
     e2a:	66 0f       	add	r22, r22
     e2c:	77 1f       	adc	r23, r23
     e2e:	88 1f       	adc	r24, r24
     e30:	bb 1f       	adc	r27, r27
     e32:	26 17       	cp	r18, r22
     e34:	37 07       	cpc	r19, r23
     e36:	48 07       	cpc	r20, r24
     e38:	ab 07       	cpc	r26, r27
     e3a:	b0 e8       	ldi	r27, 0x80	; 128
     e3c:	09 f0       	breq	.+2      	; 0xe40 <__divsf3_pse+0x56>
     e3e:	bb 0b       	sbc	r27, r27
     e40:	80 2d       	mov	r24, r0
     e42:	bf 01       	movw	r22, r30
     e44:	ff 27       	eor	r31, r31
     e46:	93 58       	subi	r25, 0x83	; 131
     e48:	5f 4f       	sbci	r21, 0xFF	; 255
     e4a:	3a f0       	brmi	.+14     	; 0xe5a <__divsf3_pse+0x70>
     e4c:	9e 3f       	cpi	r25, 0xFE	; 254
     e4e:	51 05       	cpc	r21, r1
     e50:	78 f0       	brcs	.+30     	; 0xe70 <__divsf3_pse+0x86>
     e52:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_inf>
     e56:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__fp_szero>
     e5a:	5f 3f       	cpi	r21, 0xFF	; 255
     e5c:	e4 f3       	brlt	.-8      	; 0xe56 <__divsf3_pse+0x6c>
     e5e:	98 3e       	cpi	r25, 0xE8	; 232
     e60:	d4 f3       	brlt	.-12     	; 0xe56 <__divsf3_pse+0x6c>
     e62:	86 95       	lsr	r24
     e64:	77 95       	ror	r23
     e66:	67 95       	ror	r22
     e68:	b7 95       	ror	r27
     e6a:	f7 95       	ror	r31
     e6c:	9f 5f       	subi	r25, 0xFF	; 255
     e6e:	c9 f7       	brne	.-14     	; 0xe62 <__divsf3_pse+0x78>
     e70:	88 0f       	add	r24, r24
     e72:	91 1d       	adc	r25, r1
     e74:	96 95       	lsr	r25
     e76:	87 95       	ror	r24
     e78:	97 f9       	bld	r25, 7
     e7a:	08 95       	ret
     e7c:	e1 e0       	ldi	r30, 0x01	; 1
     e7e:	66 0f       	add	r22, r22
     e80:	77 1f       	adc	r23, r23
     e82:	88 1f       	adc	r24, r24
     e84:	bb 1f       	adc	r27, r27
     e86:	62 17       	cp	r22, r18
     e88:	73 07       	cpc	r23, r19
     e8a:	84 07       	cpc	r24, r20
     e8c:	ba 07       	cpc	r27, r26
     e8e:	20 f0       	brcs	.+8      	; 0xe98 <__divsf3_pse+0xae>
     e90:	62 1b       	sub	r22, r18
     e92:	73 0b       	sbc	r23, r19
     e94:	84 0b       	sbc	r24, r20
     e96:	ba 0b       	sbc	r27, r26
     e98:	ee 1f       	adc	r30, r30
     e9a:	88 f7       	brcc	.-30     	; 0xe7e <__divsf3_pse+0x94>
     e9c:	e0 95       	com	r30
     e9e:	08 95       	ret

00000ea0 <__floatunsisf>:
     ea0:	e8 94       	clt
     ea2:	09 c0       	rjmp	.+18     	; 0xeb6 <__floatsisf+0x12>

00000ea4 <__floatsisf>:
     ea4:	97 fb       	bst	r25, 7
     ea6:	3e f4       	brtc	.+14     	; 0xeb6 <__floatsisf+0x12>
     ea8:	90 95       	com	r25
     eaa:	80 95       	com	r24
     eac:	70 95       	com	r23
     eae:	61 95       	neg	r22
     eb0:	7f 4f       	sbci	r23, 0xFF	; 255
     eb2:	8f 4f       	sbci	r24, 0xFF	; 255
     eb4:	9f 4f       	sbci	r25, 0xFF	; 255
     eb6:	99 23       	and	r25, r25
     eb8:	a9 f0       	breq	.+42     	; 0xee4 <__floatsisf+0x40>
     eba:	f9 2f       	mov	r31, r25
     ebc:	96 e9       	ldi	r25, 0x96	; 150
     ebe:	bb 27       	eor	r27, r27
     ec0:	93 95       	inc	r25
     ec2:	f6 95       	lsr	r31
     ec4:	87 95       	ror	r24
     ec6:	77 95       	ror	r23
     ec8:	67 95       	ror	r22
     eca:	b7 95       	ror	r27
     ecc:	f1 11       	cpse	r31, r1
     ece:	f8 cf       	rjmp	.-16     	; 0xec0 <__floatsisf+0x1c>
     ed0:	fa f4       	brpl	.+62     	; 0xf10 <__floatsisf+0x6c>
     ed2:	bb 0f       	add	r27, r27
     ed4:	11 f4       	brne	.+4      	; 0xeda <__floatsisf+0x36>
     ed6:	60 ff       	sbrs	r22, 0
     ed8:	1b c0       	rjmp	.+54     	; 0xf10 <__floatsisf+0x6c>
     eda:	6f 5f       	subi	r22, 0xFF	; 255
     edc:	7f 4f       	sbci	r23, 0xFF	; 255
     ede:	8f 4f       	sbci	r24, 0xFF	; 255
     ee0:	9f 4f       	sbci	r25, 0xFF	; 255
     ee2:	16 c0       	rjmp	.+44     	; 0xf10 <__floatsisf+0x6c>
     ee4:	88 23       	and	r24, r24
     ee6:	11 f0       	breq	.+4      	; 0xeec <__floatsisf+0x48>
     ee8:	96 e9       	ldi	r25, 0x96	; 150
     eea:	11 c0       	rjmp	.+34     	; 0xf0e <__floatsisf+0x6a>
     eec:	77 23       	and	r23, r23
     eee:	21 f0       	breq	.+8      	; 0xef8 <__floatsisf+0x54>
     ef0:	9e e8       	ldi	r25, 0x8E	; 142
     ef2:	87 2f       	mov	r24, r23
     ef4:	76 2f       	mov	r23, r22
     ef6:	05 c0       	rjmp	.+10     	; 0xf02 <__floatsisf+0x5e>
     ef8:	66 23       	and	r22, r22
     efa:	71 f0       	breq	.+28     	; 0xf18 <__floatsisf+0x74>
     efc:	96 e8       	ldi	r25, 0x86	; 134
     efe:	86 2f       	mov	r24, r22
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	2a f0       	brmi	.+10     	; 0xf10 <__floatsisf+0x6c>
     f06:	9a 95       	dec	r25
     f08:	66 0f       	add	r22, r22
     f0a:	77 1f       	adc	r23, r23
     f0c:	88 1f       	adc	r24, r24
     f0e:	da f7       	brpl	.-10     	; 0xf06 <__floatsisf+0x62>
     f10:	88 0f       	add	r24, r24
     f12:	96 95       	lsr	r25
     f14:	87 95       	ror	r24
     f16:	97 f9       	bld	r25, 7
     f18:	08 95       	ret

00000f1a <__fp_inf>:
     f1a:	97 f9       	bld	r25, 7
     f1c:	9f 67       	ori	r25, 0x7F	; 127
     f1e:	80 e8       	ldi	r24, 0x80	; 128
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	08 95       	ret

00000f26 <__fp_nan>:
     f26:	9f ef       	ldi	r25, 0xFF	; 255
     f28:	80 ec       	ldi	r24, 0xC0	; 192
     f2a:	08 95       	ret

00000f2c <__fp_pscA>:
     f2c:	00 24       	eor	r0, r0
     f2e:	0a 94       	dec	r0
     f30:	16 16       	cp	r1, r22
     f32:	17 06       	cpc	r1, r23
     f34:	18 06       	cpc	r1, r24
     f36:	09 06       	cpc	r0, r25
     f38:	08 95       	ret

00000f3a <__fp_pscB>:
     f3a:	00 24       	eor	r0, r0
     f3c:	0a 94       	dec	r0
     f3e:	12 16       	cp	r1, r18
     f40:	13 06       	cpc	r1, r19
     f42:	14 06       	cpc	r1, r20
     f44:	05 06       	cpc	r0, r21
     f46:	08 95       	ret

00000f48 <__fp_round>:
     f48:	09 2e       	mov	r0, r25
     f4a:	03 94       	inc	r0
     f4c:	00 0c       	add	r0, r0
     f4e:	11 f4       	brne	.+4      	; 0xf54 <__fp_round+0xc>
     f50:	88 23       	and	r24, r24
     f52:	52 f0       	brmi	.+20     	; 0xf68 <__fp_round+0x20>
     f54:	bb 0f       	add	r27, r27
     f56:	40 f4       	brcc	.+16     	; 0xf68 <__fp_round+0x20>
     f58:	bf 2b       	or	r27, r31
     f5a:	11 f4       	brne	.+4      	; 0xf60 <__fp_round+0x18>
     f5c:	60 ff       	sbrs	r22, 0
     f5e:	04 c0       	rjmp	.+8      	; 0xf68 <__fp_round+0x20>
     f60:	6f 5f       	subi	r22, 0xFF	; 255
     f62:	7f 4f       	sbci	r23, 0xFF	; 255
     f64:	8f 4f       	sbci	r24, 0xFF	; 255
     f66:	9f 4f       	sbci	r25, 0xFF	; 255
     f68:	08 95       	ret

00000f6a <__fp_split3>:
     f6a:	57 fd       	sbrc	r21, 7
     f6c:	90 58       	subi	r25, 0x80	; 128
     f6e:	44 0f       	add	r20, r20
     f70:	55 1f       	adc	r21, r21
     f72:	59 f0       	breq	.+22     	; 0xf8a <__fp_splitA+0x10>
     f74:	5f 3f       	cpi	r21, 0xFF	; 255
     f76:	71 f0       	breq	.+28     	; 0xf94 <__fp_splitA+0x1a>
     f78:	47 95       	ror	r20

00000f7a <__fp_splitA>:
     f7a:	88 0f       	add	r24, r24
     f7c:	97 fb       	bst	r25, 7
     f7e:	99 1f       	adc	r25, r25
     f80:	61 f0       	breq	.+24     	; 0xf9a <__fp_splitA+0x20>
     f82:	9f 3f       	cpi	r25, 0xFF	; 255
     f84:	79 f0       	breq	.+30     	; 0xfa4 <__fp_splitA+0x2a>
     f86:	87 95       	ror	r24
     f88:	08 95       	ret
     f8a:	12 16       	cp	r1, r18
     f8c:	13 06       	cpc	r1, r19
     f8e:	14 06       	cpc	r1, r20
     f90:	55 1f       	adc	r21, r21
     f92:	f2 cf       	rjmp	.-28     	; 0xf78 <__fp_split3+0xe>
     f94:	46 95       	lsr	r20
     f96:	f1 df       	rcall	.-30     	; 0xf7a <__fp_splitA>
     f98:	08 c0       	rjmp	.+16     	; 0xfaa <__fp_splitA+0x30>
     f9a:	16 16       	cp	r1, r22
     f9c:	17 06       	cpc	r1, r23
     f9e:	18 06       	cpc	r1, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	f1 cf       	rjmp	.-30     	; 0xf86 <__fp_splitA+0xc>
     fa4:	86 95       	lsr	r24
     fa6:	71 05       	cpc	r23, r1
     fa8:	61 05       	cpc	r22, r1
     faa:	08 94       	sec
     fac:	08 95       	ret

00000fae <__fp_zero>:
     fae:	e8 94       	clt

00000fb0 <__fp_szero>:
     fb0:	bb 27       	eor	r27, r27
     fb2:	66 27       	eor	r22, r22
     fb4:	77 27       	eor	r23, r23
     fb6:	cb 01       	movw	r24, r22
     fb8:	97 f9       	bld	r25, 7
     fba:	08 95       	ret

00000fbc <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     fbc:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     fbe:	91 8d       	ldd	r25, Z+25	; 0x19
     fc0:	22 8d       	ldd	r18, Z+26	; 0x1a
     fc2:	89 2f       	mov	r24, r25
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	80 5c       	subi	r24, 0xC0	; 192
     fc8:	9f 4f       	sbci	r25, 0xFF	; 255
     fca:	82 1b       	sub	r24, r18
     fcc:	91 09       	sbc	r25, r1
}
     fce:	8f 73       	andi	r24, 0x3F	; 63
     fd0:	99 27       	eor	r25, r25
     fd2:	08 95       	ret

00000fd4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     fd4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     fd6:	91 8d       	ldd	r25, Z+25	; 0x19
     fd8:	82 8d       	ldd	r24, Z+26	; 0x1a
     fda:	98 17       	cp	r25, r24
     fdc:	31 f0       	breq	.+12     	; 0xfea <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     fde:	82 8d       	ldd	r24, Z+26	; 0x1a
     fe0:	e8 0f       	add	r30, r24
     fe2:	f1 1d       	adc	r31, r1
     fe4:	85 8d       	ldd	r24, Z+29	; 0x1d
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     fea:	8f ef       	ldi	r24, 0xFF	; 255
     fec:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     fee:	08 95       	ret

00000ff0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     ff0:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     ff2:	91 8d       	ldd	r25, Z+25	; 0x19
     ff4:	82 8d       	ldd	r24, Z+26	; 0x1a
     ff6:	98 17       	cp	r25, r24
     ff8:	61 f0       	breq	.+24     	; 0x1012 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     ffa:	82 8d       	ldd	r24, Z+26	; 0x1a
     ffc:	df 01       	movw	r26, r30
     ffe:	a8 0f       	add	r26, r24
    1000:	b1 1d       	adc	r27, r1
    1002:	5d 96       	adiw	r26, 0x1d	; 29
    1004:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1006:	92 8d       	ldd	r25, Z+26	; 0x1a
    1008:	9f 5f       	subi	r25, 0xFF	; 255
    100a:	9f 73       	andi	r25, 0x3F	; 63
    100c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1012:	8f ef       	ldi	r24, 0xFF	; 255
    1014:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1016:	08 95       	ret

00001018 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1018:	81 e6       	ldi	r24, 0x61	; 97
    101a:	99 e0       	ldi	r25, 0x09	; 9
    101c:	89 2b       	or	r24, r25
    101e:	49 f0       	breq	.+18     	; 0x1032 <_Z14serialEventRunv+0x1a>
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	89 2b       	or	r24, r25
    1026:	29 f0       	breq	.+10     	; 0x1032 <_Z14serialEventRunv+0x1a>
    1028:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_Z17Serial0_availablev>
    102c:	81 11       	cpse	r24, r1
    102e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1032:	08 95       	ret

00001034 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1034:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1036:	84 8d       	ldd	r24, Z+28	; 0x1c
    1038:	df 01       	movw	r26, r30
    103a:	a8 0f       	add	r26, r24
    103c:	b1 1d       	adc	r27, r1
    103e:	a3 5a       	subi	r26, 0xA3	; 163
    1040:	bf 4f       	sbci	r27, 0xFF	; 255
    1042:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1044:	84 8d       	ldd	r24, Z+28	; 0x1c
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	01 96       	adiw	r24, 0x01	; 1
    104a:	8f 73       	andi	r24, 0x3F	; 63
    104c:	99 27       	eor	r25, r25
    104e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1050:	a6 89       	ldd	r26, Z+22	; 0x16
    1052:	b7 89       	ldd	r27, Z+23	; 0x17
    1054:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1056:	a0 89       	ldd	r26, Z+16	; 0x10
    1058:	b1 89       	ldd	r27, Z+17	; 0x11
    105a:	8c 91       	ld	r24, X
    105c:	80 64       	ori	r24, 0x40	; 64
    105e:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1060:	93 8d       	ldd	r25, Z+27	; 0x1b
    1062:	84 8d       	ldd	r24, Z+28	; 0x1c
    1064:	98 13       	cpse	r25, r24
    1066:	06 c0       	rjmp	.+12     	; 0x1074 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1068:	02 88       	ldd	r0, Z+18	; 0x12
    106a:	f3 89       	ldd	r31, Z+19	; 0x13
    106c:	e0 2d       	mov	r30, r0
    106e:	80 81       	ld	r24, Z
    1070:	8f 7d       	andi	r24, 0xDF	; 223
    1072:	80 83       	st	Z, r24
    1074:	08 95       	ret

00001076 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1076:	ef 92       	push	r14
    1078:	ff 92       	push	r15
    107a:	0f 93       	push	r16
    107c:	1f 93       	push	r17
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
    1082:	ec 01       	movw	r28, r24
  _written = true;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1088:	9b 8d       	ldd	r25, Y+27	; 0x1b
    108a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    108c:	98 13       	cpse	r25, r24
    108e:	05 c0       	rjmp	.+10     	; 0x109a <_ZN14HardwareSerial5writeEh+0x24>
    1090:	e8 89       	ldd	r30, Y+16	; 0x10
    1092:	f9 89       	ldd	r31, Y+17	; 0x11
    1094:	80 81       	ld	r24, Z
    1096:	85 fd       	sbrc	r24, 5
    1098:	24 c0       	rjmp	.+72     	; 0x10e2 <_ZN14HardwareSerial5writeEh+0x6c>
    109a:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    109c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    109e:	10 e0       	ldi	r17, 0x00	; 0
    10a0:	0f 5f       	subi	r16, 0xFF	; 255
    10a2:	1f 4f       	sbci	r17, 0xFF	; 255
    10a4:	0f 73       	andi	r16, 0x3F	; 63
    10a6:	11 27       	eor	r17, r17
    10a8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    10aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10ac:	e8 12       	cpse	r14, r24
    10ae:	0c c0       	rjmp	.+24     	; 0x10c8 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	07 fc       	sbrc	r0, 7
    10b4:	fa cf       	rjmp	.-12     	; 0x10aa <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    10b6:	e8 89       	ldd	r30, Y+16	; 0x10
    10b8:	f9 89       	ldd	r31, Y+17	; 0x11
    10ba:	80 81       	ld	r24, Z
    10bc:	85 ff       	sbrs	r24, 5
    10be:	f5 cf       	rjmp	.-22     	; 0x10aa <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    10c0:	ce 01       	movw	r24, r28
    10c2:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    10c6:	f1 cf       	rjmp	.-30     	; 0x10aa <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    10c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10ca:	fe 01       	movw	r30, r28
    10cc:	e8 0f       	add	r30, r24
    10ce:	f1 1d       	adc	r31, r1
    10d0:	e3 5a       	subi	r30, 0xA3	; 163
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    10d6:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    10d8:	ea 89       	ldd	r30, Y+18	; 0x12
    10da:	fb 89       	ldd	r31, Y+19	; 0x13
    10dc:	80 81       	ld	r24, Z
    10de:	80 62       	ori	r24, 0x20	; 32
    10e0:	07 c0       	rjmp	.+14     	; 0x10f0 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    10e2:	ee 89       	ldd	r30, Y+22	; 0x16
    10e4:	ff 89       	ldd	r31, Y+23	; 0x17
    10e6:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    10e8:	e8 89       	ldd	r30, Y+16	; 0x10
    10ea:	f9 89       	ldd	r31, Y+17	; 0x11
    10ec:	80 81       	ld	r24, Z
    10ee:	80 64       	ori	r24, 0x40	; 64
    10f0:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
    10fe:	ff 90       	pop	r15
    1100:	ef 90       	pop	r14
    1102:	08 95       	ret

00001104 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    1108:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    110a:	88 8d       	ldd	r24, Y+24	; 0x18
    110c:	88 23       	and	r24, r24
    110e:	c9 f0       	breq	.+50     	; 0x1142 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1110:	ea 89       	ldd	r30, Y+18	; 0x12
    1112:	fb 89       	ldd	r31, Y+19	; 0x13
    1114:	80 81       	ld	r24, Z
    1116:	85 fd       	sbrc	r24, 5
    1118:	05 c0       	rjmp	.+10     	; 0x1124 <_ZN14HardwareSerial5flushEv+0x20>
    111a:	a8 89       	ldd	r26, Y+16	; 0x10
    111c:	b9 89       	ldd	r27, Y+17	; 0x11
    111e:	8c 91       	ld	r24, X
    1120:	86 fd       	sbrc	r24, 6
    1122:	0f c0       	rjmp	.+30     	; 0x1142 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	07 fc       	sbrc	r0, 7
    1128:	f5 cf       	rjmp	.-22     	; 0x1114 <_ZN14HardwareSerial5flushEv+0x10>
    112a:	80 81       	ld	r24, Z
    112c:	85 ff       	sbrs	r24, 5
    112e:	f2 cf       	rjmp	.-28     	; 0x1114 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1130:	a8 89       	ldd	r26, Y+16	; 0x10
    1132:	b9 89       	ldd	r27, Y+17	; 0x11
    1134:	8c 91       	ld	r24, X
    1136:	85 ff       	sbrs	r24, 5
    1138:	ed cf       	rjmp	.-38     	; 0x1114 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    113a:	ce 01       	movw	r24, r28
    113c:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1140:	e7 cf       	rjmp	.-50     	; 0x1110 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	08 95       	ret

00001148 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1148:	cf 92       	push	r12
    114a:	df 92       	push	r13
    114c:	ef 92       	push	r14
    114e:	ff 92       	push	r15
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	ec 01       	movw	r28, r24
    1158:	6a 01       	movw	r12, r20
    115a:	7b 01       	movw	r14, r22
    115c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    115e:	e8 89       	ldd	r30, Y+16	; 0x10
    1160:	f9 89       	ldd	r31, Y+17	; 0x11
    1162:	82 e0       	ldi	r24, 0x02	; 2
    1164:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1166:	41 15       	cp	r20, r1
    1168:	51 4e       	sbci	r21, 0xE1	; 225
    116a:	61 05       	cpc	r22, r1
    116c:	71 05       	cpc	r23, r1
    116e:	b1 f0       	breq	.+44     	; 0x119c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	79 e0       	ldi	r23, 0x09	; 9
    1174:	8d e3       	ldi	r24, 0x3D	; 61
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	a7 01       	movw	r20, r14
    117a:	96 01       	movw	r18, r12
    117c:	0e 94 b7 13 	call	0x276e	; 0x276e <__udivmodsi4>
    1180:	da 01       	movw	r26, r20
    1182:	c9 01       	movw	r24, r18
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	a1 09       	sbc	r26, r1
    1188:	b1 09       	sbc	r27, r1
    118a:	b6 95       	lsr	r27
    118c:	a7 95       	ror	r26
    118e:	97 95       	ror	r25
    1190:	87 95       	ror	r24
    1192:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1194:	21 15       	cp	r18, r1
    1196:	80 e1       	ldi	r24, 0x10	; 16
    1198:	38 07       	cpc	r19, r24
    119a:	a8 f0       	brcs	.+42     	; 0x11c6 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    119c:	e8 89       	ldd	r30, Y+16	; 0x10
    119e:	f9 89       	ldd	r31, Y+17	; 0x11
    11a0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    11a2:	60 e8       	ldi	r22, 0x80	; 128
    11a4:	74 e8       	ldi	r23, 0x84	; 132
    11a6:	8e e1       	ldi	r24, 0x1E	; 30
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	a7 01       	movw	r20, r14
    11ac:	96 01       	movw	r18, r12
    11ae:	0e 94 b7 13 	call	0x276e	; 0x276e <__udivmodsi4>
    11b2:	da 01       	movw	r26, r20
    11b4:	c9 01       	movw	r24, r18
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	a1 09       	sbc	r26, r1
    11ba:	b1 09       	sbc	r27, r1
    11bc:	b6 95       	lsr	r27
    11be:	a7 95       	ror	r26
    11c0:	97 95       	ror	r25
    11c2:	87 95       	ror	r24
    11c4:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    11c6:	ec 85       	ldd	r30, Y+12	; 0x0c
    11c8:	fd 85       	ldd	r31, Y+13	; 0x0d
    11ca:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    11cc:	ee 85       	ldd	r30, Y+14	; 0x0e
    11ce:	ff 85       	ldd	r31, Y+15	; 0x0f
    11d0:	20 83       	st	Z, r18

  _written = false;
    11d2:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    11d4:	ec 89       	ldd	r30, Y+20	; 0x14
    11d6:	fd 89       	ldd	r31, Y+21	; 0x15
    11d8:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    11da:	ea 89       	ldd	r30, Y+18	; 0x12
    11dc:	fb 89       	ldd	r31, Y+19	; 0x13
    11de:	80 81       	ld	r24, Z
    11e0:	80 61       	ori	r24, 0x10	; 16
    11e2:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    11e4:	ea 89       	ldd	r30, Y+18	; 0x12
    11e6:	fb 89       	ldd	r31, Y+19	; 0x13
    11e8:	80 81       	ld	r24, Z
    11ea:	88 60       	ori	r24, 0x08	; 8
    11ec:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    11ee:	ea 89       	ldd	r30, Y+18	; 0x12
    11f0:	fb 89       	ldd	r31, Y+19	; 0x13
    11f2:	80 81       	ld	r24, Z
    11f4:	80 68       	ori	r24, 0x80	; 128
    11f6:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    11f8:	ea 89       	ldd	r30, Y+18	; 0x12
    11fa:	fb 89       	ldd	r31, Y+19	; 0x13
    11fc:	80 81       	ld	r24, Z
    11fe:	8f 7d       	andi	r24, 0xDF	; 223
    1200:	80 83       	st	Z, r24
}
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	ff 90       	pop	r15
    120a:	ef 90       	pop	r14
    120c:	df 90       	pop	r13
    120e:	cf 90       	pop	r12
    1210:	08 95       	ret

00001212 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1212:	1f 92       	push	r1
    1214:	0f 92       	push	r0
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	0f 92       	push	r0
    121a:	11 24       	eor	r1, r1
    121c:	2f 93       	push	r18
    121e:	8f 93       	push	r24
    1220:	9f 93       	push	r25
    1222:	ef 93       	push	r30
    1224:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1226:	e0 91 32 03 	lds	r30, 0x0332	; 0x800332 <Serial+0x10>
    122a:	f0 91 33 03 	lds	r31, 0x0333	; 0x800333 <Serial+0x11>
    122e:	80 81       	ld	r24, Z
    1230:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <Serial+0x16>
    1234:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <Serial+0x17>
    1238:	82 fd       	sbrc	r24, 2
    123a:	12 c0       	rjmp	.+36     	; 0x1260 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    123c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    123e:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <Serial+0x19>
    1242:	8f 5f       	subi	r24, 0xFF	; 255
    1244:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1246:	20 91 3c 03 	lds	r18, 0x033C	; 0x80033c <Serial+0x1a>
    124a:	82 17       	cp	r24, r18
    124c:	51 f0       	breq	.+20     	; 0x1262 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    124e:	e0 91 3b 03 	lds	r30, 0x033B	; 0x80033b <Serial+0x19>
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	ee 5d       	subi	r30, 0xDE	; 222
    1256:	fc 4f       	sbci	r31, 0xFC	; 252
    1258:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    125a:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <Serial+0x19>
    125e:	01 c0       	rjmp	.+2      	; 0x1262 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1260:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1262:	ff 91       	pop	r31
    1264:	ef 91       	pop	r30
    1266:	9f 91       	pop	r25
    1268:	8f 91       	pop	r24
    126a:	2f 91       	pop	r18
    126c:	0f 90       	pop	r0
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	0f 90       	pop	r0
    1272:	1f 90       	pop	r1
    1274:	18 95       	reti

00001276 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1276:	1f 92       	push	r1
    1278:	0f 92       	push	r0
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	0f 92       	push	r0
    127e:	11 24       	eor	r1, r1
    1280:	2f 93       	push	r18
    1282:	3f 93       	push	r19
    1284:	4f 93       	push	r20
    1286:	5f 93       	push	r21
    1288:	6f 93       	push	r22
    128a:	7f 93       	push	r23
    128c:	8f 93       	push	r24
    128e:	9f 93       	push	r25
    1290:	af 93       	push	r26
    1292:	bf 93       	push	r27
    1294:	ef 93       	push	r30
    1296:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1298:	82 e2       	ldi	r24, 0x22	; 34
    129a:	93 e0       	ldi	r25, 0x03	; 3
    129c:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    12a0:	ff 91       	pop	r31
    12a2:	ef 91       	pop	r30
    12a4:	bf 91       	pop	r27
    12a6:	af 91       	pop	r26
    12a8:	9f 91       	pop	r25
    12aa:	8f 91       	pop	r24
    12ac:	7f 91       	pop	r23
    12ae:	6f 91       	pop	r22
    12b0:	5f 91       	pop	r21
    12b2:	4f 91       	pop	r20
    12b4:	3f 91       	pop	r19
    12b6:	2f 91       	pop	r18
    12b8:	0f 90       	pop	r0
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	0f 90       	pop	r0
    12be:	1f 90       	pop	r1
    12c0:	18 95       	reti

000012c2 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    12c2:	82 e2       	ldi	r24, 0x22	; 34
    12c4:	93 e0       	ldi	r25, 0x03	; 3
    12c6:	0e 94 de 07 	call	0xfbc	; 0xfbc <_ZN14HardwareSerial9availableEv>
    12ca:	21 e0       	ldi	r18, 0x01	; 1
    12cc:	89 2b       	or	r24, r25
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <_Z17Serial0_availablev+0x10>
    12d0:	20 e0       	ldi	r18, 0x00	; 0
}
    12d2:	82 2f       	mov	r24, r18
    12d4:	08 95       	ret

000012d6 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    12d6:	e2 e2       	ldi	r30, 0x22	; 34
    12d8:	f3 e0       	ldi	r31, 0x03	; 3
    12da:	13 82       	std	Z+3, r1	; 0x03
    12dc:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    12de:	88 ee       	ldi	r24, 0xE8	; 232
    12e0:	93 e0       	ldi	r25, 0x03	; 3
    12e2:	a0 e0       	ldi	r26, 0x00	; 0
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	84 83       	std	Z+4, r24	; 0x04
    12e8:	95 83       	std	Z+5, r25	; 0x05
    12ea:	a6 83       	std	Z+6, r26	; 0x06
    12ec:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    12ee:	87 e7       	ldi	r24, 0x77	; 119
    12f0:	91 e0       	ldi	r25, 0x01	; 1
    12f2:	91 83       	std	Z+1, r25	; 0x01
    12f4:	80 83       	st	Z, r24
    12f6:	85 ec       	ldi	r24, 0xC5	; 197
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	95 87       	std	Z+13, r25	; 0x0d
    12fc:	84 87       	std	Z+12, r24	; 0x0c
    12fe:	84 ec       	ldi	r24, 0xC4	; 196
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	97 87       	std	Z+15, r25	; 0x0f
    1304:	86 87       	std	Z+14, r24	; 0x0e
    1306:	80 ec       	ldi	r24, 0xC0	; 192
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	91 8b       	std	Z+17, r25	; 0x11
    130c:	80 8b       	std	Z+16, r24	; 0x10
    130e:	81 ec       	ldi	r24, 0xC1	; 193
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	93 8b       	std	Z+19, r25	; 0x13
    1314:	82 8b       	std	Z+18, r24	; 0x12
    1316:	82 ec       	ldi	r24, 0xC2	; 194
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	95 8b       	std	Z+21, r25	; 0x15
    131c:	84 8b       	std	Z+20, r24	; 0x14
    131e:	86 ec       	ldi	r24, 0xC6	; 198
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	97 8b       	std	Z+23, r25	; 0x17
    1324:	86 8b       	std	Z+22, r24	; 0x16
    1326:	11 8e       	std	Z+25, r1	; 0x19
    1328:	12 8e       	std	Z+26, r1	; 0x1a
    132a:	13 8e       	std	Z+27, r1	; 0x1b
    132c:	14 8e       	std	Z+28, r1	; 0x1c
    132e:	08 95       	ret

00001330 <initVariant>:
    1330:	08 95       	ret

00001332 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1332:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <init>

	initVariant();
    1336:	0e 94 98 09 	call	0x1330	; 0x1330 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    133a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    133e:	cc e0       	ldi	r28, 0x0C	; 12
    1340:	d8 e0       	ldi	r29, 0x08	; 8
#endif
	
	setup();
    
	for (;;) {
		loop();
    1342:	0e 94 72 05 	call	0xae4	; 0xae4 <loop>
		if (serialEventRun) serialEventRun();
    1346:	20 97       	sbiw	r28, 0x00	; 0
    1348:	e1 f3       	breq	.-8      	; 0x1342 <main+0x10>
    134a:	0e 94 0c 08 	call	0x1018	; 0x1018 <_Z14serialEventRunv>
    134e:	f9 cf       	rjmp	.-14     	; 0x1342 <main+0x10>

00001350 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1350:	cf 92       	push	r12
    1352:	df 92       	push	r13
    1354:	ef 92       	push	r14
    1356:	ff 92       	push	r15
    1358:	0f 93       	push	r16
    135a:	1f 93       	push	r17
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	6c 01       	movw	r12, r24
    1362:	7a 01       	movw	r14, r20
    1364:	8b 01       	movw	r16, r22
    1366:	c0 e0       	ldi	r28, 0x00	; 0
    1368:	d0 e0       	ldi	r29, 0x00	; 0
    136a:	ce 15       	cp	r28, r14
    136c:	df 05       	cpc	r29, r15
    136e:	81 f0       	breq	.+32     	; 0x1390 <_ZN5Print5writeEPKhj+0x40>
    1370:	d8 01       	movw	r26, r16
    1372:	6d 91       	ld	r22, X+
    1374:	8d 01       	movw	r16, r26
    1376:	d6 01       	movw	r26, r12
    1378:	ed 91       	ld	r30, X+
    137a:	fc 91       	ld	r31, X
    137c:	01 90       	ld	r0, Z+
    137e:	f0 81       	ld	r31, Z
    1380:	e0 2d       	mov	r30, r0
    1382:	c6 01       	movw	r24, r12
    1384:	09 95       	icall
    1386:	89 2b       	or	r24, r25
    1388:	11 f0       	breq	.+4      	; 0x138e <_ZN5Print5writeEPKhj+0x3e>
    138a:	21 96       	adiw	r28, 0x01	; 1
    138c:	ee cf       	rjmp	.-36     	; 0x136a <_ZN5Print5writeEPKhj+0x1a>
    138e:	7e 01       	movw	r14, r28
    1390:	c7 01       	movw	r24, r14
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	ff 90       	pop	r15
    139c:	ef 90       	pop	r14
    139e:	df 90       	pop	r13
    13a0:	cf 90       	pop	r12
    13a2:	08 95       	ret

000013a4 <_ZN5Print5writeEPKc>:
    13a4:	61 15       	cp	r22, r1
    13a6:	71 05       	cpc	r23, r1
    13a8:	79 f0       	breq	.+30     	; 0x13c8 <_ZN5Print5writeEPKc+0x24>
    13aa:	fb 01       	movw	r30, r22
    13ac:	01 90       	ld	r0, Z+
    13ae:	00 20       	and	r0, r0
    13b0:	e9 f7       	brne	.-6      	; 0x13ac <_ZN5Print5writeEPKc+0x8>
    13b2:	31 97       	sbiw	r30, 0x01	; 1
    13b4:	af 01       	movw	r20, r30
    13b6:	46 1b       	sub	r20, r22
    13b8:	57 0b       	sbc	r21, r23
    13ba:	dc 01       	movw	r26, r24
    13bc:	ed 91       	ld	r30, X+
    13be:	fc 91       	ld	r31, X
    13c0:	02 80       	ldd	r0, Z+2	; 0x02
    13c2:	f3 81       	ldd	r31, Z+3	; 0x03
    13c4:	e0 2d       	mov	r30, r0
    13c6:	09 94       	ijmp
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	08 95       	ret

000013ce <_ZN5Print5printEPKc>:
    13ce:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <_ZN5Print5writeEPKc>

000013d2 <_ZN5Print5printEc>:
    13d2:	dc 01       	movw	r26, r24
    13d4:	ed 91       	ld	r30, X+
    13d6:	fc 91       	ld	r31, X
    13d8:	01 90       	ld	r0, Z+
    13da:	f0 81       	ld	r31, Z
    13dc:	e0 2d       	mov	r30, r0
    13de:	09 94       	ijmp

000013e0 <_ZN5Print11printNumberEmh>:
    13e0:	8f 92       	push	r8
    13e2:	9f 92       	push	r9
    13e4:	af 92       	push	r10
    13e6:	bf 92       	push	r11
    13e8:	ef 92       	push	r14
    13ea:	ff 92       	push	r15
    13ec:	0f 93       	push	r16
    13ee:	1f 93       	push	r17
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	a1 97       	sbiw	r28, 0x21	; 33
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	cd bf       	out	0x3d, r28	; 61
    1404:	7c 01       	movw	r14, r24
    1406:	fa 01       	movw	r30, r20
    1408:	cb 01       	movw	r24, r22
    140a:	19 a2       	std	Y+33, r1	; 0x21
    140c:	22 30       	cpi	r18, 0x02	; 2
    140e:	08 f4       	brcc	.+2      	; 0x1412 <_ZN5Print11printNumberEmh+0x32>
    1410:	2a e0       	ldi	r18, 0x0A	; 10
    1412:	8e 01       	movw	r16, r28
    1414:	0f 5d       	subi	r16, 0xDF	; 223
    1416:	1f 4f       	sbci	r17, 0xFF	; 255
    1418:	82 2e       	mov	r8, r18
    141a:	91 2c       	mov	r9, r1
    141c:	a1 2c       	mov	r10, r1
    141e:	b1 2c       	mov	r11, r1
    1420:	bf 01       	movw	r22, r30
    1422:	a5 01       	movw	r20, r10
    1424:	94 01       	movw	r18, r8
    1426:	0e 94 b7 13 	call	0x276e	; 0x276e <__udivmodsi4>
    142a:	f9 01       	movw	r30, r18
    142c:	ca 01       	movw	r24, r20
    142e:	01 50       	subi	r16, 0x01	; 1
    1430:	11 09       	sbc	r17, r1
    1432:	6a 30       	cpi	r22, 0x0A	; 10
    1434:	10 f4       	brcc	.+4      	; 0x143a <_ZN5Print11printNumberEmh+0x5a>
    1436:	60 5d       	subi	r22, 0xD0	; 208
    1438:	01 c0       	rjmp	.+2      	; 0x143c <_ZN5Print11printNumberEmh+0x5c>
    143a:	69 5c       	subi	r22, 0xC9	; 201
    143c:	d8 01       	movw	r26, r16
    143e:	6c 93       	st	X, r22
    1440:	23 2b       	or	r18, r19
    1442:	24 2b       	or	r18, r20
    1444:	25 2b       	or	r18, r21
    1446:	61 f7       	brne	.-40     	; 0x1420 <_ZN5Print11printNumberEmh+0x40>
    1448:	b8 01       	movw	r22, r16
    144a:	c7 01       	movw	r24, r14
    144c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <_ZN5Print5writeEPKc>
    1450:	a1 96       	adiw	r28, 0x21	; 33
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	cd bf       	out	0x3d, r28	; 61
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	1f 91       	pop	r17
    1462:	0f 91       	pop	r16
    1464:	ff 90       	pop	r15
    1466:	ef 90       	pop	r14
    1468:	bf 90       	pop	r11
    146a:	af 90       	pop	r10
    146c:	9f 90       	pop	r9
    146e:	8f 90       	pop	r8
    1470:	08 95       	ret

00001472 <_ZN5Print5printEmi>:
    1472:	21 15       	cp	r18, r1
    1474:	31 05       	cpc	r19, r1
    1476:	41 f4       	brne	.+16     	; 0x1488 <_ZN5Print5printEmi+0x16>
    1478:	dc 01       	movw	r26, r24
    147a:	ed 91       	ld	r30, X+
    147c:	fc 91       	ld	r31, X
    147e:	01 90       	ld	r0, Z+
    1480:	f0 81       	ld	r31, Z
    1482:	e0 2d       	mov	r30, r0
    1484:	64 2f       	mov	r22, r20
    1486:	09 94       	ijmp
    1488:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <_ZN5Print11printNumberEmh>

0000148c <_ZN5Print5printEhi>:
    148c:	9a 01       	movw	r18, r20
    148e:	46 2f       	mov	r20, r22
    1490:	50 e0       	ldi	r21, 0x00	; 0
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <_ZN5Print5printEmi>

0000149a <_ZN5Print5printEji>:
    149a:	9a 01       	movw	r18, r20
    149c:	ab 01       	movw	r20, r22
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <_ZN5Print5printEmi>

000014a6 <_ZN5Print5printEli>:
    14a6:	cf 92       	push	r12
    14a8:	df 92       	push	r13
    14aa:	ef 92       	push	r14
    14ac:	ff 92       	push	r15
    14ae:	0f 93       	push	r16
    14b0:	1f 93       	push	r17
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	21 15       	cp	r18, r1
    14b8:	31 05       	cpc	r19, r1
    14ba:	81 f4       	brne	.+32     	; 0x14dc <_ZN5Print5printEli+0x36>
    14bc:	dc 01       	movw	r26, r24
    14be:	ed 91       	ld	r30, X+
    14c0:	fc 91       	ld	r31, X
    14c2:	01 90       	ld	r0, Z+
    14c4:	f0 81       	ld	r31, Z
    14c6:	e0 2d       	mov	r30, r0
    14c8:	64 2f       	mov	r22, r20
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	ff 90       	pop	r15
    14d4:	ef 90       	pop	r14
    14d6:	df 90       	pop	r13
    14d8:	cf 90       	pop	r12
    14da:	09 94       	ijmp
    14dc:	2a 30       	cpi	r18, 0x0A	; 10
    14de:	31 05       	cpc	r19, r1
    14e0:	01 f5       	brne	.+64     	; 0x1522 <_ZN5Print5printEli+0x7c>
    14e2:	77 ff       	sbrs	r23, 7
    14e4:	1d c0       	rjmp	.+58     	; 0x1520 <_ZN5Print5printEli+0x7a>
    14e6:	6a 01       	movw	r12, r20
    14e8:	7b 01       	movw	r14, r22
    14ea:	ec 01       	movw	r28, r24
    14ec:	6d e2       	ldi	r22, 0x2D	; 45
    14ee:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <_ZN5Print5printEc>
    14f2:	8c 01       	movw	r16, r24
    14f4:	44 27       	eor	r20, r20
    14f6:	55 27       	eor	r21, r21
    14f8:	ba 01       	movw	r22, r20
    14fa:	4c 19       	sub	r20, r12
    14fc:	5d 09       	sbc	r21, r13
    14fe:	6e 09       	sbc	r22, r14
    1500:	7f 09       	sbc	r23, r15
    1502:	2a e0       	ldi	r18, 0x0A	; 10
    1504:	ce 01       	movw	r24, r28
    1506:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN5Print11printNumberEmh>
    150a:	80 0f       	add	r24, r16
    150c:	91 1f       	adc	r25, r17
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	ff 90       	pop	r15
    1518:	ef 90       	pop	r14
    151a:	df 90       	pop	r13
    151c:	cf 90       	pop	r12
    151e:	08 95       	ret
    1520:	2a e0       	ldi	r18, 0x0A	; 10
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	ff 90       	pop	r15
    152c:	ef 90       	pop	r14
    152e:	df 90       	pop	r13
    1530:	cf 90       	pop	r12
    1532:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <_ZN5Print11printNumberEmh>

00001536 <_ZN5Print5printEii>:
    1536:	9a 01       	movw	r18, r20
    1538:	ab 01       	movw	r20, r22
    153a:	77 0f       	add	r23, r23
    153c:	66 0b       	sbc	r22, r22
    153e:	77 0b       	sbc	r23, r23
    1540:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <_ZN5Print5printEli>

00001544 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1544:	7f 92       	push	r7
    1546:	8f 92       	push	r8
    1548:	9f 92       	push	r9
    154a:	af 92       	push	r10
    154c:	bf 92       	push	r11
    154e:	cf 92       	push	r12
    1550:	df 92       	push	r13
    1552:	ef 92       	push	r14
    1554:	ff 92       	push	r15
    1556:	0f 93       	push	r16
    1558:	1f 93       	push	r17
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	8c 01       	movw	r16, r24
    1560:	6a 01       	movw	r12, r20
    1562:	7b 01       	movw	r14, r22
    1564:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1566:	9a 01       	movw	r18, r20
    1568:	ab 01       	movw	r20, r22
    156a:	c7 01       	movw	r24, r14
    156c:	b6 01       	movw	r22, r12
    156e:	0e 94 b2 13 	call	0x2764	; 0x2764 <__unordsf2>
    1572:	88 23       	and	r24, r24
    1574:	19 f0       	breq	.+6      	; 0x157c <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1576:	66 e8       	ldi	r22, 0x86	; 134
    1578:	71 e0       	ldi	r23, 0x01	; 1
    157a:	27 c0       	rjmp	.+78     	; 0x15ca <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    157c:	46 01       	movw	r8, r12
    157e:	57 01       	movw	r10, r14
    1580:	e8 94       	clt
    1582:	b7 f8       	bld	r11, 7
    1584:	2f ef       	ldi	r18, 0xFF	; 255
    1586:	3f ef       	ldi	r19, 0xFF	; 255
    1588:	4f e7       	ldi	r20, 0x7F	; 127
    158a:	5f e7       	ldi	r21, 0x7F	; 127
    158c:	c5 01       	movw	r24, r10
    158e:	b4 01       	movw	r22, r8
    1590:	0e 94 b2 13 	call	0x2764	; 0x2764 <__unordsf2>
    1594:	81 11       	cpse	r24, r1
    1596:	0d c0       	rjmp	.+26     	; 0x15b2 <_ZN5Print10printFloatEdh+0x6e>
    1598:	2f ef       	ldi	r18, 0xFF	; 255
    159a:	3f ef       	ldi	r19, 0xFF	; 255
    159c:	4f e7       	ldi	r20, 0x7F	; 127
    159e:	5f e7       	ldi	r21, 0x7F	; 127
    15a0:	c5 01       	movw	r24, r10
    15a2:	b4 01       	movw	r22, r8
    15a4:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__cmpsf2>
    15a8:	18 16       	cp	r1, r24
    15aa:	1c f4       	brge	.+6      	; 0x15b2 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    15ac:	6a e8       	ldi	r22, 0x8A	; 138
    15ae:	71 e0       	ldi	r23, 0x01	; 1
    15b0:	0c c0       	rjmp	.+24     	; 0x15ca <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    15b2:	2f ef       	ldi	r18, 0xFF	; 255
    15b4:	3f ef       	ldi	r19, 0xFF	; 255
    15b6:	4f e7       	ldi	r20, 0x7F	; 127
    15b8:	5f e4       	ldi	r21, 0x4F	; 79
    15ba:	c7 01       	movw	r24, r14
    15bc:	b6 01       	movw	r22, r12
    15be:	0e 94 40 13 	call	0x2680	; 0x2680 <__gesf2>
    15c2:	18 16       	cp	r1, r24
    15c4:	94 f4       	brge	.+36     	; 0x15ea <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    15c6:	6e e8       	ldi	r22, 0x8E	; 142
    15c8:	71 e0       	ldi	r23, 0x01	; 1
    15ca:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	1f 91       	pop	r17
    15d2:	0f 91       	pop	r16
    15d4:	ff 90       	pop	r15
    15d6:	ef 90       	pop	r14
    15d8:	df 90       	pop	r13
    15da:	cf 90       	pop	r12
    15dc:	bf 90       	pop	r11
    15de:	af 90       	pop	r10
    15e0:	9f 90       	pop	r9
    15e2:	8f 90       	pop	r8
    15e4:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    15e6:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    15ea:	2f ef       	ldi	r18, 0xFF	; 255
    15ec:	3f ef       	ldi	r19, 0xFF	; 255
    15ee:	4f e7       	ldi	r20, 0x7F	; 127
    15f0:	5f ec       	ldi	r21, 0xCF	; 207
    15f2:	c7 01       	movw	r24, r14
    15f4:	b6 01       	movw	r22, r12
    15f6:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__cmpsf2>
    15fa:	87 fd       	sbrc	r24, 7
    15fc:	e4 cf       	rjmp	.-56     	; 0x15c6 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	a9 01       	movw	r20, r18
    1604:	c7 01       	movw	r24, r14
    1606:	b6 01       	movw	r22, r12
    1608:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__cmpsf2>
    160c:	87 ff       	sbrs	r24, 7
    160e:	0a c0       	rjmp	.+20     	; 0x1624 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    1610:	6d e2       	ldi	r22, 0x2D	; 45
    1612:	c8 01       	movw	r24, r16
    1614:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <_ZN5Print5printEc>
    1618:	ec 01       	movw	r28, r24
     number = -number;
    161a:	f7 fa       	bst	r15, 7
    161c:	f0 94       	com	r15
    161e:	f7 f8       	bld	r15, 7
    1620:	f0 94       	com	r15
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1624:	c0 e0       	ldi	r28, 0x00	; 0
    1626:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1628:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    1632:	7b 14       	cp	r7, r11
    1634:	41 f0       	breq	.+16     	; 0x1646 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e2       	ldi	r20, 0x20	; 32
    163c:	51 e4       	ldi	r21, 0x41	; 65
    163e:	0e 94 de 06 	call	0xdbc	; 0xdbc <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1642:	b3 94       	inc	r11
    1644:	f6 cf       	rjmp	.-20     	; 0x1632 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    1646:	a7 01       	movw	r20, r14
    1648:	96 01       	movw	r18, r12
    164a:	0e 94 72 06 	call	0xce4	; 0xce4 <__addsf3>
    164e:	6b 01       	movw	r12, r22
    1650:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1652:	0e 94 ed 12 	call	0x25da	; 0x25da <__fixunssfsi>
    1656:	4b 01       	movw	r8, r22
    1658:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    165a:	2a e0       	ldi	r18, 0x0A	; 10
    165c:	ab 01       	movw	r20, r22
    165e:	bc 01       	movw	r22, r24
    1660:	c8 01       	movw	r24, r16
    1662:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1666:	c8 0f       	add	r28, r24
    1668:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    166a:	77 20       	and	r7, r7
    166c:	c9 f1       	breq	.+114    	; 0x16e0 <_ZN5Print10printFloatEdh+0x19c>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    166e:	c5 01       	movw	r24, r10
    1670:	b4 01       	movw	r22, r8
    1672:	0e 94 50 07 	call	0xea0	; 0xea0 <__floatunsisf>
    1676:	9b 01       	movw	r18, r22
    1678:	ac 01       	movw	r20, r24
    167a:	c7 01       	movw	r24, r14
    167c:	b6 01       	movw	r22, r12
    167e:	0e 94 71 06 	call	0xce2	; 0xce2 <__subsf3>
    1682:	6b 01       	movw	r12, r22
    1684:	7c 01       	movw	r14, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1686:	62 e9       	ldi	r22, 0x92	; 146
    1688:	71 e0       	ldi	r23, 0x01	; 1
    168a:	c8 01       	movw	r24, r16
    168c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    1690:	c8 0f       	add	r28, r24
    1692:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	40 e2       	ldi	r20, 0x20	; 32
    169a:	51 e4       	ldi	r21, 0x41	; 65
    169c:	c7 01       	movw	r24, r14
    169e:	b6 01       	movw	r22, r12
    16a0:	0e 94 45 13 	call	0x268a	; 0x268a <__mulsf3>
    16a4:	4b 01       	movw	r8, r22
    16a6:	5c 01       	movw	r10, r24
    int toPrint = int(remainder);
    16a8:	0e 94 e6 12 	call	0x25cc	; 0x25cc <__fixsfsi>
    16ac:	6b 01       	movw	r12, r22
    16ae:	7c 01       	movw	r14, r24
    n += print(toPrint);
    16b0:	4a e0       	ldi	r20, 0x0A	; 10
    16b2:	50 e0       	ldi	r21, 0x00	; 0
    16b4:	c8 01       	movw	r24, r16
    16b6:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN5Print5printEii>
    16ba:	c8 0f       	add	r28, r24
    16bc:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    16be:	b6 01       	movw	r22, r12
    16c0:	dd 0c       	add	r13, r13
    16c2:	88 0b       	sbc	r24, r24
    16c4:	99 0b       	sbc	r25, r25
    16c6:	0e 94 52 07 	call	0xea4	; 0xea4 <__floatsisf>
    16ca:	9b 01       	movw	r18, r22
    16cc:	ac 01       	movw	r20, r24
    16ce:	c5 01       	movw	r24, r10
    16d0:	b4 01       	movw	r22, r8
    16d2:	0e 94 71 06 	call	0xce2	; 0xce2 <__subsf3>
    16d6:	6b 01       	movw	r12, r22
    16d8:	7c 01       	movw	r14, r24
    16da:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    16dc:	71 10       	cpse	r7, r1
    16de:	da cf       	rjmp	.-76     	; 0x1694 <_ZN5Print10printFloatEdh+0x150>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    16e0:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	ff 90       	pop	r15
    16ec:	ef 90       	pop	r14
    16ee:	df 90       	pop	r13
    16f0:	cf 90       	pop	r12
    16f2:	bf 90       	pop	r11
    16f4:	af 90       	pop	r10
    16f6:	9f 90       	pop	r9
    16f8:	8f 90       	pop	r8
    16fa:	7f 90       	pop	r7
    16fc:	08 95       	ret

000016fe <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    16fe:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <_ZN5Print10printFloatEdh>

00001702 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1702:	1f 92       	push	r1
    1704:	0f 92       	push	r0
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	0f 92       	push	r0
    170a:	11 24       	eor	r1, r1
    170c:	2f 93       	push	r18
    170e:	3f 93       	push	r19
    1710:	8f 93       	push	r24
    1712:	9f 93       	push	r25
    1714:	af 93       	push	r26
    1716:	bf 93       	push	r27
    1718:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <timer0_millis>
    171c:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <timer0_millis+0x1>
    1720:	a0 91 c2 03 	lds	r26, 0x03C2	; 0x8003c2 <timer0_millis+0x2>
    1724:	b0 91 c3 03 	lds	r27, 0x03C3	; 0x8003c3 <timer0_millis+0x3>
    1728:	30 91 bf 03 	lds	r19, 0x03BF	; 0x8003bf <timer0_fract>
    172c:	23 e0       	ldi	r18, 0x03	; 3
    172e:	23 0f       	add	r18, r19
    1730:	2d 37       	cpi	r18, 0x7D	; 125
    1732:	20 f4       	brcc	.+8      	; 0x173c <__vector_16+0x3a>
    1734:	01 96       	adiw	r24, 0x01	; 1
    1736:	a1 1d       	adc	r26, r1
    1738:	b1 1d       	adc	r27, r1
    173a:	05 c0       	rjmp	.+10     	; 0x1746 <__vector_16+0x44>
    173c:	26 e8       	ldi	r18, 0x86	; 134
    173e:	23 0f       	add	r18, r19
    1740:	02 96       	adiw	r24, 0x02	; 2
    1742:	a1 1d       	adc	r26, r1
    1744:	b1 1d       	adc	r27, r1
    1746:	20 93 bf 03 	sts	0x03BF, r18	; 0x8003bf <timer0_fract>
    174a:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <timer0_millis>
    174e:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <timer0_millis+0x1>
    1752:	a0 93 c2 03 	sts	0x03C2, r26	; 0x8003c2 <timer0_millis+0x2>
    1756:	b0 93 c3 03 	sts	0x03C3, r27	; 0x8003c3 <timer0_millis+0x3>
    175a:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <timer0_overflow_count>
    175e:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <timer0_overflow_count+0x1>
    1762:	a0 91 c6 03 	lds	r26, 0x03C6	; 0x8003c6 <timer0_overflow_count+0x2>
    1766:	b0 91 c7 03 	lds	r27, 0x03C7	; 0x8003c7 <timer0_overflow_count+0x3>
    176a:	01 96       	adiw	r24, 0x01	; 1
    176c:	a1 1d       	adc	r26, r1
    176e:	b1 1d       	adc	r27, r1
    1770:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <timer0_overflow_count>
    1774:	90 93 c5 03 	sts	0x03C5, r25	; 0x8003c5 <timer0_overflow_count+0x1>
    1778:	a0 93 c6 03 	sts	0x03C6, r26	; 0x8003c6 <timer0_overflow_count+0x2>
    177c:	b0 93 c7 03 	sts	0x03C7, r27	; 0x8003c7 <timer0_overflow_count+0x3>
    1780:	bf 91       	pop	r27
    1782:	af 91       	pop	r26
    1784:	9f 91       	pop	r25
    1786:	8f 91       	pop	r24
    1788:	3f 91       	pop	r19
    178a:	2f 91       	pop	r18
    178c:	0f 90       	pop	r0
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	0f 90       	pop	r0
    1792:	1f 90       	pop	r1
    1794:	18 95       	reti

00001796 <millis>:
    1796:	2f b7       	in	r18, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	60 91 c0 03 	lds	r22, 0x03C0	; 0x8003c0 <timer0_millis>
    179e:	70 91 c1 03 	lds	r23, 0x03C1	; 0x8003c1 <timer0_millis+0x1>
    17a2:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <timer0_millis+0x2>
    17a6:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <timer0_millis+0x3>
    17aa:	2f bf       	out	0x3f, r18	; 63
    17ac:	08 95       	ret

000017ae <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    17ae:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    17b0:	84 b5       	in	r24, 0x24	; 36
    17b2:	82 60       	ori	r24, 0x02	; 2
    17b4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    17b6:	84 b5       	in	r24, 0x24	; 36
    17b8:	81 60       	ori	r24, 0x01	; 1
    17ba:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    17bc:	85 b5       	in	r24, 0x25	; 37
    17be:	82 60       	ori	r24, 0x02	; 2
    17c0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    17c2:	85 b5       	in	r24, 0x25	; 37
    17c4:	81 60       	ori	r24, 0x01	; 1
    17c6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    17c8:	ee e6       	ldi	r30, 0x6E	; 110
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	81 60       	ori	r24, 0x01	; 1
    17d0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    17d2:	e1 e8       	ldi	r30, 0x81	; 129
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    17d8:	80 81       	ld	r24, Z
    17da:	82 60       	ori	r24, 0x02	; 2
    17dc:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    17de:	80 81       	ld	r24, Z
    17e0:	81 60       	ori	r24, 0x01	; 1
    17e2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    17e4:	e0 e8       	ldi	r30, 0x80	; 128
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	81 60       	ori	r24, 0x01	; 1
    17ec:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    17ee:	e1 eb       	ldi	r30, 0xB1	; 177
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	84 60       	ori	r24, 0x04	; 4
    17f6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    17f8:	e0 eb       	ldi	r30, 0xB0	; 176
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	81 60       	ori	r24, 0x01	; 1
    1800:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1802:	ea e7       	ldi	r30, 0x7A	; 122
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	84 60       	ori	r24, 0x04	; 4
    180a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    180c:	80 81       	ld	r24, Z
    180e:	82 60       	ori	r24, 0x02	; 2
    1810:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1812:	80 81       	ld	r24, Z
    1814:	81 60       	ori	r24, 0x01	; 1
    1816:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1818:	80 81       	ld	r24, Z
    181a:	80 68       	ori	r24, 0x80	; 128
    181c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    181e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1822:	08 95       	ret

00001824 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    1824:	8e 30       	cpi	r24, 0x0E	; 14
    1826:	08 f0       	brcs	.+2      	; 0x182a <analogRead+0x6>
    1828:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    182a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    182e:	90 e4       	ldi	r25, 0x40	; 64
    1830:	29 9f       	mul	r18, r25
    1832:	90 01       	movw	r18, r0
    1834:	11 24       	eor	r1, r1
    1836:	87 70       	andi	r24, 0x07	; 7
    1838:	82 2b       	or	r24, r18
    183a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    183e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1842:	80 64       	ori	r24, 0x40	; 64
    1844:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1848:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    184c:	86 fd       	sbrc	r24, 6
    184e:	fc cf       	rjmp	.-8      	; 0x1848 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1850:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    1854:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    1858:	90 e0       	ldi	r25, 0x00	; 0
}
    185a:	92 2b       	or	r25, r18
    185c:	08 95       	ret

0000185e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	fc 01       	movw	r30, r24
    1866:	e0 59       	subi	r30, 0x90	; 144
    1868:	fe 4f       	sbci	r31, 0xFE	; 254
    186a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    186c:	fc 01       	movw	r30, r24
    186e:	ec 57       	subi	r30, 0x7C	; 124
    1870:	fe 4f       	sbci	r31, 0xFE	; 254
    1872:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1874:	88 23       	and	r24, r24
    1876:	61 f1       	breq	.+88     	; 0x18d0 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	fc 01       	movw	r30, r24
    1880:	ee 55       	subi	r30, 0x5E	; 94
    1882:	fe 4f       	sbci	r31, 0xFE	; 254
    1884:	c5 91       	lpm	r28, Z+
    1886:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1888:	fc 01       	movw	r30, r24
    188a:	e8 56       	subi	r30, 0x68	; 104
    188c:	fe 4f       	sbci	r31, 0xFE	; 254
    188e:	a5 91       	lpm	r26, Z+
    1890:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1892:	61 11       	cpse	r22, r1
    1894:	09 c0       	rjmp	.+18     	; 0x18a8 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1896:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1898:	f8 94       	cli
		*reg &= ~bit;
    189a:	88 81       	ld	r24, Y
    189c:	20 95       	com	r18
    189e:	82 23       	and	r24, r18
    18a0:	88 83       	st	Y, r24
		*out &= ~bit;
    18a2:	ec 91       	ld	r30, X
    18a4:	2e 23       	and	r18, r30
    18a6:	0b c0       	rjmp	.+22     	; 0x18be <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    18a8:	62 30       	cpi	r22, 0x02	; 2
    18aa:	61 f4       	brne	.+24     	; 0x18c4 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    18ac:	9f b7       	in	r25, 0x3f	; 63
                cli();
    18ae:	f8 94       	cli
		*reg &= ~bit;
    18b0:	88 81       	ld	r24, Y
    18b2:	32 2f       	mov	r19, r18
    18b4:	30 95       	com	r19
    18b6:	83 23       	and	r24, r19
    18b8:	88 83       	st	Y, r24
		*out |= bit;
    18ba:	ec 91       	ld	r30, X
    18bc:	2e 2b       	or	r18, r30
    18be:	2c 93       	st	X, r18
		SREG = oldSREG;
    18c0:	9f bf       	out	0x3f, r25	; 63
    18c2:	06 c0       	rjmp	.+12     	; 0x18d0 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    18c4:	8f b7       	in	r24, 0x3f	; 63
                cli();
    18c6:	f8 94       	cli
		*reg |= bit;
    18c8:	e8 81       	ld	r30, Y
    18ca:	2e 2b       	or	r18, r30
    18cc:	28 83       	st	Y, r18
		SREG = oldSREG;
    18ce:	8f bf       	out	0x3f, r24	; 63
	}
}
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	08 95       	ret

000018d6 <_ZN6U8GLIB7initI2CEP10_u8g_dev_th>:
  private:
    u8g_t u8g;
    u8g_uint_t tx, ty;          // current position for the Print base class procedures
    uint8_t is_begin;

    void prepare(void) { tx = 0; ty = 0; is_begin = 0; }
    18d6:	fc 01       	movw	r30, r24
    18d8:	13 ae       	std	Z+59, r1	; 0x3b
    18da:	14 ae       	std	Z+60, r1	; 0x3c
    18dc:	15 ae       	std	Z+61, r1	; 0x3d
}

uint8_t U8GLIB::initI2C(u8g_dev_t *dev, uint8_t options)
{
  prepare();
  return u8g_InitI2C(&u8g, dev, options);
    18de:	04 96       	adiw	r24, 0x04	; 4
    18e0:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <u8g_InitI2C>

000018e4 <u8g_dev_ssd1306_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    18e4:	af 92       	push	r10
    18e6:	bf 92       	push	r11
    18e8:	cf 92       	push	r12
    18ea:	df 92       	push	r13
    18ec:	ff 92       	push	r15
    18ee:	0f 93       	push	r16
    18f0:	1f 93       	push	r17
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	8c 01       	movw	r16, r24
    18f8:	eb 01       	movw	r28, r22
    18fa:	f4 2e       	mov	r15, r20
    18fc:	69 01       	movw	r12, r18
  switch(msg)
    18fe:	80 e1       	ldi	r24, 0x10	; 16
    1900:	48 17       	cp	r20, r24
    1902:	b1 f1       	breq	.+108    	; 0x1970 <u8g_dev_ssd1306_128x64_fn+0x8c>
    1904:	84 17       	cp	r24, r20
    1906:	70 f0       	brcs	.+28     	; 0x1924 <u8g_dev_ssd1306_128x64_fn+0x40>
    1908:	ea e0       	ldi	r30, 0x0A	; 10
    190a:	4e 13       	cpse	r20, r30
    190c:	3c c0       	rjmp	.+120    	; 0x1986 <u8g_dev_ssd1306_128x64_fn+0xa2>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
    190e:	42 e0       	ldi	r20, 0x02	; 2
    1910:	c8 01       	movw	r24, r16
    1912:	0e 94 04 11 	call	0x2208	; 0x2208 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_adafruit2_init_seq);
    1916:	48 ec       	ldi	r20, 0xC8	; 200
    1918:	51 e0       	ldi	r21, 0x01	; 1
    191a:	be 01       	movw	r22, r28
    191c:	c8 01       	movw	r24, r16
    191e:	0e 94 43 11 	call	0x2286	; 0x2286 <u8g_WriteEscSeqP>
      break;
    1922:	31 c0       	rjmp	.+98     	; 0x1986 <u8g_dev_ssd1306_128x64_fn+0xa2>
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
    1924:	f1 e1       	ldi	r31, 0x11	; 17
    1926:	4f 17       	cp	r20, r31
    1928:	31 f1       	breq	.+76     	; 0x1976 <u8g_dev_ssd1306_128x64_fn+0x92>
    192a:	85 e1       	ldi	r24, 0x15	; 21
    192c:	48 13       	cpse	r20, r24
    192e:	2b c0       	rjmp	.+86     	; 0x1986 <u8g_dev_ssd1306_128x64_fn+0xa2>
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    1930:	aa 80       	ldd	r10, Y+2	; 0x02
    1932:	bb 80       	ldd	r11, Y+3	; 0x03
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
    1934:	40 ec       	ldi	r20, 0xC0	; 192
    1936:	51 e0       	ldi	r21, 0x01	; 1
    1938:	c8 01       	movw	r24, r16
    193a:	0e 94 43 11 	call	0x2286	; 0x2286 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
    193e:	f5 01       	movw	r30, r10
    1940:	44 81       	ldd	r20, Z+4	; 0x04
    1942:	40 6b       	ori	r20, 0xB0	; 176
    1944:	be 01       	movw	r22, r28
    1946:	c8 01       	movw	r24, r16
    1948:	0e 94 33 11 	call	0x2266	; 0x2266 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
    194c:	41 e0       	ldi	r20, 0x01	; 1
    194e:	be 01       	movw	r22, r28
    1950:	c8 01       	movw	r24, r16
    1952:	0e 94 2a 11 	call	0x2254	; 0x2254 <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
    1956:	ae 01       	movw	r20, r28
    1958:	b8 01       	movw	r22, r16
    195a:	c5 01       	movw	r24, r10
    195c:	0e 94 2e 10 	call	0x205c	; 0x205c <u8g_pb_WriteBuffer>
    1960:	88 23       	and	r24, r24
    1962:	01 f1       	breq	.+64     	; 0x19a4 <u8g_dev_ssd1306_128x64_fn+0xc0>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	be 01       	movw	r22, r28
    1968:	c8 01       	movw	r24, r16
    196a:	0e 94 0d 11 	call	0x221a	; 0x221a <u8g_SetChipSelect>
      }
      break;
    196e:	0b c0       	rjmp	.+22     	; 0x1986 <u8g_dev_ssd1306_128x64_fn+0xa2>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
    1970:	47 eb       	ldi	r20, 0xB7	; 183
    1972:	51 e0       	ldi	r21, 0x01	; 1
    1974:	02 c0       	rjmp	.+4      	; 0x197a <u8g_dev_ssd1306_128x64_fn+0x96>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
    1976:	4c ea       	ldi	r20, 0xAC	; 172
    1978:	51 e0       	ldi	r21, 0x01	; 1
    197a:	be 01       	movw	r22, r28
    197c:	c8 01       	movw	r24, r16
    197e:	0e 94 43 11 	call	0x2286	; 0x2286 <u8g_WriteEscSeqP>
      return 1;
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	0f c0       	rjmp	.+30     	; 0x19a4 <u8g_dev_ssd1306_128x64_fn+0xc0>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
    1986:	96 01       	movw	r18, r12
    1988:	4f 2d       	mov	r20, r15
    198a:	be 01       	movw	r22, r28
    198c:	c8 01       	movw	r24, r16
}
    198e:	df 91       	pop	r29
    1990:	cf 91       	pop	r28
    1992:	1f 91       	pop	r17
    1994:	0f 91       	pop	r16
    1996:	ff 90       	pop	r15
    1998:	df 90       	pop	r13
    199a:	cf 90       	pop	r12
    199c:	bf 90       	pop	r11
    199e:	af 90       	pop	r10
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
      return 1;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
    19a0:	0c 94 9a 10 	jmp	0x2134	; 0x2134 <u8g_dev_pb8v1_base_fn>
}
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	1f 91       	pop	r17
    19aa:	0f 91       	pop	r16
    19ac:	ff 90       	pop	r15
    19ae:	df 90       	pop	r13
    19b0:	cf 90       	pop	r12
    19b2:	bf 90       	pop	r11
    19b4:	af 90       	pop	r10
    19b6:	08 95       	ret

000019b8 <u8g_font_get_word>:
  cap_a = u8g_font_GetCapitalAHeight(u8g->font);
  u8g_font_calc_str_min_box(u8g, s, &buf);
  if ( buf.y_max < cap_a )
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}
    19b8:	fc 01       	movw	r30, r24
    19ba:	e6 0f       	add	r30, r22
    19bc:	f1 1d       	adc	r31, r1
    19be:	84 91       	lpm	r24, Z
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	98 2f       	mov	r25, r24
    19c4:	88 27       	eor	r24, r24
    19c6:	31 96       	adiw	r30, 0x01	; 1
    19c8:	e4 91       	lpm	r30, Z
    19ca:	8e 0f       	add	r24, r30
    19cc:	91 1d       	adc	r25, r1
    19ce:	08 95       	ret

000019d0 <u8g_font_GetFormat>:
    19d0:	fc 01       	movw	r30, r24
    19d2:	84 91       	lpm	r24, Z
    19d4:	08 95       	ret

000019d6 <u8g_font_GetFontGlyphStructureSize>:
    19d6:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <u8g_font_GetFormat>
    19da:	88 23       	and	r24, r24
    19dc:	21 f0       	breq	.+8      	; 0x19e6 <u8g_font_GetFontGlyphStructureSize+0x10>
    19de:	82 30       	cpi	r24, 0x02	; 2
    19e0:	11 f0       	breq	.+4      	; 0x19e6 <u8g_font_GetFontGlyphStructureSize+0x10>
    19e2:	83 e0       	ldi	r24, 0x03	; 3
    19e4:	08 95       	ret
    19e6:	86 e0       	ldi	r24, 0x06	; 6
    19e8:	08 95       	ret

000019ea <u8g_font_calc_vref_font>:
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	08 95       	ret

000019ee <u8g_font_GetEncoding65Pos>:
    19ee:	66 e0       	ldi	r22, 0x06	; 6
    19f0:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <u8g_font_get_word>

000019f4 <u8g_font_GetEncoding97Pos>:
    19f4:	68 e0       	ldi	r22, 0x08	; 8
    19f6:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <u8g_font_get_word>

000019fa <u8g_font_GetFontStartEncoding>:
    19fa:	0a 96       	adiw	r24, 0x0a	; 10
    19fc:	fc 01       	movw	r30, r24
    19fe:	84 91       	lpm	r24, Z
    1a00:	08 95       	ret

00001a02 <u8g_font_GetFontEndEncoding>:
    1a02:	0b 96       	adiw	r24, 0x0b	; 11
    1a04:	fc 01       	movw	r30, r24
    1a06:	84 91       	lpm	r24, Z
    1a08:	08 95       	ret

00001a0a <u8g_GetGlyph>:
    1a0a:	bf 92       	push	r11
    1a0c:	cf 92       	push	r12
    1a0e:	df 92       	push	r13
    1a10:	ef 92       	push	r14
    1a12:	ff 92       	push	r15
    1a14:	0f 93       	push	r16
    1a16:	1f 93       	push	r17
    1a18:	cf 93       	push	r28
    1a1a:	df 93       	push	r29
    1a1c:	8c 01       	movw	r16, r24
    1a1e:	e6 2e       	mov	r14, r22
    1a20:	dc 01       	movw	r26, r24
    1a22:	14 96       	adiw	r26, 0x04	; 4
    1a24:	cd 91       	ld	r28, X+
    1a26:	dc 91       	ld	r29, X
    1a28:	15 97       	sbiw	r26, 0x05	; 5
    1a2a:	ce 01       	movw	r24, r28
    1a2c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <u8g_font_GetFormat>
    1a30:	f8 2e       	mov	r15, r24
    1a32:	f8 01       	movw	r30, r16
    1a34:	84 81       	ldd	r24, Z+4	; 0x04
    1a36:	95 81       	ldd	r25, Z+5	; 0x05
    1a38:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <u8g_font_GetFontGlyphStructureSize>
    1a3c:	c8 2e       	mov	r12, r24
    1a3e:	f1 e0       	ldi	r31, 0x01	; 1
    1a40:	ff 12       	cpse	r15, r31
    1a42:	03 c0       	rjmp	.+6      	; 0x1a4a <u8g_GetGlyph+0x40>
    1a44:	2f e0       	ldi	r18, 0x0F	; 15
    1a46:	b2 2e       	mov	r11, r18
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <u8g_GetGlyph+0x44>
    1a4a:	bb 24       	eor	r11, r11
    1a4c:	ba 94       	dec	r11
    1a4e:	d8 01       	movw	r26, r16
    1a50:	14 96       	adiw	r26, 0x04	; 4
    1a52:	8d 91       	ld	r24, X+
    1a54:	9c 91       	ld	r25, X
    1a56:	15 97       	sbiw	r26, 0x05	; 5
    1a58:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <u8g_font_GetFontStartEncoding>
    1a5c:	f8 2e       	mov	r15, r24
    1a5e:	f8 01       	movw	r30, r16
    1a60:	84 81       	ldd	r24, Z+4	; 0x04
    1a62:	95 81       	ldd	r25, Z+5	; 0x05
    1a64:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <u8g_font_GetFontEndEncoding>
    1a68:	d8 2e       	mov	r13, r24
    1a6a:	d8 01       	movw	r26, r16
    1a6c:	14 96       	adiw	r26, 0x04	; 4
    1a6e:	8d 91       	ld	r24, X+
    1a70:	9c 91       	ld	r25, X
    1a72:	15 97       	sbiw	r26, 0x05	; 5
    1a74:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <u8g_font_GetEncoding97Pos>
    1a78:	b0 e6       	ldi	r27, 0x60	; 96
    1a7a:	be 15       	cp	r27, r14
    1a7c:	38 f4       	brcc	.+14     	; 0x1a8c <u8g_GetGlyph+0x82>
    1a7e:	00 97       	sbiw	r24, 0x00	; 0
    1a80:	29 f0       	breq	.+10     	; 0x1a8c <u8g_GetGlyph+0x82>
    1a82:	c8 0f       	add	r28, r24
    1a84:	d9 1f       	adc	r29, r25
    1a86:	91 e6       	ldi	r25, 0x61	; 97
    1a88:	f9 2e       	mov	r15, r25
    1a8a:	10 c0       	rjmp	.+32     	; 0x1aac <u8g_GetGlyph+0xa2>
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	84 81       	ldd	r24, Z+4	; 0x04
    1a90:	95 81       	ldd	r25, Z+5	; 0x05
    1a92:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <u8g_font_GetEncoding65Pos>
    1a96:	f0 e4       	ldi	r31, 0x40	; 64
    1a98:	fe 15       	cp	r31, r14
    1a9a:	38 f4       	brcc	.+14     	; 0x1aaa <u8g_GetGlyph+0xa0>
    1a9c:	00 97       	sbiw	r24, 0x00	; 0
    1a9e:	29 f0       	breq	.+10     	; 0x1aaa <u8g_GetGlyph+0xa0>
    1aa0:	c8 0f       	add	r28, r24
    1aa2:	d9 1f       	adc	r29, r25
    1aa4:	81 e4       	ldi	r24, 0x41	; 65
    1aa6:	f8 2e       	mov	r15, r24
    1aa8:	01 c0       	rjmp	.+2      	; 0x1aac <u8g_GetGlyph+0xa2>
    1aaa:	61 96       	adiw	r28, 0x11	; 17
    1aac:	de 14       	cp	r13, r14
    1aae:	90 f4       	brcc	.+36     	; 0x1ad4 <u8g_GetGlyph+0xca>
    1ab0:	d8 01       	movw	r26, r16
    1ab2:	50 96       	adiw	r26, 0x10	; 16
    1ab4:	1c 92       	st	X, r1
    1ab6:	50 97       	sbiw	r26, 0x10	; 16
    1ab8:	53 96       	adiw	r26, 0x13	; 19
    1aba:	1c 92       	st	X, r1
    1abc:	53 97       	sbiw	r26, 0x13	; 19
    1abe:	54 96       	adiw	r26, 0x14	; 20
    1ac0:	1c 92       	st	X, r1
    1ac2:	54 97       	sbiw	r26, 0x14	; 20
    1ac4:	51 96       	adiw	r26, 0x11	; 17
    1ac6:	1c 92       	st	X, r1
    1ac8:	51 97       	sbiw	r26, 0x11	; 17
    1aca:	52 96       	adiw	r26, 0x12	; 18
    1acc:	1c 92       	st	X, r1
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	67 c0       	rjmp	.+206    	; 0x1ba2 <u8g_GetGlyph+0x198>
    1ad4:	df 14       	cp	r13, r15
    1ad6:	60 f3       	brcs	.-40     	; 0x1ab0 <u8g_GetGlyph+0xa6>
    1ad8:	8c 2d       	mov	r24, r12
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	fe 01       	movw	r30, r28
    1ade:	24 91       	lpm	r18, Z
    1ae0:	2f 3f       	cpi	r18, 0xFF	; 255
    1ae2:	11 f4       	brne	.+4      	; 0x1ae8 <u8g_GetGlyph+0xde>
    1ae4:	21 96       	adiw	r28, 0x01	; 1
    1ae6:	58 c0       	rjmp	.+176    	; 0x1b98 <u8g_GetGlyph+0x18e>
    1ae8:	fe 10       	cpse	r15, r14
    1aea:	4d c0       	rjmp	.+154    	; 0x1b86 <u8g_GetGlyph+0x17c>
    1aec:	d8 01       	movw	r26, r16
    1aee:	14 96       	adiw	r26, 0x04	; 4
    1af0:	8d 91       	ld	r24, X+
    1af2:	9c 91       	ld	r25, X
    1af4:	15 97       	sbiw	r26, 0x05	; 5
    1af6:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <u8g_font_GetFormat>
    1afa:	9e 01       	movw	r18, r28
    1afc:	2f 5f       	subi	r18, 0xFF	; 255
    1afe:	3f 4f       	sbci	r19, 0xFF	; 255
    1b00:	fe 01       	movw	r30, r28
    1b02:	88 23       	and	r24, r24
    1b04:	11 f0       	breq	.+4      	; 0x1b0a <u8g_GetGlyph+0x100>
    1b06:	82 30       	cpi	r24, 0x02	; 2
    1b08:	e1 f4       	brne	.+56     	; 0x1b42 <u8g_GetGlyph+0x138>
    1b0a:	84 91       	lpm	r24, Z
    1b0c:	d8 01       	movw	r26, r16
    1b0e:	53 96       	adiw	r26, 0x13	; 19
    1b10:	8c 93       	st	X, r24
    1b12:	53 97       	sbiw	r26, 0x13	; 19
    1b14:	f9 01       	movw	r30, r18
    1b16:	24 91       	lpm	r18, Z
    1b18:	54 96       	adiw	r26, 0x14	; 20
    1b1a:	2c 93       	st	X, r18
    1b1c:	54 97       	sbiw	r26, 0x14	; 20
    1b1e:	fe 01       	movw	r30, r28
    1b20:	33 96       	adiw	r30, 0x03	; 3
    1b22:	e4 91       	lpm	r30, Z
    1b24:	50 96       	adiw	r26, 0x10	; 16
    1b26:	ec 93       	st	X, r30
    1b28:	50 97       	sbiw	r26, 0x10	; 16
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	34 96       	adiw	r30, 0x04	; 4
    1b2e:	e4 91       	lpm	r30, Z
    1b30:	51 96       	adiw	r26, 0x11	; 17
    1b32:	ec 93       	st	X, r30
    1b34:	51 97       	sbiw	r26, 0x11	; 17
    1b36:	fe 01       	movw	r30, r28
    1b38:	35 96       	adiw	r30, 0x05	; 5
    1b3a:	e4 91       	lpm	r30, Z
    1b3c:	52 96       	adiw	r26, 0x12	; 18
    1b3e:	ec 93       	st	X, r30
    1b40:	20 c0       	rjmp	.+64     	; 0x1b82 <u8g_GetGlyph+0x178>
    1b42:	84 91       	lpm	r24, Z
    1b44:	98 2f       	mov	r25, r24
    1b46:	9f 70       	andi	r25, 0x0F	; 15
    1b48:	92 50       	subi	r25, 0x02	; 2
    1b4a:	d8 01       	movw	r26, r16
    1b4c:	52 96       	adiw	r26, 0x12	; 18
    1b4e:	9c 93       	st	X, r25
    1b50:	52 97       	sbiw	r26, 0x12	; 18
    1b52:	82 95       	swap	r24
    1b54:	8f 70       	andi	r24, 0x0F	; 15
    1b56:	51 96       	adiw	r26, 0x11	; 17
    1b58:	8c 93       	st	X, r24
    1b5a:	51 97       	sbiw	r26, 0x11	; 17
    1b5c:	f9 01       	movw	r30, r18
    1b5e:	24 91       	lpm	r18, Z
    1b60:	82 2f       	mov	r24, r18
    1b62:	8f 70       	andi	r24, 0x0F	; 15
    1b64:	54 96       	adiw	r26, 0x14	; 20
    1b66:	8c 93       	st	X, r24
    1b68:	54 97       	sbiw	r26, 0x14	; 20
    1b6a:	22 95       	swap	r18
    1b6c:	2f 70       	andi	r18, 0x0F	; 15
    1b6e:	53 96       	adiw	r26, 0x13	; 19
    1b70:	2c 93       	st	X, r18
    1b72:	53 97       	sbiw	r26, 0x13	; 19
    1b74:	fe 01       	movw	r30, r28
    1b76:	32 96       	adiw	r30, 0x02	; 2
    1b78:	e4 91       	lpm	r30, Z
    1b7a:	e2 95       	swap	r30
    1b7c:	ef 70       	andi	r30, 0x0F	; 15
    1b7e:	50 96       	adiw	r26, 0x10	; 16
    1b80:	ec 93       	st	X, r30
    1b82:	ce 01       	movw	r24, r28
    1b84:	0e c0       	rjmp	.+28     	; 0x1ba2 <u8g_GetGlyph+0x198>
    1b86:	fe 01       	movw	r30, r28
    1b88:	32 96       	adiw	r30, 0x02	; 2
    1b8a:	e4 91       	lpm	r30, Z
    1b8c:	eb 21       	and	r30, r11
    1b8e:	9c 01       	movw	r18, r24
    1b90:	2e 0f       	add	r18, r30
    1b92:	31 1d       	adc	r19, r1
    1b94:	c2 0f       	add	r28, r18
    1b96:	d3 1f       	adc	r29, r19
    1b98:	fd 14       	cp	r15, r13
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <u8g_GetGlyph+0x194>
    1b9c:	89 cf       	rjmp	.-238    	; 0x1ab0 <u8g_GetGlyph+0xa6>
    1b9e:	f3 94       	inc	r15
    1ba0:	9d cf       	rjmp	.-198    	; 0x1adc <u8g_GetGlyph+0xd2>
    1ba2:	df 91       	pop	r29
    1ba4:	cf 91       	pop	r28
    1ba6:	1f 91       	pop	r17
    1ba8:	0f 91       	pop	r16
    1baa:	ff 90       	pop	r15
    1bac:	ef 90       	pop	r14
    1bae:	df 90       	pop	r13
    1bb0:	cf 90       	pop	r12
    1bb2:	bf 90       	pop	r11
    1bb4:	08 95       	ret

00001bb6 <u8g_draw_glyph>:
    1bb6:	6f 92       	push	r6
    1bb8:	7f 92       	push	r7
    1bba:	8f 92       	push	r8
    1bbc:	9f 92       	push	r9
    1bbe:	af 92       	push	r10
    1bc0:	bf 92       	push	r11
    1bc2:	cf 92       	push	r12
    1bc4:	df 92       	push	r13
    1bc6:	ef 92       	push	r14
    1bc8:	ff 92       	push	r15
    1bca:	0f 93       	push	r16
    1bcc:	1f 93       	push	r17
    1bce:	cf 93       	push	r28
    1bd0:	df 93       	push	r29
    1bd2:	ec 01       	movw	r28, r24
    1bd4:	c6 2e       	mov	r12, r22
    1bd6:	74 2e       	mov	r7, r20
    1bd8:	62 2f       	mov	r22, r18
    1bda:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <u8g_GetGlyph>
    1bde:	7c 01       	movw	r14, r24
    1be0:	89 2b       	or	r24, r25
    1be2:	c9 f1       	breq	.+114    	; 0x1c56 <u8g_draw_glyph+0xa0>
    1be4:	8c 81       	ldd	r24, Y+4	; 0x04
    1be6:	9d 81       	ldd	r25, Y+5	; 0x05
    1be8:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <u8g_font_GetFontGlyphStructureSize>
    1bec:	b8 2e       	mov	r11, r24
    1bee:	1b 89       	ldd	r17, Y+19	; 0x13
    1bf0:	0c 89       	ldd	r16, Y+20	; 0x14
    1bf2:	89 89       	ldd	r24, Y+17	; 0x11
    1bf4:	c8 0e       	add	r12, r24
    1bf6:	8a 89       	ldd	r24, Y+18	; 0x12
    1bf8:	78 1a       	sub	r7, r24
    1bfa:	d7 2c       	mov	r13, r7
    1bfc:	d0 1a       	sub	r13, r16
    1bfe:	21 2f       	mov	r18, r17
    1c00:	4d 2d       	mov	r20, r13
    1c02:	6c 2d       	mov	r22, r12
    1c04:	ce 01       	movw	r24, r28
    1c06:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <u8g_IsBBXIntersection>
    1c0a:	88 23       	and	r24, r24
    1c0c:	11 f1       	breq	.+68     	; 0x1c52 <u8g_draw_glyph+0x9c>
    1c0e:	eb 0c       	add	r14, r11
    1c10:	f1 1c       	adc	r15, r1
    1c12:	19 5f       	subi	r17, 0xF9	; 249
    1c14:	16 95       	lsr	r17
    1c16:	16 95       	lsr	r17
    1c18:	16 95       	lsr	r17
    1c1a:	81 2e       	mov	r8, r17
    1c1c:	91 2c       	mov	r9, r1
    1c1e:	7d 14       	cp	r7, r13
    1c20:	c1 f0       	breq	.+48     	; 0x1c52 <u8g_draw_glyph+0x9c>
    1c22:	6c 2c       	mov	r6, r12
    1c24:	57 01       	movw	r10, r14
    1c26:	8a 2d       	mov	r24, r10
    1c28:	8e 19       	sub	r24, r14
    1c2a:	81 17       	cp	r24, r17
    1c2c:	70 f4       	brcc	.+28     	; 0x1c4a <u8g_draw_glyph+0x94>
    1c2e:	f5 01       	movw	r30, r10
    1c30:	04 91       	lpm	r16, Z
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	4d 2d       	mov	r20, r13
    1c36:	66 2d       	mov	r22, r6
    1c38:	ce 01       	movw	r24, r28
    1c3a:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <u8g_Draw8Pixel>
    1c3e:	ff ef       	ldi	r31, 0xFF	; 255
    1c40:	af 1a       	sub	r10, r31
    1c42:	bf 0a       	sbc	r11, r31
    1c44:	88 e0       	ldi	r24, 0x08	; 8
    1c46:	68 0e       	add	r6, r24
    1c48:	ee cf       	rjmp	.-36     	; 0x1c26 <u8g_draw_glyph+0x70>
    1c4a:	e8 0c       	add	r14, r8
    1c4c:	f9 1c       	adc	r15, r9
    1c4e:	d3 94       	inc	r13
    1c50:	e6 cf       	rjmp	.-52     	; 0x1c1e <u8g_draw_glyph+0x68>
    1c52:	88 89       	ldd	r24, Y+16	; 0x10
    1c54:	01 c0       	rjmp	.+2      	; 0x1c58 <u8g_draw_glyph+0xa2>
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	1f 91       	pop	r17
    1c5e:	0f 91       	pop	r16
    1c60:	ff 90       	pop	r15
    1c62:	ef 90       	pop	r14
    1c64:	df 90       	pop	r13
    1c66:	cf 90       	pop	r12
    1c68:	bf 90       	pop	r11
    1c6a:	af 90       	pop	r10
    1c6c:	9f 90       	pop	r9
    1c6e:	8f 90       	pop	r8
    1c70:	7f 90       	pop	r7
    1c72:	6f 90       	pop	r6
    1c74:	08 95       	ret

00001c76 <u8g_DrawGlyph>:
    1c76:	ff 92       	push	r15
    1c78:	0f 93       	push	r16
    1c7a:	1f 93       	push	r17
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	ec 01       	movw	r28, r24
    1c82:	06 2f       	mov	r16, r22
    1c84:	14 2f       	mov	r17, r20
    1c86:	f2 2e       	mov	r15, r18
    1c88:	ed 89       	ldd	r30, Y+21	; 0x15
    1c8a:	fe 89       	ldd	r31, Y+22	; 0x16
    1c8c:	09 95       	icall
    1c8e:	48 2f       	mov	r20, r24
    1c90:	41 0f       	add	r20, r17
    1c92:	2f 2d       	mov	r18, r15
    1c94:	60 2f       	mov	r22, r16
    1c96:	ce 01       	movw	r24, r28
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	1f 91       	pop	r17
    1c9e:	0f 91       	pop	r16
    1ca0:	ff 90       	pop	r15
    1ca2:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <u8g_draw_glyph>

00001ca6 <u8g_UpdateRefHeight>:
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	14 96       	adiw	r26, 0x04	; 4
    1caa:	2d 91       	ld	r18, X+
    1cac:	3c 91       	ld	r19, X
    1cae:	15 97       	sbiw	r26, 0x05	; 5
    1cb0:	21 15       	cp	r18, r1
    1cb2:	31 05       	cpc	r19, r1
    1cb4:	09 f4       	brne	.+2      	; 0x1cb8 <u8g_UpdateRefHeight+0x12>
    1cb6:	3f c0       	rjmp	.+126    	; 0x1d36 <u8g_UpdateRefHeight+0x90>
    1cb8:	57 96       	adiw	r26, 0x17	; 23
    1cba:	8c 91       	ld	r24, X
    1cbc:	57 97       	sbiw	r26, 0x17	; 23
    1cbe:	f9 01       	movw	r30, r18
    1cc0:	81 11       	cpse	r24, r1
    1cc2:	08 c0       	rjmp	.+16     	; 0x1cd4 <u8g_UpdateRefHeight+0x2e>
    1cc4:	35 96       	adiw	r30, 0x05	; 5
    1cc6:	e4 91       	lpm	r30, Z
    1cc8:	58 96       	adiw	r26, 0x18	; 24
    1cca:	ec 93       	st	X, r30
    1ccc:	58 97       	sbiw	r26, 0x18	; 24
    1cce:	f9 01       	movw	r30, r18
    1cd0:	3c 96       	adiw	r30, 0x0c	; 12
    1cd2:	11 c0       	rjmp	.+34     	; 0x1cf6 <u8g_UpdateRefHeight+0x50>
    1cd4:	81 30       	cpi	r24, 0x01	; 1
    1cd6:	41 f4       	brne	.+16     	; 0x1ce8 <u8g_UpdateRefHeight+0x42>
    1cd8:	3f 96       	adiw	r30, 0x0f	; 15
    1cda:	e4 91       	lpm	r30, Z
    1cdc:	58 96       	adiw	r26, 0x18	; 24
    1cde:	ec 93       	st	X, r30
    1ce0:	58 97       	sbiw	r26, 0x18	; 24
    1ce2:	f9 01       	movw	r30, r18
    1ce4:	70 96       	adiw	r30, 0x10	; 16
    1ce6:	07 c0       	rjmp	.+14     	; 0x1cf6 <u8g_UpdateRefHeight+0x50>
    1ce8:	3d 96       	adiw	r30, 0x0d	; 13
    1cea:	e4 91       	lpm	r30, Z
    1cec:	58 96       	adiw	r26, 0x18	; 24
    1cee:	ec 93       	st	X, r30
    1cf0:	58 97       	sbiw	r26, 0x18	; 24
    1cf2:	f9 01       	movw	r30, r18
    1cf4:	3e 96       	adiw	r30, 0x0e	; 14
    1cf6:	e4 91       	lpm	r30, Z
    1cf8:	59 96       	adiw	r26, 0x19	; 25
    1cfa:	ec 93       	st	X, r30
    1cfc:	59 97       	sbiw	r26, 0x19	; 25
    1cfe:	58 96       	adiw	r26, 0x18	; 24
    1d00:	8c 91       	ld	r24, X
    1d02:	58 97       	sbiw	r26, 0x18	; 24
    1d04:	08 2e       	mov	r0, r24
    1d06:	00 0c       	add	r0, r0
    1d08:	99 0b       	sbc	r25, r25
    1d0a:	59 96       	adiw	r26, 0x19	; 25
    1d0c:	2c 91       	ld	r18, X
    1d0e:	59 97       	sbiw	r26, 0x19	; 25
    1d10:	82 1b       	sub	r24, r18
    1d12:	91 09       	sbc	r25, r1
    1d14:	27 fd       	sbrc	r18, 7
    1d16:	93 95       	inc	r25
    1d18:	5a 96       	adiw	r26, 0x1a	; 26
    1d1a:	2c 91       	ld	r18, X
    1d1c:	5a 97       	sbiw	r26, 0x1a	; 26
    1d1e:	20 34       	cpi	r18, 0x40	; 64
    1d20:	41 f0       	breq	.+16     	; 0x1d32 <u8g_UpdateRefHeight+0x8c>
    1d22:	82 9f       	mul	r24, r18
    1d24:	c0 01       	movw	r24, r0
    1d26:	11 24       	eor	r1, r1
    1d28:	26 e0       	ldi	r18, 0x06	; 6
    1d2a:	96 95       	lsr	r25
    1d2c:	87 95       	ror	r24
    1d2e:	2a 95       	dec	r18
    1d30:	e1 f7       	brne	.-8      	; 0x1d2a <u8g_UpdateRefHeight+0x84>
    1d32:	5b 96       	adiw	r26, 0x1b	; 27
    1d34:	8c 93       	st	X, r24
    1d36:	08 95       	ret

00001d38 <u8g_SetFontPosBaseline>:
    1d38:	25 ef       	ldi	r18, 0xF5	; 245
    1d3a:	3c e0       	ldi	r19, 0x0C	; 12
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	36 8b       	std	Z+22, r19	; 0x16
    1d40:	25 8b       	std	Z+21, r18	; 0x15
    1d42:	08 95       	ret

00001d44 <u8g_SetFont>:

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
  if ( u8g->font != font )
    1d48:	fc 01       	movw	r30, r24
    1d4a:	24 81       	ldd	r18, Z+4	; 0x04
    1d4c:	35 81       	ldd	r19, Z+5	; 0x05
    1d4e:	26 17       	cp	r18, r22
    1d50:	37 07       	cpc	r19, r23
    1d52:	49 f0       	breq	.+18     	; 0x1d66 <u8g_SetFont+0x22>
    1d54:	ec 01       	movw	r28, r24
  {
    u8g->font = font;
    1d56:	75 83       	std	Z+5, r23	; 0x05
    1d58:	64 83       	std	Z+4, r22	; 0x04
    u8g_UpdateRefHeight(u8g);
    1d5a:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <u8g_UpdateRefHeight>
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
    1d5e:	85 ef       	ldi	r24, 0xF5	; 245
    1d60:	9c e0       	ldi	r25, 0x0C	; 12
    1d62:	9e 8b       	std	Y+22, r25	; 0x16
    1d64:	8d 8b       	std	Y+21, r24	; 0x15
  {
    u8g->font = font;
    u8g_UpdateRefHeight(u8g);
    u8g_SetFontPosBaseline(u8g);
  }
}
    1d66:	df 91       	pop	r29
    1d68:	cf 91       	pop	r28
    1d6a:	08 95       	ret

00001d6c <u8g_init_data>:
  irgb.idx = idx;
  irgb.r = r;
  irgb.g = g;
  irgb.b = b;  
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}
    1d6c:	1f 93       	push	r17
    1d6e:	cf 93       	push	r28
    1d70:	df 93       	push	r29
    1d72:	ec 01       	movw	r28, r24
    1d74:	1d 82       	std	Y+5, r1	; 0x05
    1d76:	1c 82       	std	Y+4, r1	; 0x04
    1d78:	1f 82       	std	Y+7, r1	; 0x07
    1d7a:	1e 82       	std	Y+6, r1	; 0x06
    1d7c:	19 86       	std	Y+9, r1	; 0x09
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	88 87       	std	Y+8, r24	; 0x08
    1d82:	82 e2       	ldi	r24, 0x22	; 34
    1d84:	8a 87       	std	Y+10, r24	; 0x0a
    1d86:	1f 86       	std	Y+15, r1	; 0x0f
    1d88:	1e 86       	std	Y+14, r1	; 0x0e
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	b3 96       	adiw	r30, 0x23	; 35
    1d8e:	ce 01       	movw	r24, r28
    1d90:	c1 96       	adiw	r24, 0x31	; 49
    1d92:	2f ef       	ldi	r18, 0xFF	; 255
    1d94:	21 93       	st	Z+, r18
    1d96:	e8 17       	cp	r30, r24
    1d98:	f9 07       	cpc	r31, r25
    1d9a:	e1 f7       	brne	.-8      	; 0x1d94 <u8g_init_data+0x28>
    1d9c:	11 e0       	ldi	r17, 0x01	; 1
    1d9e:	18 a3       	std	Y+32, r17	; 0x20
    1da0:	ce 01       	movw	r24, r28
    1da2:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <u8g_SetFontPosBaseline>
    1da6:	1f 8b       	std	Y+23, r17	; 0x17
    1da8:	18 8e       	std	Y+24, r1	; 0x18
    1daa:	19 8e       	std	Y+25, r1	; 0x19
    1dac:	80 e4       	ldi	r24, 0x40	; 64
    1dae:	8a 8f       	std	Y+26, r24	; 0x1a
    1db0:	1b 8e       	std	Y+27, r1	; 0x1b
    1db2:	81 ee       	ldi	r24, 0xE1	; 225
    1db4:	90 e1       	ldi	r25, 0x10	; 16
    1db6:	9a ab       	std	Y+50, r25	; 0x32
    1db8:	89 ab       	std	Y+49, r24	; 0x31
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	1f 91       	pop	r17
    1dc0:	08 95       	ret

00001dc2 <u8g_call_dev_fn>:
    1dc2:	db 01       	movw	r26, r22
    1dc4:	ed 91       	ld	r30, X+
    1dc6:	fc 91       	ld	r31, X
    1dc8:	09 94       	ijmp

00001dca <u8g_InitLL>:
    1dca:	0f 93       	push	r16
    1dcc:	1f 93       	push	r17
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	ec 01       	movw	r28, r24
    1dd4:	8b 01       	movw	r16, r22
    1dd6:	e9 a9       	ldd	r30, Y+49	; 0x31
    1dd8:	fa a9       	ldd	r31, Y+50	; 0x32
    1dda:	82 e0       	ldi	r24, 0x02	; 2
    1ddc:	09 95       	icall
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	4a e0       	ldi	r20, 0x0A	; 10
    1de4:	b8 01       	movw	r22, r16
    1de6:	ce 01       	movw	r24, r28
    1de8:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <u8g_call_dev_fn>
    1dec:	18 2f       	mov	r17, r24
    1dee:	e9 a9       	ldd	r30, Y+49	; 0x31
    1df0:	fa a9       	ldd	r31, Y+50	; 0x32
    1df2:	83 e0       	ldi	r24, 0x03	; 3
    1df4:	09 95       	icall
    1df6:	e9 a9       	ldd	r30, Y+49	; 0x31
    1df8:	fa a9       	ldd	r31, Y+50	; 0x32
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	09 95       	icall
    1dfe:	81 2f       	mov	r24, r17
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	1f 91       	pop	r17
    1e06:	0f 91       	pop	r16
    1e08:	08 95       	ret

00001e0a <u8g_FirstPageLL>:
    1e0a:	0f 93       	push	r16
    1e0c:	1f 93       	push	r17
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
    1e12:	ec 01       	movw	r28, r24
    1e14:	8b 01       	movw	r16, r22
    1e16:	e9 a9       	ldd	r30, Y+49	; 0x31
    1e18:	fa a9       	ldd	r31, Y+50	; 0x32
    1e1a:	82 e0       	ldi	r24, 0x02	; 2
    1e1c:	09 95       	icall
    1e1e:	e9 a9       	ldd	r30, Y+49	; 0x31
    1e20:	fa a9       	ldd	r31, Y+50	; 0x32
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	09 95       	icall
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	44 e1       	ldi	r20, 0x14	; 20
    1e2c:	b8 01       	movw	r22, r16
    1e2e:	ce 01       	movw	r24, r28
    1e30:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <u8g_call_dev_fn>
    1e34:	9e 01       	movw	r18, r28
    1e36:	2d 5c       	subi	r18, 0xCD	; 205
    1e38:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3a:	47 e1       	ldi	r20, 0x17	; 23
    1e3c:	b8 01       	movw	r22, r16
    1e3e:	ce 01       	movw	r24, r28
    1e40:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <u8g_call_dev_fn>
    1e44:	e9 a9       	ldd	r30, Y+49	; 0x31
    1e46:	fa a9       	ldd	r31, Y+50	; 0x32
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	1f 91       	pop	r17
    1e50:	0f 91       	pop	r16
    1e52:	09 94       	ijmp

00001e54 <u8g_NextPageLL>:
    1e54:	ef 92       	push	r14
    1e56:	ff 92       	push	r15
    1e58:	1f 93       	push	r17
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	ec 01       	movw	r28, r24
    1e60:	7b 01       	movw	r14, r22
    1e62:	e9 a9       	ldd	r30, Y+49	; 0x31
    1e64:	fa a9       	ldd	r31, Y+50	; 0x32
    1e66:	82 e0       	ldi	r24, 0x02	; 2
    1e68:	09 95       	icall
    1e6a:	e9 a9       	ldd	r30, Y+49	; 0x31
    1e6c:	fa a9       	ldd	r31, Y+50	; 0x32
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	09 95       	icall
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	45 e1       	ldi	r20, 0x15	; 21
    1e78:	b7 01       	movw	r22, r14
    1e7a:	ce 01       	movw	r24, r28
    1e7c:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <u8g_call_dev_fn>
    1e80:	18 2f       	mov	r17, r24
    1e82:	88 23       	and	r24, r24
    1e84:	41 f0       	breq	.+16     	; 0x1e96 <u8g_NextPageLL+0x42>
    1e86:	9e 01       	movw	r18, r28
    1e88:	2d 5c       	subi	r18, 0xCD	; 205
    1e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8c:	47 e1       	ldi	r20, 0x17	; 23
    1e8e:	b7 01       	movw	r22, r14
    1e90:	ce 01       	movw	r24, r28
    1e92:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <u8g_call_dev_fn>
    1e96:	e9 a9       	ldd	r30, Y+49	; 0x31
    1e98:	fa a9       	ldd	r31, Y+50	; 0x32
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	09 95       	icall
    1e9e:	81 2f       	mov	r24, r17
    1ea0:	df 91       	pop	r29
    1ea2:	cf 91       	pop	r28
    1ea4:	1f 91       	pop	r17
    1ea6:	ff 90       	pop	r15
    1ea8:	ef 90       	pop	r14
    1eaa:	08 95       	ret

00001eac <u8g_GetWidthLL>:
    1eac:	cf 93       	push	r28
    1eae:	df 93       	push	r29
    1eb0:	1f 92       	push	r1
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	9e 01       	movw	r18, r28
    1eb8:	2f 5f       	subi	r18, 0xFF	; 255
    1eba:	3f 4f       	sbci	r19, 0xFF	; 255
    1ebc:	46 e4       	ldi	r20, 0x46	; 70
    1ebe:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <u8g_call_dev_fn>
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	0f 90       	pop	r0
    1ec6:	df 91       	pop	r29
    1ec8:	cf 91       	pop	r28
    1eca:	08 95       	ret

00001ecc <u8g_GetHeightLL>:
    1ecc:	cf 93       	push	r28
    1ece:	df 93       	push	r29
    1ed0:	1f 92       	push	r1
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    1ed6:	9e 01       	movw	r18, r28
    1ed8:	2f 5f       	subi	r18, 0xFF	; 255
    1eda:	3f 4f       	sbci	r19, 0xFF	; 255
    1edc:	47 e4       	ldi	r20, 0x47	; 71
    1ede:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <u8g_call_dev_fn>
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	0f 90       	pop	r0
    1ee6:	df 91       	pop	r29
    1ee8:	cf 91       	pop	r28
    1eea:	08 95       	ret

00001eec <u8g_GetModeLL>:
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	48 e4       	ldi	r20, 0x48	; 72
    1ef2:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <u8g_call_dev_fn>

00001ef6 <u8g_UpdateDimension>:
    1ef6:	cf 93       	push	r28
    1ef8:	df 93       	push	r29
    1efa:	ec 01       	movw	r28, r24
    1efc:	6a 81       	ldd	r22, Y+2	; 0x02
    1efe:	7b 81       	ldd	r23, Y+3	; 0x03
    1f00:	0e 94 56 0f 	call	0x1eac	; 0x1eac <u8g_GetWidthLL>
    1f04:	88 83       	st	Y, r24
    1f06:	6a 81       	ldd	r22, Y+2	; 0x02
    1f08:	7b 81       	ldd	r23, Y+3	; 0x03
    1f0a:	ce 01       	movw	r24, r28
    1f0c:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <u8g_GetHeightLL>
    1f10:	89 83       	std	Y+1, r24	; 0x01
    1f12:	6a 81       	ldd	r22, Y+2	; 0x02
    1f14:	7b 81       	ldd	r23, Y+3	; 0x03
    1f16:	ce 01       	movw	r24, r28
    1f18:	0e 94 76 0f 	call	0x1eec	; 0x1eec <u8g_GetModeLL>
    1f1c:	8b 87       	std	Y+11, r24	; 0x0b
    1f1e:	9e 01       	movw	r18, r28
    1f20:	2d 5c       	subi	r18, 0xCD	; 205
    1f22:	3f 4f       	sbci	r19, 0xFF	; 255
    1f24:	6a 81       	ldd	r22, Y+2	; 0x02
    1f26:	7b 81       	ldd	r23, Y+3	; 0x03
    1f28:	47 e1       	ldi	r20, 0x17	; 23
    1f2a:	ce 01       	movw	r24, r28
    1f2c:	df 91       	pop	r29
    1f2e:	cf 91       	pop	r28
    1f30:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <u8g_call_dev_fn>

00001f34 <u8g_Begin>:
    1f34:	cf 93       	push	r28
    1f36:	df 93       	push	r29
    1f38:	ec 01       	movw	r28, r24
    1f3a:	6a 81       	ldd	r22, Y+2	; 0x02
    1f3c:	7b 81       	ldd	r23, Y+3	; 0x03
    1f3e:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <u8g_InitLL>
    1f42:	88 23       	and	r24, r24
    1f44:	21 f0       	breq	.+8      	; 0x1f4e <u8g_Begin+0x1a>
    1f46:	ce 01       	movw	r24, r28
    1f48:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <u8g_UpdateDimension>
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	08 95       	ret

00001f54 <u8g_InitI2C>:
    1f54:	ef 92       	push	r14
    1f56:	ff 92       	push	r15
    1f58:	1f 93       	push	r17
    1f5a:	cf 93       	push	r28
    1f5c:	df 93       	push	r29
    1f5e:	ec 01       	movw	r28, r24
    1f60:	7b 01       	movw	r14, r22
    1f62:	14 2f       	mov	r17, r20
    1f64:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <u8g_init_data>
    1f68:	fb 82       	std	Y+3, r15	; 0x03
    1f6a:	ea 82       	std	Y+2, r14	; 0x02
    1f6c:	1e a7       	std	Y+46, r17	; 0x2e
    1f6e:	ce 01       	movw	r24, r28
    1f70:	df 91       	pop	r29
    1f72:	cf 91       	pop	r28
    1f74:	1f 91       	pop	r17
    1f76:	ff 90       	pop	r15
    1f78:	ef 90       	pop	r14
    1f7a:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <u8g_Begin>

00001f7e <u8g_FirstPage>:
    1f7e:	fc 01       	movw	r30, r24
    1f80:	62 81       	ldd	r22, Z+2	; 0x02
    1f82:	73 81       	ldd	r23, Z+3	; 0x03
    1f84:	0c 94 05 0f 	jmp	0x1e0a	; 0x1e0a <u8g_FirstPageLL>

00001f88 <u8g_NextPage>:
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	ec 01       	movw	r28, r24
    1f8e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1f90:	ff 85       	ldd	r31, Y+15	; 0x0f
    1f92:	30 97       	sbiw	r30, 0x00	; 0
    1f94:	09 f0       	breq	.+2      	; 0x1f98 <u8g_NextPage+0x10>
    1f96:	09 95       	icall
    1f98:	6a 81       	ldd	r22, Y+2	; 0x02
    1f9a:	7b 81       	ldd	r23, Y+3	; 0x03
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	df 91       	pop	r29
    1fa0:	cf 91       	pop	r28
    1fa2:	0c 94 2a 0f 	jmp	0x1e54	; 0x1e54 <u8g_NextPageLL>

00001fa6 <u8g_Draw8Pixel>:
    1fa6:	0f 93       	push	r16
    1fa8:	fc 01       	movw	r30, r24
    1faa:	82 81       	ldd	r24, Z+2	; 0x02
    1fac:	93 81       	ldd	r25, Z+3	; 0x03
    1fae:	64 8f       	std	Z+28, r22	; 0x1c
    1fb0:	45 8f       	std	Z+29, r20	; 0x1d
    1fb2:	27 8f       	std	Z+31, r18	; 0x1f
    1fb4:	06 8f       	std	Z+30, r16	; 0x1e
    1fb6:	9f 01       	movw	r18, r30
    1fb8:	24 5e       	subi	r18, 0xE4	; 228
    1fba:	3f 4f       	sbci	r19, 0xFF	; 255
    1fbc:	4b e3       	ldi	r20, 0x3B	; 59
    1fbe:	bc 01       	movw	r22, r24
    1fc0:	cf 01       	movw	r24, r30
    1fc2:	0f 91       	pop	r16
    1fc4:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <u8g_call_dev_fn>

00001fc8 <u8g_SetColorIndex>:

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
    1fc8:	fc 01       	movw	r30, r24
    1fca:	60 a3       	std	Z+32, r22	; 0x20
    1fcc:	08 95       	ret

00001fce <u8g_pb_Clear>:
  tmp = bbx->x;
  tmp += bbx->w;
  tmp--;
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}
    1fce:	dc 01       	movw	r26, r24
    1fd0:	16 96       	adiw	r26, 0x06	; 6
    1fd2:	ed 91       	ld	r30, X+
    1fd4:	fc 91       	ld	r31, X
    1fd6:	17 97       	sbiw	r26, 0x07	; 7
    1fd8:	15 96       	adiw	r26, 0x05	; 5
    1fda:	8c 91       	ld	r24, X
    1fdc:	9f 01       	movw	r18, r30
    1fde:	28 0f       	add	r18, r24
    1fe0:	31 1d       	adc	r19, r1
    1fe2:	c9 01       	movw	r24, r18
    1fe4:	11 92       	st	Z+, r1
    1fe6:	e8 17       	cp	r30, r24
    1fe8:	f9 07       	cpc	r31, r25
    1fea:	e1 f7       	brne	.-8      	; 0x1fe4 <u8g_pb_Clear+0x16>
    1fec:	08 95       	ret

00001fee <u8g_pb_IsYIntersection>:
    1fee:	31 e0       	ldi	r19, 0x01	; 1
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	23 81       	ldd	r18, Z+3	; 0x03
    1ff4:	26 17       	cp	r18, r22
    1ff6:	08 f4       	brcc	.+2      	; 0x1ffa <u8g_pb_IsYIntersection+0xc>
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	21 e0       	ldi	r18, 0x01	; 1
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	82 81       	ldd	r24, Z+2	; 0x02
    2000:	48 17       	cp	r20, r24
    2002:	08 f4       	brcc	.+2      	; 0x2006 <u8g_pb_IsYIntersection+0x18>
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	91 e0       	ldi	r25, 0x01	; 1
    2008:	46 17       	cp	r20, r22
    200a:	08 f0       	brcs	.+2      	; 0x200e <u8g_pb_IsYIntersection+0x20>
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	89 2f       	mov	r24, r25
    2010:	83 2b       	or	r24, r19
    2012:	28 23       	and	r18, r24
    2014:	83 2f       	mov	r24, r19
    2016:	89 23       	and	r24, r25
    2018:	82 2b       	or	r24, r18
    201a:	08 95       	ret

0000201c <u8g_pb_GetPageBox>:

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
    201c:	dc 01       	movw	r26, r24
    201e:	fb 01       	movw	r30, r22
  box->x0 = 0;
    2020:	10 82       	st	Z, r1
  box->y0 = pb->p.page_y0;
    2022:	12 96       	adiw	r26, 0x02	; 2
    2024:	8c 91       	ld	r24, X
    2026:	12 97       	sbiw	r26, 0x02	; 2
    2028:	81 83       	std	Z+1, r24	; 0x01
  box->x1 = pb->width;
  box->x1--;
    202a:	15 96       	adiw	r26, 0x05	; 5
    202c:	8c 91       	ld	r24, X
    202e:	15 97       	sbiw	r26, 0x05	; 5
    2030:	81 50       	subi	r24, 0x01	; 1
    2032:	82 83       	std	Z+2, r24	; 0x02
  box->y1 = pb->p.page_y1;
    2034:	13 96       	adiw	r26, 0x03	; 3
    2036:	8c 91       	ld	r24, X
    2038:	83 83       	std	Z+3, r24	; 0x03
    203a:	08 95       	ret

0000203c <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    203c:	fb 01       	movw	r30, r22
    203e:	41 81       	ldd	r20, Z+1	; 0x01
  v1 = v0;
  switch( arg_pixel->dir )
    2040:	23 81       	ldd	r18, Z+3	; 0x03
    2042:	21 30       	cpi	r18, 0x01	; 1
    2044:	29 f0       	breq	.+10     	; 0x2050 <u8g_pb_Is8PixelVisible+0x14>
    2046:	23 30       	cpi	r18, 0x03	; 3
    2048:	31 f4       	brne	.+12     	; 0x2056 <u8g_pb_Is8PixelVisible+0x1a>
      v1 += 8;          /* this is independent from the page height */
      break;
    case 2:  
      break;
    case 3: 
      v0 -= 8;
    204a:	68 ef       	ldi	r22, 0xF8	; 248
    204c:	64 0f       	add	r22, r20
      break;
    204e:	04 c0       	rjmp	.+8      	; 0x2058 <u8g_pb_Is8PixelVisible+0x1c>


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    2050:	64 2f       	mov	r22, r20
  switch( arg_pixel->dir )
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
    2052:	48 5f       	subi	r20, 0xF8	; 248
      break;
    2054:	01 c0       	rjmp	.+2      	; 0x2058 <u8g_pb_Is8PixelVisible+0x1c>


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    2056:	64 2f       	mov	r22, r20
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
    2058:	0c 94 f7 0f 	jmp	0x1fee	; 0x1fee <u8g_pb_IsYIntersection>

0000205c <u8g_pb_WriteBuffer>:
}



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
    205c:	fc 01       	movw	r30, r24
    205e:	cb 01       	movw	r24, r22
    2060:	ba 01       	movw	r22, r20
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
    2062:	26 81       	ldd	r18, Z+6	; 0x06
    2064:	37 81       	ldd	r19, Z+7	; 0x07
    2066:	45 81       	ldd	r20, Z+5	; 0x05
    2068:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <u8g_WriteSequence>

0000206c <u8g_pb8v1_set_pixel>:
      case 2: arg_pixel->x--; break;
      case 3: arg_pixel->y--; break;
    }
    pixel <<= 1;
  } while( pixel != 0  );
}
    206c:	dc 01       	movw	r26, r24
    206e:	16 96       	adiw	r26, 0x06	; 6
    2070:	ed 91       	ld	r30, X+
    2072:	fc 91       	ld	r31, X
    2074:	17 97       	sbiw	r26, 0x07	; 7
    2076:	12 96       	adiw	r26, 0x02	; 2
    2078:	8c 91       	ld	r24, X
    207a:	48 1b       	sub	r20, r24
    207c:	47 70       	andi	r20, 0x07	; 7
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	01 c0       	rjmp	.+2      	; 0x2086 <u8g_pb8v1_set_pixel+0x1a>
    2084:	88 0f       	add	r24, r24
    2086:	4a 95       	dec	r20
    2088:	ea f7       	brpl	.-6      	; 0x2084 <u8g_pb8v1_set_pixel+0x18>
    208a:	e6 0f       	add	r30, r22
    208c:	f1 1d       	adc	r31, r1
    208e:	30 81       	ld	r19, Z
    2090:	22 23       	and	r18, r18
    2092:	11 f0       	breq	.+4      	; 0x2098 <u8g_pb8v1_set_pixel+0x2c>
    2094:	83 2b       	or	r24, r19
    2096:	02 c0       	rjmp	.+4      	; 0x209c <u8g_pb8v1_set_pixel+0x30>
    2098:	80 95       	com	r24
    209a:	83 23       	and	r24, r19
    209c:	80 83       	st	Z, r24
    209e:	08 95       	ret

000020a0 <u8g_pb8v1_SetPixel>:
    20a0:	fb 01       	movw	r30, r22
    20a2:	41 81       	ldd	r20, Z+1	; 0x01
    20a4:	dc 01       	movw	r26, r24
    20a6:	12 96       	adiw	r26, 0x02	; 2
    20a8:	2c 91       	ld	r18, X
    20aa:	12 97       	sbiw	r26, 0x02	; 2
    20ac:	42 17       	cp	r20, r18
    20ae:	68 f0       	brcs	.+26     	; 0x20ca <u8g_pb8v1_SetPixel+0x2a>
    20b0:	13 96       	adiw	r26, 0x03	; 3
    20b2:	2c 91       	ld	r18, X
    20b4:	13 97       	sbiw	r26, 0x03	; 3
    20b6:	24 17       	cp	r18, r20
    20b8:	40 f0       	brcs	.+16     	; 0x20ca <u8g_pb8v1_SetPixel+0x2a>
    20ba:	60 81       	ld	r22, Z
    20bc:	15 96       	adiw	r26, 0x05	; 5
    20be:	2c 91       	ld	r18, X
    20c0:	62 17       	cp	r22, r18
    20c2:	18 f4       	brcc	.+6      	; 0x20ca <u8g_pb8v1_SetPixel+0x2a>
    20c4:	24 81       	ldd	r18, Z+4	; 0x04
    20c6:	0c 94 36 10 	jmp	0x206c	; 0x206c <u8g_pb8v1_set_pixel>
    20ca:	08 95       	ret

000020cc <u8g_pb8v1_Set8PixelOpt2>:


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
    20cc:	cf 92       	push	r12
    20ce:	df 92       	push	r13
    20d0:	ff 92       	push	r15
    20d2:	0f 93       	push	r16
    20d4:	1f 93       	push	r17
    20d6:	cf 93       	push	r28
    20d8:	df 93       	push	r29
    20da:	6c 01       	movw	r12, r24
    20dc:	eb 01       	movw	r28, r22
  register uint8_t pixel = arg_pixel->pixel;
    20de:	fa 80       	ldd	r15, Y+2	; 0x02
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
    20e0:	8b 81       	ldd	r24, Y+3	; 0x03
    20e2:	81 30       	cpi	r24, 0x01	; 1
    20e4:	51 f0       	breq	.+20     	; 0x20fa <u8g_pb8v1_Set8PixelOpt2+0x2e>
    20e6:	30 f0       	brcs	.+12     	; 0x20f4 <u8g_pb8v1_Set8PixelOpt2+0x28>
    20e8:	82 30       	cpi	r24, 0x02	; 2
    20ea:	49 f0       	breq	.+18     	; 0x20fe <u8g_pb8v1_Set8PixelOpt2+0x32>
    20ec:	83 30       	cpi	r24, 0x03	; 3
    20ee:	51 f4       	brne	.+20     	; 0x2104 <u8g_pb8v1_Set8PixelOpt2+0x38>
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    case 3: dy--; break;
    20f0:	1f ef       	ldi	r17, 0xFF	; 255
    20f2:	09 c0       	rjmp	.+18     	; 0x2106 <u8g_pb8v1_Set8PixelOpt2+0x3a>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    20f4:	10 e0       	ldi	r17, 0x00	; 0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    20f6:	01 e0       	ldi	r16, 0x01	; 1
    20f8:	07 c0       	rjmp	.+14     	; 0x2108 <u8g_pb8v1_Set8PixelOpt2+0x3c>
    case 1: dy++; break;
    20fa:	11 e0       	ldi	r17, 0x01	; 1
    20fc:	04 c0       	rjmp	.+8      	; 0x2106 <u8g_pb8v1_Set8PixelOpt2+0x3a>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    20fe:	10 e0       	ldi	r17, 0x00	; 0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    2100:	0f ef       	ldi	r16, 0xFF	; 255
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <u8g_pb8v1_Set8PixelOpt2+0x3c>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    2104:	10 e0       	ldi	r17, 0x00	; 0


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    2106:	00 e0       	ldi	r16, 0x00	; 0
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
    2108:	f7 fe       	sbrs	r15, 7
    210a:	04 c0       	rjmp	.+8      	; 0x2114 <u8g_pb8v1_Set8PixelOpt2+0x48>
      u8g_pb8v1_SetPixel(b, arg_pixel);
    210c:	be 01       	movw	r22, r28
    210e:	c6 01       	movw	r24, r12
    2110:	0e 94 50 10 	call	0x20a0	; 0x20a0 <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
    2114:	88 81       	ld	r24, Y
    2116:	80 0f       	add	r24, r16
    2118:	88 83       	st	Y, r24
    arg_pixel->y += dy;
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	81 0f       	add	r24, r17
    211e:	89 83       	std	Y+1, r24	; 0x01
    pixel <<= 1;
    2120:	ff 0c       	add	r15, r15
  } while( pixel != 0  );
    2122:	91 f7       	brne	.-28     	; 0x2108 <u8g_pb8v1_Set8PixelOpt2+0x3c>
  
}
    2124:	df 91       	pop	r29
    2126:	cf 91       	pop	r28
    2128:	1f 91       	pop	r17
    212a:	0f 91       	pop	r16
    212c:	ff 90       	pop	r15
    212e:	df 90       	pop	r13
    2130:	cf 90       	pop	r12
    2132:	08 95       	ret

00002134 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    2134:	0f 93       	push	r16
    2136:	1f 93       	push	r17
    2138:	cf 93       	push	r28
    213a:	df 93       	push	r29
    213c:	89 01       	movw	r16, r18
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    213e:	fb 01       	movw	r30, r22
    2140:	c2 81       	ldd	r28, Z+2	; 0x02
    2142:	d3 81       	ldd	r29, Z+3	; 0x03
  switch(msg)
    2144:	42 33       	cpi	r20, 0x32	; 50
    2146:	f9 f0       	breq	.+62     	; 0x2186 <u8g_dev_pb8v1_base_fn+0x52>
    2148:	68 f4       	brcc	.+26     	; 0x2164 <u8g_dev_pb8v1_base_fn+0x30>
    214a:	45 31       	cpi	r20, 0x15	; 21
    214c:	09 f1       	breq	.+66     	; 0x2190 <u8g_dev_pb8v1_base_fn+0x5c>
    214e:	47 31       	cpi	r20, 0x17	; 23
    2150:	41 f1       	breq	.+80     	; 0x21a2 <u8g_dev_pb8v1_base_fn+0x6e>
    2152:	44 31       	cpi	r20, 0x14	; 20
    2154:	81 f5       	brne	.+96     	; 0x21b6 <u8g_dev_pb8v1_base_fn+0x82>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
    2156:	ce 01       	movw	r24, r28
    2158:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
    215c:	ce 01       	movw	r24, r28
    215e:	0e 94 c4 12 	call	0x2588	; 0x2588 <u8g_page_First>
    2162:	29 c0       	rjmp	.+82     	; 0x21b6 <u8g_dev_pb8v1_base_fn+0x82>
}

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
    2164:	46 34       	cpi	r20, 0x46	; 70
    2166:	11 f1       	breq	.+68     	; 0x21ac <u8g_dev_pb8v1_base_fn+0x78>
    2168:	47 34       	cpi	r20, 0x47	; 71
    216a:	11 f1       	breq	.+68     	; 0x21b0 <u8g_dev_pb8v1_base_fn+0x7c>
    216c:	4b 33       	cpi	r20, 0x3B	; 59
    216e:	19 f5       	brne	.+70     	; 0x21b6 <u8g_dev_pb8v1_base_fn+0x82>
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
    2170:	b9 01       	movw	r22, r18
    2172:	ce 01       	movw	r24, r28
    2174:	0e 94 1e 10 	call	0x203c	; 0x203c <u8g_pb_Is8PixelVisible>
    2178:	88 23       	and	r24, r24
    217a:	e9 f0       	breq	.+58     	; 0x21b6 <u8g_dev_pb8v1_base_fn+0x82>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
    217c:	b8 01       	movw	r22, r16
    217e:	ce 01       	movw	r24, r28
    2180:	0e 94 66 10 	call	0x20cc	; 0x20cc <u8g_pb8v1_Set8PixelOpt2>
    2184:	18 c0       	rjmp	.+48     	; 0x21b6 <u8g_dev_pb8v1_base_fn+0x82>
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
    2186:	b9 01       	movw	r22, r18
    2188:	ce 01       	movw	r24, r28
    218a:	0e 94 50 10 	call	0x20a0	; 0x20a0 <u8g_pb8v1_SetPixel>
    218e:	13 c0       	rjmp	.+38     	; 0x21b6 <u8g_dev_pb8v1_base_fn+0x82>
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
    2190:	ce 01       	movw	r24, r28
    2192:	0e 94 cb 12 	call	0x2596	; 0x2596 <u8g_page_Next>
    2196:	88 23       	and	r24, r24
    2198:	79 f0       	breq	.+30     	; 0x21b8 <u8g_dev_pb8v1_base_fn+0x84>
        return 0;
      u8g_pb_Clear(pb);
    219a:	ce 01       	movw	r24, r28
    219c:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <u8g_pb_Clear>
    21a0:	0a c0       	rjmp	.+20     	; 0x21b6 <u8g_dev_pb8v1_base_fn+0x82>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
    21a2:	b9 01       	movw	r22, r18
    21a4:	ce 01       	movw	r24, r28
    21a6:	0e 94 0e 10 	call	0x201c	; 0x201c <u8g_pb_GetPageBox>
    21aa:	05 c0       	rjmp	.+10     	; 0x21b6 <u8g_dev_pb8v1_base_fn+0x82>
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
    21ac:	8d 81       	ldd	r24, Y+5	; 0x05
    21ae:	01 c0       	rjmp	.+2      	; 0x21b2 <u8g_dev_pb8v1_base_fn+0x7e>
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
    21b2:	f8 01       	movw	r30, r16
    21b4:	80 83       	st	Z, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    21b6:	81 e0       	ldi	r24, 0x01	; 1
}
    21b8:	df 91       	pop	r29
    21ba:	cf 91       	pop	r28
    21bc:	1f 91       	pop	r17
    21be:	0f 91       	pop	r16
    21c0:	08 95       	ret

000021c2 <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
    21c2:	08 95       	ret

000021c4 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    21c4:	0f 93       	push	r16
    21c6:	fc 01       	movw	r30, r24
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
    21c8:	01 50       	subi	r16, 0x01	; 1
    21ca:	04 0f       	add	r16, r20
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    21cc:	84 a9       	ldd	r24, Z+52	; 0x34
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    21ce:	96 a9       	ldd	r25, Z+54	; 0x36
    21d0:	94 17       	cp	r25, r20
    21d2:	18 f0       	brcs	.+6      	; 0x21da <u8g_IsBBXIntersection+0x16>
  {
    if ( v1 >= a0 )
    21d4:	08 17       	cp	r16, r24
    21d6:	28 f4       	brcc	.+10     	; 0x21e2 <u8g_IsBBXIntersection+0x1e>
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <u8g_IsBBXIntersection+0x1a>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    21da:	08 17       	cp	r16, r24
    21dc:	50 f0       	brcs	.+20     	; 0x21f2 <u8g_IsBBXIntersection+0x2e>
    {
      if ( v0 > v1 )
    21de:	04 17       	cp	r16, r20
    21e0:	40 f4       	brcc	.+16     	; 0x21f2 <u8g_IsBBXIntersection+0x2e>
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
    21e2:	21 50       	subi	r18, 0x01	; 1
    21e4:	26 0f       	add	r18, r22
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
    21e6:	83 a9       	ldd	r24, Z+51	; 0x33
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    21e8:	95 a9       	ldd	r25, Z+53	; 0x35
    21ea:	96 17       	cp	r25, r22
    21ec:	20 f4       	brcc	.+8      	; 0x21f6 <u8g_IsBBXIntersection+0x32>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    21ee:	28 17       	cp	r18, r24
    21f0:	20 f4       	brcc	.+8      	; 0x21fa <u8g_IsBBXIntersection+0x36>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	07 c0       	rjmp	.+14     	; 0x2204 <u8g_IsBBXIntersection+0x40>
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    21f6:	28 17       	cp	r18, r24
    21f8:	20 f4       	brcc	.+8      	; 0x2202 <u8g_IsBBXIntersection+0x3e>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	26 17       	cp	r18, r22
    21fe:	10 f0       	brcs	.+4      	; 0x2204 <u8g_IsBBXIntersection+0x40>
    2200:	f8 cf       	rjmp	.-16     	; 0x21f2 <u8g_IsBBXIntersection+0x2e>
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    {
      return 1;
    2202:	81 e0       	ldi	r24, 0x01	; 1
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
}
    2204:	0f 91       	pop	r16
    2206:	08 95       	ret

00002208 <u8g_InitCom>:
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
}

uint8_t u8g_WriteSequenceP(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, const uint8_t *seq)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ_P, cnt, (void *)seq);
    2208:	db 01       	movw	r26, r22
    220a:	14 96       	adiw	r26, 0x04	; 4
    220c:	ed 91       	ld	r30, X+
    220e:	fc 91       	ld	r31, X
    2210:	15 97       	sbiw	r26, 0x05	; 5
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	61 e0       	ldi	r22, 0x01	; 1
    2218:	09 94       	ijmp

0000221a <u8g_SetChipSelect>:
    221a:	db 01       	movw	r26, r22
    221c:	14 96       	adiw	r26, 0x04	; 4
    221e:	ed 91       	ld	r30, X+
    2220:	fc 91       	ld	r31, X
    2222:	15 97       	sbiw	r26, 0x05	; 5
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	63 e0       	ldi	r22, 0x03	; 3
    222a:	09 94       	ijmp

0000222c <u8g_SetResetLow>:
    222c:	db 01       	movw	r26, r22
    222e:	14 96       	adiw	r26, 0x04	; 4
    2230:	ed 91       	ld	r30, X+
    2232:	fc 91       	ld	r31, X
    2234:	15 97       	sbiw	r26, 0x05	; 5
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e0       	ldi	r20, 0x00	; 0
    223c:	64 e0       	ldi	r22, 0x04	; 4
    223e:	09 94       	ijmp

00002240 <u8g_SetResetHigh>:
    2240:	db 01       	movw	r26, r22
    2242:	14 96       	adiw	r26, 0x04	; 4
    2244:	ed 91       	ld	r30, X+
    2246:	fc 91       	ld	r31, X
    2248:	15 97       	sbiw	r26, 0x05	; 5
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	41 e0       	ldi	r20, 0x01	; 1
    2250:	64 e0       	ldi	r22, 0x04	; 4
    2252:	09 94       	ijmp

00002254 <u8g_SetAddress>:
    2254:	db 01       	movw	r26, r22
    2256:	14 96       	adiw	r26, 0x04	; 4
    2258:	ed 91       	ld	r30, X+
    225a:	fc 91       	ld	r31, X
    225c:	15 97       	sbiw	r26, 0x05	; 5
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	62 e0       	ldi	r22, 0x02	; 2
    2264:	09 94       	ijmp

00002266 <u8g_WriteByte>:
    2266:	db 01       	movw	r26, r22
    2268:	14 96       	adiw	r26, 0x04	; 4
    226a:	ed 91       	ld	r30, X+
    226c:	fc 91       	ld	r31, X
    226e:	15 97       	sbiw	r26, 0x05	; 5
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	65 e0       	ldi	r22, 0x05	; 5
    2276:	09 94       	ijmp

00002278 <u8g_WriteSequence>:
    2278:	db 01       	movw	r26, r22
    227a:	14 96       	adiw	r26, 0x04	; 4
    227c:	ed 91       	ld	r30, X+
    227e:	fc 91       	ld	r31, X
    2280:	15 97       	sbiw	r26, 0x05	; 5
    2282:	66 e0       	ldi	r22, 0x06	; 6
    2284:	09 94       	ijmp

00002286 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
    2286:	cf 92       	push	r12
    2288:	df 92       	push	r13
    228a:	ef 92       	push	r14
    228c:	ff 92       	push	r15
    228e:	0f 93       	push	r16
    2290:	1f 93       	push	r17
    2292:	cf 93       	push	r28
    2294:	df 93       	push	r29
    2296:	8c 01       	movw	r16, r24
    2298:	6b 01       	movw	r12, r22
    229a:	7a 01       	movw	r14, r20
  uint8_t is_escape = 0;
    229c:	80 e0       	ldi	r24, 0x00	; 0
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
    229e:	f7 01       	movw	r30, r14
    22a0:	c4 91       	lpm	r28, Z
    if ( is_escape == 0 )
    22a2:	81 11       	cpse	r24, r1
    22a4:	0a c0       	rjmp	.+20     	; 0x22ba <u8g_WriteEscSeqP+0x34>
    {
      if ( value != 255 )
    22a6:	cf 3f       	cpi	r28, 0xFF	; 255
    22a8:	e9 f1       	breq	.+122    	; 0x2324 <u8g_WriteEscSeqP+0x9e>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    22aa:	4c 2f       	mov	r20, r28
    22ac:	b6 01       	movw	r22, r12
    22ae:	c8 01       	movw	r24, r16
    22b0:	0e 94 33 11 	call	0x2266	; 0x2266 <u8g_WriteByte>
    22b4:	81 11       	cpse	r24, r1
    22b6:	2f c0       	rjmp	.+94     	; 0x2316 <u8g_WriteEscSeqP+0x90>
    22b8:	3a c0       	rjmp	.+116    	; 0x232e <u8g_WriteEscSeqP+0xa8>
        is_escape = 1;
      }
    }
    else
    {
      if ( value == 255 )
    22ba:	cf 3f       	cpi	r28, 0xFF	; 255
    22bc:	11 f4       	brne	.+4      	; 0x22c2 <u8g_WriteEscSeqP+0x3c>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    22be:	4f ef       	ldi	r20, 0xFF	; 255
    22c0:	f5 cf       	rjmp	.-22     	; 0x22ac <u8g_WriteEscSeqP+0x26>
          return 0;
      }
      else if ( value == 254 )
    22c2:	ce 3f       	cpi	r28, 0xFE	; 254
    22c4:	b1 f1       	breq	.+108    	; 0x2332 <u8g_WriteEscSeqP+0xac>
      {
        break;
      }
      else if ( value >= 0x0f0 )
    22c6:	c0 3f       	cpi	r28, 0xF0	; 240
    22c8:	30 f5       	brcc	.+76     	; 0x2316 <u8g_WriteEscSeqP+0x90>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
    22ca:	c0 3e       	cpi	r28, 0xE0	; 224
    22cc:	38 f0       	brcs	.+14     	; 0x22dc <u8g_WriteEscSeqP+0x56>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
    22ce:	4c 2f       	mov	r20, r28
    22d0:	4f 70       	andi	r20, 0x0F	; 15
    22d2:	b6 01       	movw	r22, r12
    22d4:	c8 01       	movw	r24, r16
    22d6:	0e 94 2a 11 	call	0x2254	; 0x2254 <u8g_SetAddress>
    22da:	1d c0       	rjmp	.+58     	; 0x2316 <u8g_WriteEscSeqP+0x90>
      }
      else if ( value >= 0xd0 )
    22dc:	c0 3d       	cpi	r28, 0xD0	; 208
    22de:	38 f0       	brcs	.+14     	; 0x22ee <u8g_WriteEscSeqP+0x68>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
    22e0:	4c 2f       	mov	r20, r28
    22e2:	4f 70       	andi	r20, 0x0F	; 15
    22e4:	b6 01       	movw	r22, r12
    22e6:	c8 01       	movw	r24, r16
    22e8:	0e 94 0d 11 	call	0x221a	; 0x221a <u8g_SetChipSelect>
    22ec:	14 c0       	rjmp	.+40     	; 0x2316 <u8g_WriteEscSeqP+0x90>
      }
      else if ( value >= 0xc0 )
    22ee:	c0 3c       	cpi	r28, 0xC0	; 192
    22f0:	a0 f0       	brcs	.+40     	; 0x231a <u8g_WriteEscSeqP+0x94>
      {
        u8g_SetResetLow(u8g, dev);
    22f2:	b6 01       	movw	r22, r12
    22f4:	c8 01       	movw	r24, r16
    22f6:	0e 94 16 11 	call	0x222c	; 0x222c <u8g_SetResetLow>
        value &= 0x0f;
        value <<= 4;
    22fa:	c2 95       	swap	r28
    22fc:	c0 7f       	andi	r28, 0xF0	; 240
        value+=2;
        u8g_Delay(value);
    22fe:	ce 5f       	subi	r28, 0xFE	; 254
    2300:	d0 e0       	ldi	r29, 0x00	; 0
    2302:	ce 01       	movw	r24, r28
    2304:	0e 94 ba 12 	call	0x2574	; 0x2574 <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
    2308:	b6 01       	movw	r22, r12
    230a:	c8 01       	movw	r24, r16
    230c:	0e 94 20 11 	call	0x2240	; 0x2240 <u8g_SetResetHigh>
        u8g_Delay(value);
    2310:	ce 01       	movw	r24, r28
    2312:	0e 94 ba 12 	call	0x2574	; 0x2574 <u8g_Delay>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	06 c0       	rjmp	.+12     	; 0x2326 <u8g_WriteEscSeqP+0xa0>
      else if ( value >= 0xbe )
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
    231a:	c7 fd       	sbrc	r28, 7
    231c:	fc cf       	rjmp	.-8      	; 0x2316 <u8g_WriteEscSeqP+0x90>
      {
        u8g_Delay(value);
    231e:	8c 2f       	mov	r24, r28
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	f7 cf       	rjmp	.-18     	; 0x2312 <u8g_WriteEscSeqP+0x8c>
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    2324:	81 e0       	ldi	r24, 0x01	; 1
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    }
    esc_seq++;
    2326:	ff ef       	ldi	r31, 0xFF	; 255
    2328:	ef 1a       	sub	r14, r31
    232a:	ff 0a       	sbc	r15, r31
  }
    232c:	b8 cf       	rjmp	.-144    	; 0x229e <u8g_WriteEscSeqP+0x18>
    if ( is_escape == 0 )
    {
      if ( value != 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	01 c0       	rjmp	.+2      	; 0x2334 <u8g_WriteEscSeqP+0xae>
      }
      is_escape = 0;
    }
    esc_seq++;
  }
  return 1;
    2332:	81 e0       	ldi	r24, 0x01	; 1
}
    2334:	df 91       	pop	r29
    2336:	cf 91       	pop	r28
    2338:	1f 91       	pop	r17
    233a:	0f 91       	pop	r16
    233c:	ff 90       	pop	r15
    233e:	ef 90       	pop	r14
    2340:	df 90       	pop	r13
    2342:	cf 90       	pop	r12
    2344:	08 95       	ret

00002346 <u8g_com_arduino_ssd_start_sequence>:
//#define I2C_CMD_MODE  0x080
#define I2C_CMD_MODE    0x000
#define I2C_DATA_MODE   0x040

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
    2346:	cf 93       	push	r28
    2348:	df 93       	push	r29
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    234a:	fc 01       	movw	r30, r24
    234c:	23 a5       	ldd	r18, Z+43	; 0x2b
    234e:	22 23       	and	r18, r18
    2350:	81 f0       	breq	.+32     	; 0x2372 <u8g_com_arduino_ssd_start_sequence+0x2c>
    2352:	ec 01       	movw	r28, r24
    return 1;

  /* setup bus, might be a repeated start */
  if ( u8g_i2c_start(I2C_SLA) == 0 )
    2354:	88 e7       	ldi	r24, 0x78	; 120
    2356:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <u8g_i2c_start>
    235a:	81 11       	cpse	r24, r1
    235c:	02 c0       	rjmp	.+4      	; 0x2362 <u8g_com_arduino_ssd_start_sequence+0x1c>
    return 0;
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	09 c0       	rjmp	.+18     	; 0x2374 <u8g_com_arduino_ssd_start_sequence+0x2e>
  if ( u8g->pin_list[U8G_PI_A0_STATE] == 0 )
    2362:	8e a1       	ldd	r24, Y+38	; 0x26
    2364:	81 11       	cpse	r24, r1
    if ( u8g_i2c_send_byte(I2C_CMD_MODE) == 0 )
      return 0;
  }
  else
  {
    if ( u8g_i2c_send_byte(I2C_DATA_MODE) == 0 )
    2366:	80 e4       	ldi	r24, 0x40	; 64
    2368:	0e 94 92 12 	call	0x2524	; 0x2524 <u8g_i2c_send_byte>
    236c:	88 23       	and	r24, r24
    236e:	b9 f3       	breq	.-18     	; 0x235e <u8g_com_arduino_ssd_start_sequence+0x18>
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
    2370:	1b a6       	std	Y+43, r1	; 0x2b

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    return 1;
    2372:	81 e0       	ldi	r24, 0x01	; 1
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
  return 1;
}
    2374:	df 91       	pop	r29
    2376:	cf 91       	pop	r28
    2378:	08 95       	ret

0000237a <u8g_com_arduino_ssd_i2c_fn>:

uint8_t u8g_com_arduino_ssd_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
    237a:	0f 93       	push	r16
    237c:	1f 93       	push	r17
    237e:	cf 93       	push	r28
    2380:	c4 2f       	mov	r28, r20
    2382:	89 01       	movw	r16, r18
  switch(msg)
    2384:	63 30       	cpi	r22, 0x03	; 3
    2386:	c1 f0       	breq	.+48     	; 0x23b8 <u8g_com_arduino_ssd_i2c_fn+0x3e>
    2388:	50 f4       	brcc	.+20     	; 0x239e <u8g_com_arduino_ssd_i2c_fn+0x24>
    238a:	61 30       	cpi	r22, 0x01	; 1
    238c:	81 f0       	breq	.+32     	; 0x23ae <u8g_com_arduino_ssd_i2c_fn+0x34>
    238e:	62 30       	cpi	r22, 0x02	; 2
    2390:	09 f0       	breq	.+2      	; 0x2394 <u8g_com_arduino_ssd_i2c_fn+0x1a>
    2392:	48 c0       	rjmp	.+144    	; 0x2424 <u8g_com_arduino_ssd_i2c_fn+0xaa>
      }
      // u8g_i2c_stop();
      break;
      
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g->pin_list[U8G_PI_A0_STATE] = arg_val;
    2394:	fc 01       	movw	r30, r24
    2396:	46 a3       	std	Z+38, r20	; 0x26
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again */
    2398:	21 e0       	ldi	r18, 0x01	; 1
    239a:	23 a7       	std	Z+43, r18	; 0x2b
    239c:	43 c0       	rjmp	.+134    	; 0x2424 <u8g_com_arduino_ssd_i2c_fn+0xaa>
  return 1;
}

uint8_t u8g_com_arduino_ssd_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
  switch(msg)
    239e:	66 30       	cpi	r22, 0x06	; 6
    23a0:	11 f1       	breq	.+68     	; 0x23e6 <u8g_com_arduino_ssd_i2c_fn+0x6c>
    23a2:	67 30       	cpi	r22, 0x07	; 7
    23a4:	79 f1       	breq	.+94     	; 0x2404 <u8g_com_arduino_ssd_i2c_fn+0x8a>
    23a6:	65 30       	cpi	r22, 0x05	; 5
    23a8:	09 f0       	breq	.+2      	; 0x23ac <u8g_com_arduino_ssd_i2c_fn+0x32>
    23aa:	3c c0       	rjmp	.+120    	; 0x2424 <u8g_com_arduino_ssd_i2c_fn+0xaa>
    23ac:	0e c0       	rjmp	.+28     	; 0x23ca <u8g_com_arduino_ssd_i2c_fn+0x50>
    case U8G_COM_MSG_INIT:
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SCL, HIGH);
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SDA, HIGH);
      //u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: unknown mode */
    
      u8g_i2c_init(u8g->pin_list[U8G_PI_I2C_OPTION]);
    23ae:	fc 01       	movw	r30, r24
    23b0:	86 a5       	ldd	r24, Z+46	; 0x2e
    23b2:	0e 94 25 12 	call	0x244a	; 0x244a <u8g_i2c_init>
    23b6:	36 c0       	rjmp	.+108    	; 0x2424 <u8g_com_arduino_ssd_i2c_fn+0xaa>
      /* Currently disabled, but it could be enable. Previous restrictions have been removed */
      /* u8g_com_arduino_digital_write(u8g, U8G_PI_RESET, arg_val); */
      break;
      
    case U8G_COM_MSG_CHIP_SELECT:
      u8g->pin_list[U8G_PI_A0_STATE] = 0;
    23b8:	fc 01       	movw	r30, r24
    23ba:	16 a2       	std	Z+38, r1	; 0x26
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again, also forces start condition */
    23bc:	21 e0       	ldi	r18, 0x01	; 1
    23be:	23 a7       	std	Z+43, r18	; 0x2b
      if ( arg_val == 0 )
    23c0:	41 11       	cpse	r20, r1
    23c2:	30 c0       	rjmp	.+96     	; 0x2424 <u8g_com_arduino_ssd_i2c_fn+0xaa>
      {
        /* disable chip, send stop condition */
	u8g_i2c_stop();
    23c4:	0e 94 b3 12 	call	0x2566	; 0x2566 <u8g_i2c_stop>
    23c8:	2d c0       	rjmp	.+90     	; 0x2424 <u8g_com_arduino_ssd_i2c_fn+0xaa>
      }
      break;

    case U8G_COM_MSG_WRITE_BYTE:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    23ca:	0e 94 a3 11 	call	0x2346	; 0x2346 <u8g_com_arduino_ssd_start_sequence>
    23ce:	81 11       	cpse	r24, r1
    23d0:	04 c0       	rjmp	.+8      	; 0x23da <u8g_com_arduino_ssd_i2c_fn+0x60>
	return u8g_i2c_stop(), 0;
    23d2:	0e 94 b3 12 	call	0x2566	; 0x2566 <u8g_i2c_stop>
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	26 c0       	rjmp	.+76     	; 0x2426 <u8g_com_arduino_ssd_i2c_fn+0xac>
      if ( u8g_i2c_send_byte(arg_val) == 0 )
    23da:	8c 2f       	mov	r24, r28
    23dc:	0e 94 92 12 	call	0x2524	; 0x2524 <u8g_i2c_send_byte>
    23e0:	81 11       	cpse	r24, r1
    23e2:	20 c0       	rjmp	.+64     	; 0x2424 <u8g_com_arduino_ssd_i2c_fn+0xaa>
    23e4:	f6 cf       	rjmp	.-20     	; 0x23d2 <u8g_com_arduino_ssd_i2c_fn+0x58>
      // u8g_i2c_stop();
      break;
    
    case U8G_COM_MSG_WRITE_SEQ:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    23e6:	0e 94 a3 11 	call	0x2346	; 0x2346 <u8g_com_arduino_ssd_start_sequence>
    23ea:	88 23       	and	r24, r24
    23ec:	91 f3       	breq	.-28     	; 0x23d2 <u8g_com_arduino_ssd_i2c_fn+0x58>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    23ee:	cc 23       	and	r28, r28
    23f0:	c9 f0       	breq	.+50     	; 0x2424 <u8g_com_arduino_ssd_i2c_fn+0xaa>
        {
	  if ( u8g_i2c_send_byte(*ptr++) == 0 )
    23f2:	f8 01       	movw	r30, r16
    23f4:	81 91       	ld	r24, Z+
    23f6:	8f 01       	movw	r16, r30
    23f8:	0e 94 92 12 	call	0x2524	; 0x2524 <u8g_i2c_send_byte>
    23fc:	88 23       	and	r24, r24
    23fe:	49 f3       	breq	.-46     	; 0x23d2 <u8g_com_arduino_ssd_i2c_fn+0x58>
	    return u8g_i2c_stop(), 0;
          arg_val--;
    2400:	c1 50       	subi	r28, 0x01	; 1
    2402:	f5 cf       	rjmp	.-22     	; 0x23ee <u8g_com_arduino_ssd_i2c_fn+0x74>
      // u8g_i2c_stop();
      break;

    case U8G_COM_MSG_WRITE_SEQ_P:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    2404:	0e 94 a3 11 	call	0x2346	; 0x2346 <u8g_com_arduino_ssd_start_sequence>
    2408:	88 23       	and	r24, r24
    240a:	19 f3       	breq	.-58     	; 0x23d2 <u8g_com_arduino_ssd_i2c_fn+0x58>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    240c:	cc 23       	and	r28, r28
    240e:	51 f0       	breq	.+20     	; 0x2424 <u8g_com_arduino_ssd_i2c_fn+0xaa>
        {
	  if ( u8g_i2c_send_byte(u8g_pgm_read(ptr)) == 0 )
    2410:	f8 01       	movw	r30, r16
    2412:	84 91       	lpm	r24, Z
    2414:	0e 94 92 12 	call	0x2524	; 0x2524 <u8g_i2c_send_byte>
    2418:	88 23       	and	r24, r24
    241a:	29 f0       	breq	.+10     	; 0x2426 <u8g_com_arduino_ssd_i2c_fn+0xac>
	    return 0;
          ptr++;
    241c:	0f 5f       	subi	r16, 0xFF	; 255
    241e:	1f 4f       	sbci	r17, 0xFF	; 255
          arg_val--;
    2420:	c1 50       	subi	r28, 0x01	; 1
    2422:	f4 cf       	rjmp	.-24     	; 0x240c <u8g_com_arduino_ssd_i2c_fn+0x92>
      }
      */
#endif
      break;
  }
  return 1;
    2424:	81 e0       	ldi	r24, 0x01	; 1
}
    2426:	cf 91       	pop	r28
    2428:	1f 91       	pop	r17
    242a:	0f 91       	pop	r16
    242c:	08 95       	ret

0000242e <u8g_i2c_set_error>:
}

uint8_t u8g_i2c_get_err_pos(void)
{
  return u8g_i2c_err_pos;
}
    242e:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <u8g_i2c_err_code>
    2432:	91 11       	cpse	r25, r1
    2434:	04 c0       	rjmp	.+8      	; 0x243e <u8g_i2c_set_error+0x10>
    2436:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <u8g_i2c_err_code>
    243a:	60 93 48 04 	sts	0x0448, r22	; 0x800448 <u8g_i2c_err_pos>
    243e:	08 95       	ret

00002440 <u8g_i2c_clear_error>:
    2440:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <u8g_i2c_err_code>
    2444:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <u8g_i2c_err_pos>
    2448:	08 95       	ret

0000244a <u8g_i2c_init>:
    TWSR = 0;
	--> 400KHz

    F_CPU/(2*100000)-8  --> calculate TWBR value for 100KHz
*/
  u8g_i2c_opt = options;
    244a:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <u8g_i2c_opt>
  TWSR = 0;
    244e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  if ( options & U8G_I2C_OPT_FAST )
    2452:	84 ff       	sbrs	r24, 4
    2454:	02 c0       	rjmp	.+4      	; 0x245a <u8g_i2c_init+0x10>
  {
    TWBR = F_CPU/(2*400000)-8;
    2456:	8c e0       	ldi	r24, 0x0C	; 12
    2458:	01 c0       	rjmp	.+2      	; 0x245c <u8g_i2c_init+0x12>
  }
  else
  {  
    TWBR = F_CPU/(2*100000)-8;
    245a:	88 e4       	ldi	r24, 0x48	; 72
    245c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  }
  u8g_i2c_clear_error();
    2460:	0c 94 20 12 	jmp	0x2440	; 0x2440 <u8g_i2c_clear_error>

00002464 <u8g_i2c_wait>:
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
    2464:	1f 93       	push	r17
    2466:	cf 93       	push	r28
    2468:	df 93       	push	r29
    246a:	00 d0       	rcall	.+0      	; 0x246c <u8g_i2c_wait+0x8>
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
    2470:	20 ed       	ldi	r18, 0xD0	; 208
    2472:	37 e0       	ldi	r19, 0x07	; 7
	{
	  u8g_i2c_set_error(U8G_I2C_ERR_TIMEOUT, pos);
	  return 0; /* error */
	}
      }
      cnt--;
    2474:	3a 83       	std	Y+2, r19	; 0x02
    2476:	29 83       	std	Y+1, r18	; 0x01
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
  while( !(TWCR & mask) )
    2478:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    247c:	98 23       	and	r25, r24
    247e:	99 f4       	brne	.+38     	; 0x24a6 <u8g_i2c_wait+0x42>
  {
      if ( cnt == 0 )
    2480:	29 81       	ldd	r18, Y+1	; 0x01
    2482:	3a 81       	ldd	r19, Y+2	; 0x02
    2484:	23 2b       	or	r18, r19
    2486:	51 f4       	brne	.+20     	; 0x249c <u8g_i2c_wait+0x38>
    2488:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <u8g_i2c_opt>
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    248c:	18 2f       	mov	r17, r24
    248e:	12 70       	andi	r17, 0x02	; 2
    2490:	81 fd       	sbrc	r24, 1
    2492:	09 c0       	rjmp	.+18     	; 0x24a6 <u8g_i2c_wait+0x42>
	{
	  return 1;	/* all ok */
	}
	else
	{
	  u8g_i2c_set_error(U8G_I2C_ERR_TIMEOUT, pos);
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	0e 94 17 12 	call	0x242e	; 0x242e <u8g_i2c_set_error>
	  return 0; /* error */
    249a:	06 c0       	rjmp	.+12     	; 0x24a8 <u8g_i2c_wait+0x44>
	}
      }
      cnt--;
    249c:	29 81       	ldd	r18, Y+1	; 0x01
    249e:	3a 81       	ldd	r19, Y+2	; 0x02
    24a0:	21 50       	subi	r18, 0x01	; 1
    24a2:	31 09       	sbc	r19, r1
    24a4:	e7 cf       	rjmp	.-50     	; 0x2474 <u8g_i2c_wait+0x10>
  {
      if ( cnt == 0 )
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
	{
	  return 1;	/* all ok */
    24a6:	11 e0       	ldi	r17, 0x01	; 1
	}
      }
      cnt--;
    }
  return 1;	/* all ok */
}
    24a8:	81 2f       	mov	r24, r17
    24aa:	0f 90       	pop	r0
    24ac:	0f 90       	pop	r0
    24ae:	df 91       	pop	r29
    24b0:	cf 91       	pop	r28
    24b2:	1f 91       	pop	r17
    24b4:	08 95       	ret

000024b6 <u8g_i2c_start>:

/* sla includes all 8 bits (with r/w bit), assums master transmit */
uint8_t u8g_i2c_start(uint8_t sla)
{
    24b6:	cf 93       	push	r28
    24b8:	c8 2f       	mov	r28, r24
  register uint8_t status;
  
  /* send start */
  TWCR = _BV(TWINT) |  _BV(TWSTA)  |  _BV(TWEN);
    24ba:	84 ea       	ldi	r24, 0xA4	; 164
    24bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
   
  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 1) == 0 )
    24c0:	61 e0       	ldi	r22, 0x01	; 1
    24c2:	80 e8       	ldi	r24, 0x80	; 128
    24c4:	0e 94 32 12 	call	0x2464	; 0x2464 <u8g_i2c_wait>
    24c8:	88 23       	and	r24, r24
    24ca:	59 f0       	breq	.+22     	; 0x24e2 <u8g_i2c_start+0x2c>
    return 0;
  
  status = TW_STATUS;
    24cc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    24d0:	88 7f       	andi	r24, 0xF8	; 248
 
  /* check status after start */  
  if ( status != TW_START && status != TW_REP_START )
    24d2:	88 30       	cpi	r24, 0x08	; 8
    24d4:	41 f0       	breq	.+16     	; 0x24e6 <u8g_i2c_start+0x30>
    24d6:	80 31       	cpi	r24, 0x10	; 16
    24d8:	31 f0       	breq	.+12     	; 0x24e6 <u8g_i2c_start+0x30>
  {
    u8g_i2c_set_error(U8G_I2C_ERR_BUS, 1);
    24da:	61 e0       	ldi	r22, 0x01	; 1
    24dc:	82 e0       	ldi	r24, 0x02	; 2
    24de:	0e 94 17 12 	call	0x242e	; 0x242e <u8g_i2c_set_error>
    return 0;
    24e2:	c0 e0       	ldi	r28, 0x00	; 0
    24e4:	1c c0       	rjmp	.+56     	; 0x251e <u8g_i2c_start+0x68>
  }

  /* set slave address */  
  TWDR = sla;
    24e6:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  
  /* enable sla transfer */
  TWCR = _BV(TWINT)  |  _BV(TWEN);
    24ea:	84 e8       	ldi	r24, 0x84	; 132
    24ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 2) == 0 )
    24f0:	62 e0       	ldi	r22, 0x02	; 2
    24f2:	80 e8       	ldi	r24, 0x80	; 128
    24f4:	0e 94 32 12 	call	0x2464	; 0x2464 <u8g_i2c_wait>
    24f8:	88 23       	and	r24, r24
    24fa:	99 f3       	breq	.-26     	; 0x24e2 <u8g_i2c_start+0x2c>
    24fc:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <u8g_i2c_opt>
    return 0;

  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    2500:	c8 2f       	mov	r28, r24
    2502:	c2 70       	andi	r28, 0x02	; 2
    2504:	81 fd       	sbrc	r24, 1
    2506:	0a c0       	rjmp	.+20     	; 0x251c <u8g_i2c_start+0x66>
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;
    2508:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    /* check status after sla */  
    if ( status != TW_MT_SLA_ACK )
    250c:	88 7f       	andi	r24, 0xF8	; 248
    250e:	88 31       	cpi	r24, 0x18	; 24
    2510:	29 f0       	breq	.+10     	; 0x251c <u8g_i2c_start+0x66>
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 2);
    2512:	62 e0       	ldi	r22, 0x02	; 2
    2514:	82 e0       	ldi	r24, 0x02	; 2
    2516:	0e 94 17 12 	call	0x242e	; 0x242e <u8g_i2c_set_error>
      return 0;
    251a:	01 c0       	rjmp	.+2      	; 0x251e <u8g_i2c_start+0x68>
    }
  }

   return 1;
    251c:	c1 e0       	ldi	r28, 0x01	; 1
}
    251e:	8c 2f       	mov	r24, r28
    2520:	cf 91       	pop	r28
    2522:	08 95       	ret

00002524 <u8g_i2c_send_byte>:

uint8_t u8g_i2c_send_byte(uint8_t data)
{
    2524:	cf 93       	push	r28
  register uint8_t status;
  TWDR = data;
    2526:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  TWCR = _BV(TWINT)  |  _BV(TWEN);
    252a:	84 e8       	ldi	r24, 0x84	; 132
    252c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  if ( u8g_i2c_wait(_BV(TWINT), 3) == 0 )
    2530:	63 e0       	ldi	r22, 0x03	; 3
    2532:	80 e8       	ldi	r24, 0x80	; 128
    2534:	0e 94 32 12 	call	0x2464	; 0x2464 <u8g_i2c_wait>
    2538:	c8 2f       	mov	r28, r24
    253a:	88 23       	and	r24, r24
    253c:	89 f0       	breq	.+34     	; 0x2560 <u8g_i2c_send_byte+0x3c>
    253e:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <u8g_i2c_opt>
    return 0;
    
  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    2542:	c8 2f       	mov	r28, r24
    2544:	c2 70       	andi	r28, 0x02	; 2
    2546:	81 fd       	sbrc	r24, 1
    2548:	0a c0       	rjmp	.+20     	; 0x255e <u8g_i2c_send_byte+0x3a>
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;  
    254a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    if ( status != TW_MT_DATA_ACK )
    254e:	88 7f       	andi	r24, 0xF8	; 248
    2550:	88 32       	cpi	r24, 0x28	; 40
    2552:	29 f0       	breq	.+10     	; 0x255e <u8g_i2c_send_byte+0x3a>
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 3);
    2554:	63 e0       	ldi	r22, 0x03	; 3
    2556:	82 e0       	ldi	r24, 0x02	; 2
    2558:	0e 94 17 12 	call	0x242e	; 0x242e <u8g_i2c_set_error>
      return 0;
    255c:	01 c0       	rjmp	.+2      	; 0x2560 <u8g_i2c_send_byte+0x3c>
    }
  }

  return 1;  
    255e:	c1 e0       	ldi	r28, 0x01	; 1
}
    2560:	8c 2f       	mov	r24, r28
    2562:	cf 91       	pop	r28
    2564:	08 95       	ret

00002566 <u8g_i2c_stop>:

void u8g_i2c_stop(void)
{
  /* write stop */
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
    2566:	84 e9       	ldi	r24, 0x94	; 148
    2568:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  /* no error is checked for the stop condition */  
  u8g_i2c_wait(_BV(TWSTO), 4);
    256c:	64 e0       	ldi	r22, 0x04	; 4
    256e:	80 e1       	ldi	r24, 0x10	; 16
    2570:	0c 94 32 12 	jmp	0x2464	; 0x2464 <u8g_i2c_wait>

00002574 <u8g_Delay>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2574:	2e e9       	ldi	r18, 0x9E	; 158
    2576:	3f e0       	ldi	r19, 0x0F	; 15
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    2578:	00 97       	sbiw	r24, 0x00	; 0
    257a:	29 f0       	breq	.+10     	; 0x2586 <u8g_Delay+0x12>
    257c:	f9 01       	movw	r30, r18
    257e:	31 97       	sbiw	r30, 0x01	; 1
    2580:	f1 f7       	brne	.-4      	; 0x257e <u8g_Delay+0xa>
  {
    _delay_loop_2( (F_CPU / 4000 ) -2);
    val--;
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f9 cf       	rjmp	.-14     	; 0x2578 <u8g_Delay+0x4>
  }
}
    2586:	08 95       	ret

00002588 <u8g_page_First>:
void u8g_page_Init(u8g_page_t *p, u8g_uint_t page_height, u8g_uint_t total_height )
{
  p->page_height = page_height;
  p->total_height = total_height;
  p->page = 0;
  u8g_page_First(p);
    2588:	fc 01       	movw	r30, r24
    258a:	12 82       	std	Z+2, r1	; 0x02
    258c:	80 81       	ld	r24, Z
    258e:	81 50       	subi	r24, 0x01	; 1
    2590:	83 83       	std	Z+3, r24	; 0x03
    2592:	14 82       	std	Z+4, r1	; 0x04
    2594:	08 95       	ret

00002596 <u8g_page_Next>:
  p->page_y1--;
  p->page = 0;
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
    2596:	fc 01       	movw	r30, r24
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
    2598:	30 81       	ld	r19, Z
    259a:	92 81       	ldd	r25, Z+2	; 0x02
    259c:	93 0f       	add	r25, r19
    259e:	92 83       	std	Z+2, r25	; 0x02
  if ( p->page_y0 >= p->total_height )
    25a0:	21 81       	ldd	r18, Z+1	; 0x01
    25a2:	92 17       	cp	r25, r18
    25a4:	60 f4       	brcc	.+24     	; 0x25be <u8g_page_Next+0x28>
    return 0;
  p->page++;
    25a6:	94 81       	ldd	r25, Z+4	; 0x04
    25a8:	9f 5f       	subi	r25, 0xFF	; 255
    25aa:	94 83       	std	Z+4, r25	; 0x04
  y1 = p->page_y1;
    25ac:	83 81       	ldd	r24, Z+3	; 0x03
  y1 += p->page_height;
    25ae:	83 0f       	add	r24, r19
  if ( y1 >= p->total_height )
    25b0:	82 17       	cp	r24, r18
    25b2:	10 f0       	brcs	.+4      	; 0x25b8 <u8g_page_Next+0x22>
  {
    y1 = p->total_height;
    y1--;
    25b4:	8f ef       	ldi	r24, 0xFF	; 255
    25b6:	82 0f       	add	r24, r18
  }
  p->page_y1 = y1;
    25b8:	83 83       	std	Z+3, r24	; 0x03
  
  return 1;
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	08 95       	ret
uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
  if ( p->page_y0 >= p->total_height )
    return 0;
    25be:	80 e0       	ldi	r24, 0x00	; 0
    y1--;
  }
  p->page_y1 = y1;
  
  return 1;
}
    25c0:	08 95       	ret

000025c2 <__cmpsf2>:
    25c2:	0e 94 1c 13 	call	0x2638	; 0x2638 <__fp_cmp>
    25c6:	08 f4       	brcc	.+2      	; 0x25ca <__cmpsf2+0x8>
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	08 95       	ret

000025cc <__fixsfsi>:
    25cc:	0e 94 ed 12 	call	0x25da	; 0x25da <__fixunssfsi>
    25d0:	68 94       	set
    25d2:	b1 11       	cpse	r27, r1
    25d4:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__fp_szero>
    25d8:	08 95       	ret

000025da <__fixunssfsi>:
    25da:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__fp_splitA>
    25de:	88 f0       	brcs	.+34     	; 0x2602 <__fixunssfsi+0x28>
    25e0:	9f 57       	subi	r25, 0x7F	; 127
    25e2:	98 f0       	brcs	.+38     	; 0x260a <__fixunssfsi+0x30>
    25e4:	b9 2f       	mov	r27, r25
    25e6:	99 27       	eor	r25, r25
    25e8:	b7 51       	subi	r27, 0x17	; 23
    25ea:	b0 f0       	brcs	.+44     	; 0x2618 <__fixunssfsi+0x3e>
    25ec:	e1 f0       	breq	.+56     	; 0x2626 <__fixunssfsi+0x4c>
    25ee:	66 0f       	add	r22, r22
    25f0:	77 1f       	adc	r23, r23
    25f2:	88 1f       	adc	r24, r24
    25f4:	99 1f       	adc	r25, r25
    25f6:	1a f0       	brmi	.+6      	; 0x25fe <__fixunssfsi+0x24>
    25f8:	ba 95       	dec	r27
    25fa:	c9 f7       	brne	.-14     	; 0x25ee <__fixunssfsi+0x14>
    25fc:	14 c0       	rjmp	.+40     	; 0x2626 <__fixunssfsi+0x4c>
    25fe:	b1 30       	cpi	r27, 0x01	; 1
    2600:	91 f0       	breq	.+36     	; 0x2626 <__fixunssfsi+0x4c>
    2602:	0e 94 d7 07 	call	0xfae	; 0xfae <__fp_zero>
    2606:	b1 e0       	ldi	r27, 0x01	; 1
    2608:	08 95       	ret
    260a:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_zero>
    260e:	67 2f       	mov	r22, r23
    2610:	78 2f       	mov	r23, r24
    2612:	88 27       	eor	r24, r24
    2614:	b8 5f       	subi	r27, 0xF8	; 248
    2616:	39 f0       	breq	.+14     	; 0x2626 <__fixunssfsi+0x4c>
    2618:	b9 3f       	cpi	r27, 0xF9	; 249
    261a:	cc f3       	brlt	.-14     	; 0x260e <__fixunssfsi+0x34>
    261c:	86 95       	lsr	r24
    261e:	77 95       	ror	r23
    2620:	67 95       	ror	r22
    2622:	b3 95       	inc	r27
    2624:	d9 f7       	brne	.-10     	; 0x261c <__fixunssfsi+0x42>
    2626:	3e f4       	brtc	.+14     	; 0x2636 <__fixunssfsi+0x5c>
    2628:	90 95       	com	r25
    262a:	80 95       	com	r24
    262c:	70 95       	com	r23
    262e:	61 95       	neg	r22
    2630:	7f 4f       	sbci	r23, 0xFF	; 255
    2632:	8f 4f       	sbci	r24, 0xFF	; 255
    2634:	9f 4f       	sbci	r25, 0xFF	; 255
    2636:	08 95       	ret

00002638 <__fp_cmp>:
    2638:	99 0f       	add	r25, r25
    263a:	00 08       	sbc	r0, r0
    263c:	55 0f       	add	r21, r21
    263e:	aa 0b       	sbc	r26, r26
    2640:	e0 e8       	ldi	r30, 0x80	; 128
    2642:	fe ef       	ldi	r31, 0xFE	; 254
    2644:	16 16       	cp	r1, r22
    2646:	17 06       	cpc	r1, r23
    2648:	e8 07       	cpc	r30, r24
    264a:	f9 07       	cpc	r31, r25
    264c:	c0 f0       	brcs	.+48     	; 0x267e <__fp_cmp+0x46>
    264e:	12 16       	cp	r1, r18
    2650:	13 06       	cpc	r1, r19
    2652:	e4 07       	cpc	r30, r20
    2654:	f5 07       	cpc	r31, r21
    2656:	98 f0       	brcs	.+38     	; 0x267e <__fp_cmp+0x46>
    2658:	62 1b       	sub	r22, r18
    265a:	73 0b       	sbc	r23, r19
    265c:	84 0b       	sbc	r24, r20
    265e:	95 0b       	sbc	r25, r21
    2660:	39 f4       	brne	.+14     	; 0x2670 <__fp_cmp+0x38>
    2662:	0a 26       	eor	r0, r26
    2664:	61 f0       	breq	.+24     	; 0x267e <__fp_cmp+0x46>
    2666:	23 2b       	or	r18, r19
    2668:	24 2b       	or	r18, r20
    266a:	25 2b       	or	r18, r21
    266c:	21 f4       	brne	.+8      	; 0x2676 <__fp_cmp+0x3e>
    266e:	08 95       	ret
    2670:	0a 26       	eor	r0, r26
    2672:	09 f4       	brne	.+2      	; 0x2676 <__fp_cmp+0x3e>
    2674:	a1 40       	sbci	r26, 0x01	; 1
    2676:	a6 95       	lsr	r26
    2678:	8f ef       	ldi	r24, 0xFF	; 255
    267a:	81 1d       	adc	r24, r1
    267c:	81 1d       	adc	r24, r1
    267e:	08 95       	ret

00002680 <__gesf2>:
    2680:	0e 94 1c 13 	call	0x2638	; 0x2638 <__fp_cmp>
    2684:	08 f4       	brcc	.+2      	; 0x2688 <__gesf2+0x8>
    2686:	8f ef       	ldi	r24, 0xFF	; 255
    2688:	08 95       	ret

0000268a <__mulsf3>:
    268a:	0e 94 58 13 	call	0x26b0	; 0x26b0 <__mulsf3x>
    268e:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__fp_round>
    2692:	0e 94 96 07 	call	0xf2c	; 0xf2c <__fp_pscA>
    2696:	38 f0       	brcs	.+14     	; 0x26a6 <__mulsf3+0x1c>
    2698:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__fp_pscB>
    269c:	20 f0       	brcs	.+8      	; 0x26a6 <__mulsf3+0x1c>
    269e:	95 23       	and	r25, r21
    26a0:	11 f0       	breq	.+4      	; 0x26a6 <__mulsf3+0x1c>
    26a2:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_inf>
    26a6:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__fp_nan>
    26aa:	11 24       	eor	r1, r1
    26ac:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__fp_szero>

000026b0 <__mulsf3x>:
    26b0:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__fp_split3>
    26b4:	70 f3       	brcs	.-36     	; 0x2692 <__mulsf3+0x8>

000026b6 <__mulsf3_pse>:
    26b6:	95 9f       	mul	r25, r21
    26b8:	c1 f3       	breq	.-16     	; 0x26aa <__mulsf3+0x20>
    26ba:	95 0f       	add	r25, r21
    26bc:	50 e0       	ldi	r21, 0x00	; 0
    26be:	55 1f       	adc	r21, r21
    26c0:	62 9f       	mul	r22, r18
    26c2:	f0 01       	movw	r30, r0
    26c4:	72 9f       	mul	r23, r18
    26c6:	bb 27       	eor	r27, r27
    26c8:	f0 0d       	add	r31, r0
    26ca:	b1 1d       	adc	r27, r1
    26cc:	63 9f       	mul	r22, r19
    26ce:	aa 27       	eor	r26, r26
    26d0:	f0 0d       	add	r31, r0
    26d2:	b1 1d       	adc	r27, r1
    26d4:	aa 1f       	adc	r26, r26
    26d6:	64 9f       	mul	r22, r20
    26d8:	66 27       	eor	r22, r22
    26da:	b0 0d       	add	r27, r0
    26dc:	a1 1d       	adc	r26, r1
    26de:	66 1f       	adc	r22, r22
    26e0:	82 9f       	mul	r24, r18
    26e2:	22 27       	eor	r18, r18
    26e4:	b0 0d       	add	r27, r0
    26e6:	a1 1d       	adc	r26, r1
    26e8:	62 1f       	adc	r22, r18
    26ea:	73 9f       	mul	r23, r19
    26ec:	b0 0d       	add	r27, r0
    26ee:	a1 1d       	adc	r26, r1
    26f0:	62 1f       	adc	r22, r18
    26f2:	83 9f       	mul	r24, r19
    26f4:	a0 0d       	add	r26, r0
    26f6:	61 1d       	adc	r22, r1
    26f8:	22 1f       	adc	r18, r18
    26fa:	74 9f       	mul	r23, r20
    26fc:	33 27       	eor	r19, r19
    26fe:	a0 0d       	add	r26, r0
    2700:	61 1d       	adc	r22, r1
    2702:	23 1f       	adc	r18, r19
    2704:	84 9f       	mul	r24, r20
    2706:	60 0d       	add	r22, r0
    2708:	21 1d       	adc	r18, r1
    270a:	82 2f       	mov	r24, r18
    270c:	76 2f       	mov	r23, r22
    270e:	6a 2f       	mov	r22, r26
    2710:	11 24       	eor	r1, r1
    2712:	9f 57       	subi	r25, 0x7F	; 127
    2714:	50 40       	sbci	r21, 0x00	; 0
    2716:	9a f0       	brmi	.+38     	; 0x273e <__mulsf3_pse+0x88>
    2718:	f1 f0       	breq	.+60     	; 0x2756 <__mulsf3_pse+0xa0>
    271a:	88 23       	and	r24, r24
    271c:	4a f0       	brmi	.+18     	; 0x2730 <__mulsf3_pse+0x7a>
    271e:	ee 0f       	add	r30, r30
    2720:	ff 1f       	adc	r31, r31
    2722:	bb 1f       	adc	r27, r27
    2724:	66 1f       	adc	r22, r22
    2726:	77 1f       	adc	r23, r23
    2728:	88 1f       	adc	r24, r24
    272a:	91 50       	subi	r25, 0x01	; 1
    272c:	50 40       	sbci	r21, 0x00	; 0
    272e:	a9 f7       	brne	.-22     	; 0x271a <__mulsf3_pse+0x64>
    2730:	9e 3f       	cpi	r25, 0xFE	; 254
    2732:	51 05       	cpc	r21, r1
    2734:	80 f0       	brcs	.+32     	; 0x2756 <__mulsf3_pse+0xa0>
    2736:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_inf>
    273a:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__fp_szero>
    273e:	5f 3f       	cpi	r21, 0xFF	; 255
    2740:	e4 f3       	brlt	.-8      	; 0x273a <__mulsf3_pse+0x84>
    2742:	98 3e       	cpi	r25, 0xE8	; 232
    2744:	d4 f3       	brlt	.-12     	; 0x273a <__mulsf3_pse+0x84>
    2746:	86 95       	lsr	r24
    2748:	77 95       	ror	r23
    274a:	67 95       	ror	r22
    274c:	b7 95       	ror	r27
    274e:	f7 95       	ror	r31
    2750:	e7 95       	ror	r30
    2752:	9f 5f       	subi	r25, 0xFF	; 255
    2754:	c1 f7       	brne	.-16     	; 0x2746 <__mulsf3_pse+0x90>
    2756:	fe 2b       	or	r31, r30
    2758:	88 0f       	add	r24, r24
    275a:	91 1d       	adc	r25, r1
    275c:	96 95       	lsr	r25
    275e:	87 95       	ror	r24
    2760:	97 f9       	bld	r25, 7
    2762:	08 95       	ret

00002764 <__unordsf2>:
    2764:	0e 94 1c 13 	call	0x2638	; 0x2638 <__fp_cmp>
    2768:	88 0b       	sbc	r24, r24
    276a:	99 0b       	sbc	r25, r25
    276c:	08 95       	ret

0000276e <__udivmodsi4>:
    276e:	a1 e2       	ldi	r26, 0x21	; 33
    2770:	1a 2e       	mov	r1, r26
    2772:	aa 1b       	sub	r26, r26
    2774:	bb 1b       	sub	r27, r27
    2776:	fd 01       	movw	r30, r26
    2778:	0d c0       	rjmp	.+26     	; 0x2794 <__udivmodsi4_ep>

0000277a <__udivmodsi4_loop>:
    277a:	aa 1f       	adc	r26, r26
    277c:	bb 1f       	adc	r27, r27
    277e:	ee 1f       	adc	r30, r30
    2780:	ff 1f       	adc	r31, r31
    2782:	a2 17       	cp	r26, r18
    2784:	b3 07       	cpc	r27, r19
    2786:	e4 07       	cpc	r30, r20
    2788:	f5 07       	cpc	r31, r21
    278a:	20 f0       	brcs	.+8      	; 0x2794 <__udivmodsi4_ep>
    278c:	a2 1b       	sub	r26, r18
    278e:	b3 0b       	sbc	r27, r19
    2790:	e4 0b       	sbc	r30, r20
    2792:	f5 0b       	sbc	r31, r21

00002794 <__udivmodsi4_ep>:
    2794:	66 1f       	adc	r22, r22
    2796:	77 1f       	adc	r23, r23
    2798:	88 1f       	adc	r24, r24
    279a:	99 1f       	adc	r25, r25
    279c:	1a 94       	dec	r1
    279e:	69 f7       	brne	.-38     	; 0x277a <__udivmodsi4_loop>
    27a0:	60 95       	com	r22
    27a2:	70 95       	com	r23
    27a4:	80 95       	com	r24
    27a6:	90 95       	com	r25
    27a8:	9b 01       	movw	r18, r22
    27aa:	ac 01       	movw	r20, r24
    27ac:	bd 01       	movw	r22, r26
    27ae:	cf 01       	movw	r24, r30
    27b0:	08 95       	ret

000027b2 <__tablejump2__>:
    27b2:	ee 0f       	add	r30, r30
    27b4:	ff 1f       	adc	r31, r31
    27b6:	05 90       	lpm	r0, Z+
    27b8:	f4 91       	lpm	r31, Z
    27ba:	e0 2d       	mov	r30, r0
    27bc:	09 94       	ijmp

000027be <dtostrf>:
    27be:	ef 92       	push	r14
    27c0:	0f 93       	push	r16
    27c2:	1f 93       	push	r17
    27c4:	cf 93       	push	r28
    27c6:	df 93       	push	r29
    27c8:	e8 01       	movw	r28, r16
    27ca:	47 fd       	sbrc	r20, 7
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <dtostrf+0x14>
    27ce:	34 e0       	ldi	r19, 0x04	; 4
    27d0:	01 c0       	rjmp	.+2      	; 0x27d4 <dtostrf+0x16>
    27d2:	34 e1       	ldi	r19, 0x14	; 20
    27d4:	04 2e       	mov	r0, r20
    27d6:	00 0c       	add	r0, r0
    27d8:	55 0b       	sbc	r21, r21
    27da:	57 ff       	sbrs	r21, 7
    27dc:	03 c0       	rjmp	.+6      	; 0x27e4 <dtostrf+0x26>
    27de:	51 95       	neg	r21
    27e0:	41 95       	neg	r20
    27e2:	51 09       	sbc	r21, r1
    27e4:	e3 2e       	mov	r14, r19
    27e6:	02 2f       	mov	r16, r18
    27e8:	24 2f       	mov	r18, r20
    27ea:	ae 01       	movw	r20, r28
    27ec:	0e 94 31 17 	call	0x2e62	; 0x2e62 <dtoa_prf>
    27f0:	ce 01       	movw	r24, r28
    27f2:	df 91       	pop	r29
    27f4:	cf 91       	pop	r28
    27f6:	1f 91       	pop	r17
    27f8:	0f 91       	pop	r16
    27fa:	ef 90       	pop	r14
    27fc:	08 95       	ret

000027fe <malloc>:
    27fe:	0f 93       	push	r16
    2800:	1f 93       	push	r17
    2802:	cf 93       	push	r28
    2804:	df 93       	push	r29
    2806:	82 30       	cpi	r24, 0x02	; 2
    2808:	91 05       	cpc	r25, r1
    280a:	10 f4       	brcc	.+4      	; 0x2810 <malloc+0x12>
    280c:	82 e0       	ldi	r24, 0x02	; 2
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	e0 91 4d 04 	lds	r30, 0x044D	; 0x80044d <__flp>
    2814:	f0 91 4e 04 	lds	r31, 0x044E	; 0x80044e <__flp+0x1>
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	a0 e0       	ldi	r26, 0x00	; 0
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	30 97       	sbiw	r30, 0x00	; 0
    2822:	19 f1       	breq	.+70     	; 0x286a <malloc+0x6c>
    2824:	40 81       	ld	r20, Z
    2826:	51 81       	ldd	r21, Z+1	; 0x01
    2828:	02 81       	ldd	r16, Z+2	; 0x02
    282a:	13 81       	ldd	r17, Z+3	; 0x03
    282c:	48 17       	cp	r20, r24
    282e:	59 07       	cpc	r21, r25
    2830:	c8 f0       	brcs	.+50     	; 0x2864 <malloc+0x66>
    2832:	84 17       	cp	r24, r20
    2834:	95 07       	cpc	r25, r21
    2836:	69 f4       	brne	.+26     	; 0x2852 <malloc+0x54>
    2838:	10 97       	sbiw	r26, 0x00	; 0
    283a:	31 f0       	breq	.+12     	; 0x2848 <malloc+0x4a>
    283c:	12 96       	adiw	r26, 0x02	; 2
    283e:	0c 93       	st	X, r16
    2840:	12 97       	sbiw	r26, 0x02	; 2
    2842:	13 96       	adiw	r26, 0x03	; 3
    2844:	1c 93       	st	X, r17
    2846:	27 c0       	rjmp	.+78     	; 0x2896 <malloc+0x98>
    2848:	00 93 4d 04 	sts	0x044D, r16	; 0x80044d <__flp>
    284c:	10 93 4e 04 	sts	0x044E, r17	; 0x80044e <__flp+0x1>
    2850:	22 c0       	rjmp	.+68     	; 0x2896 <malloc+0x98>
    2852:	21 15       	cp	r18, r1
    2854:	31 05       	cpc	r19, r1
    2856:	19 f0       	breq	.+6      	; 0x285e <malloc+0x60>
    2858:	42 17       	cp	r20, r18
    285a:	53 07       	cpc	r21, r19
    285c:	18 f4       	brcc	.+6      	; 0x2864 <malloc+0x66>
    285e:	9a 01       	movw	r18, r20
    2860:	bd 01       	movw	r22, r26
    2862:	ef 01       	movw	r28, r30
    2864:	df 01       	movw	r26, r30
    2866:	f8 01       	movw	r30, r16
    2868:	db cf       	rjmp	.-74     	; 0x2820 <malloc+0x22>
    286a:	21 15       	cp	r18, r1
    286c:	31 05       	cpc	r19, r1
    286e:	f9 f0       	breq	.+62     	; 0x28ae <malloc+0xb0>
    2870:	28 1b       	sub	r18, r24
    2872:	39 0b       	sbc	r19, r25
    2874:	24 30       	cpi	r18, 0x04	; 4
    2876:	31 05       	cpc	r19, r1
    2878:	80 f4       	brcc	.+32     	; 0x289a <malloc+0x9c>
    287a:	8a 81       	ldd	r24, Y+2	; 0x02
    287c:	9b 81       	ldd	r25, Y+3	; 0x03
    287e:	61 15       	cp	r22, r1
    2880:	71 05       	cpc	r23, r1
    2882:	21 f0       	breq	.+8      	; 0x288c <malloc+0x8e>
    2884:	fb 01       	movw	r30, r22
    2886:	93 83       	std	Z+3, r25	; 0x03
    2888:	82 83       	std	Z+2, r24	; 0x02
    288a:	04 c0       	rjmp	.+8      	; 0x2894 <malloc+0x96>
    288c:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <__flp+0x1>
    2890:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <__flp>
    2894:	fe 01       	movw	r30, r28
    2896:	32 96       	adiw	r30, 0x02	; 2
    2898:	44 c0       	rjmp	.+136    	; 0x2922 <malloc+0x124>
    289a:	fe 01       	movw	r30, r28
    289c:	e2 0f       	add	r30, r18
    289e:	f3 1f       	adc	r31, r19
    28a0:	81 93       	st	Z+, r24
    28a2:	91 93       	st	Z+, r25
    28a4:	22 50       	subi	r18, 0x02	; 2
    28a6:	31 09       	sbc	r19, r1
    28a8:	39 83       	std	Y+1, r19	; 0x01
    28aa:	28 83       	st	Y, r18
    28ac:	3a c0       	rjmp	.+116    	; 0x2922 <malloc+0x124>
    28ae:	20 91 4b 04 	lds	r18, 0x044B	; 0x80044b <__brkval>
    28b2:	30 91 4c 04 	lds	r19, 0x044C	; 0x80044c <__brkval+0x1>
    28b6:	23 2b       	or	r18, r19
    28b8:	41 f4       	brne	.+16     	; 0x28ca <malloc+0xcc>
    28ba:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    28be:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    28c2:	30 93 4c 04 	sts	0x044C, r19	; 0x80044c <__brkval+0x1>
    28c6:	20 93 4b 04 	sts	0x044B, r18	; 0x80044b <__brkval>
    28ca:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    28ce:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    28d2:	21 15       	cp	r18, r1
    28d4:	31 05       	cpc	r19, r1
    28d6:	41 f4       	brne	.+16     	; 0x28e8 <malloc+0xea>
    28d8:	2d b7       	in	r18, 0x3d	; 61
    28da:	3e b7       	in	r19, 0x3e	; 62
    28dc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    28e0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    28e4:	24 1b       	sub	r18, r20
    28e6:	35 0b       	sbc	r19, r21
    28e8:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <__brkval>
    28ec:	f0 91 4c 04 	lds	r31, 0x044C	; 0x80044c <__brkval+0x1>
    28f0:	e2 17       	cp	r30, r18
    28f2:	f3 07       	cpc	r31, r19
    28f4:	a0 f4       	brcc	.+40     	; 0x291e <malloc+0x120>
    28f6:	2e 1b       	sub	r18, r30
    28f8:	3f 0b       	sbc	r19, r31
    28fa:	28 17       	cp	r18, r24
    28fc:	39 07       	cpc	r19, r25
    28fe:	78 f0       	brcs	.+30     	; 0x291e <malloc+0x120>
    2900:	ac 01       	movw	r20, r24
    2902:	4e 5f       	subi	r20, 0xFE	; 254
    2904:	5f 4f       	sbci	r21, 0xFF	; 255
    2906:	24 17       	cp	r18, r20
    2908:	35 07       	cpc	r19, r21
    290a:	48 f0       	brcs	.+18     	; 0x291e <malloc+0x120>
    290c:	4e 0f       	add	r20, r30
    290e:	5f 1f       	adc	r21, r31
    2910:	50 93 4c 04 	sts	0x044C, r21	; 0x80044c <__brkval+0x1>
    2914:	40 93 4b 04 	sts	0x044B, r20	; 0x80044b <__brkval>
    2918:	81 93       	st	Z+, r24
    291a:	91 93       	st	Z+, r25
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <malloc+0x124>
    291e:	e0 e0       	ldi	r30, 0x00	; 0
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	cf 01       	movw	r24, r30
    2924:	df 91       	pop	r29
    2926:	cf 91       	pop	r28
    2928:	1f 91       	pop	r17
    292a:	0f 91       	pop	r16
    292c:	08 95       	ret

0000292e <free>:
    292e:	cf 93       	push	r28
    2930:	df 93       	push	r29
    2932:	00 97       	sbiw	r24, 0x00	; 0
    2934:	09 f4       	brne	.+2      	; 0x2938 <free+0xa>
    2936:	81 c0       	rjmp	.+258    	; 0x2a3a <free+0x10c>
    2938:	fc 01       	movw	r30, r24
    293a:	32 97       	sbiw	r30, 0x02	; 2
    293c:	13 82       	std	Z+3, r1	; 0x03
    293e:	12 82       	std	Z+2, r1	; 0x02
    2940:	a0 91 4d 04 	lds	r26, 0x044D	; 0x80044d <__flp>
    2944:	b0 91 4e 04 	lds	r27, 0x044E	; 0x80044e <__flp+0x1>
    2948:	10 97       	sbiw	r26, 0x00	; 0
    294a:	81 f4       	brne	.+32     	; 0x296c <free+0x3e>
    294c:	20 81       	ld	r18, Z
    294e:	31 81       	ldd	r19, Z+1	; 0x01
    2950:	82 0f       	add	r24, r18
    2952:	93 1f       	adc	r25, r19
    2954:	20 91 4b 04 	lds	r18, 0x044B	; 0x80044b <__brkval>
    2958:	30 91 4c 04 	lds	r19, 0x044C	; 0x80044c <__brkval+0x1>
    295c:	28 17       	cp	r18, r24
    295e:	39 07       	cpc	r19, r25
    2960:	51 f5       	brne	.+84     	; 0x29b6 <free+0x88>
    2962:	f0 93 4c 04 	sts	0x044C, r31	; 0x80044c <__brkval+0x1>
    2966:	e0 93 4b 04 	sts	0x044B, r30	; 0x80044b <__brkval>
    296a:	67 c0       	rjmp	.+206    	; 0x2a3a <free+0x10c>
    296c:	ed 01       	movw	r28, r26
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	ce 17       	cp	r28, r30
    2974:	df 07       	cpc	r29, r31
    2976:	40 f4       	brcc	.+16     	; 0x2988 <free+0x5a>
    2978:	4a 81       	ldd	r20, Y+2	; 0x02
    297a:	5b 81       	ldd	r21, Y+3	; 0x03
    297c:	9e 01       	movw	r18, r28
    297e:	41 15       	cp	r20, r1
    2980:	51 05       	cpc	r21, r1
    2982:	f1 f0       	breq	.+60     	; 0x29c0 <free+0x92>
    2984:	ea 01       	movw	r28, r20
    2986:	f5 cf       	rjmp	.-22     	; 0x2972 <free+0x44>
    2988:	d3 83       	std	Z+3, r29	; 0x03
    298a:	c2 83       	std	Z+2, r28	; 0x02
    298c:	40 81       	ld	r20, Z
    298e:	51 81       	ldd	r21, Z+1	; 0x01
    2990:	84 0f       	add	r24, r20
    2992:	95 1f       	adc	r25, r21
    2994:	c8 17       	cp	r28, r24
    2996:	d9 07       	cpc	r29, r25
    2998:	59 f4       	brne	.+22     	; 0x29b0 <free+0x82>
    299a:	88 81       	ld	r24, Y
    299c:	99 81       	ldd	r25, Y+1	; 0x01
    299e:	84 0f       	add	r24, r20
    29a0:	95 1f       	adc	r25, r21
    29a2:	02 96       	adiw	r24, 0x02	; 2
    29a4:	91 83       	std	Z+1, r25	; 0x01
    29a6:	80 83       	st	Z, r24
    29a8:	8a 81       	ldd	r24, Y+2	; 0x02
    29aa:	9b 81       	ldd	r25, Y+3	; 0x03
    29ac:	93 83       	std	Z+3, r25	; 0x03
    29ae:	82 83       	std	Z+2, r24	; 0x02
    29b0:	21 15       	cp	r18, r1
    29b2:	31 05       	cpc	r19, r1
    29b4:	29 f4       	brne	.+10     	; 0x29c0 <free+0x92>
    29b6:	f0 93 4e 04 	sts	0x044E, r31	; 0x80044e <__flp+0x1>
    29ba:	e0 93 4d 04 	sts	0x044D, r30	; 0x80044d <__flp>
    29be:	3d c0       	rjmp	.+122    	; 0x2a3a <free+0x10c>
    29c0:	e9 01       	movw	r28, r18
    29c2:	fb 83       	std	Y+3, r31	; 0x03
    29c4:	ea 83       	std	Y+2, r30	; 0x02
    29c6:	49 91       	ld	r20, Y+
    29c8:	59 91       	ld	r21, Y+
    29ca:	c4 0f       	add	r28, r20
    29cc:	d5 1f       	adc	r29, r21
    29ce:	ec 17       	cp	r30, r28
    29d0:	fd 07       	cpc	r31, r29
    29d2:	61 f4       	brne	.+24     	; 0x29ec <free+0xbe>
    29d4:	80 81       	ld	r24, Z
    29d6:	91 81       	ldd	r25, Z+1	; 0x01
    29d8:	84 0f       	add	r24, r20
    29da:	95 1f       	adc	r25, r21
    29dc:	02 96       	adiw	r24, 0x02	; 2
    29de:	e9 01       	movw	r28, r18
    29e0:	99 83       	std	Y+1, r25	; 0x01
    29e2:	88 83       	st	Y, r24
    29e4:	82 81       	ldd	r24, Z+2	; 0x02
    29e6:	93 81       	ldd	r25, Z+3	; 0x03
    29e8:	9b 83       	std	Y+3, r25	; 0x03
    29ea:	8a 83       	std	Y+2, r24	; 0x02
    29ec:	e0 e0       	ldi	r30, 0x00	; 0
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	12 96       	adiw	r26, 0x02	; 2
    29f2:	8d 91       	ld	r24, X+
    29f4:	9c 91       	ld	r25, X
    29f6:	13 97       	sbiw	r26, 0x03	; 3
    29f8:	00 97       	sbiw	r24, 0x00	; 0
    29fa:	19 f0       	breq	.+6      	; 0x2a02 <free+0xd4>
    29fc:	fd 01       	movw	r30, r26
    29fe:	dc 01       	movw	r26, r24
    2a00:	f7 cf       	rjmp	.-18     	; 0x29f0 <free+0xc2>
    2a02:	8d 91       	ld	r24, X+
    2a04:	9c 91       	ld	r25, X
    2a06:	11 97       	sbiw	r26, 0x01	; 1
    2a08:	9d 01       	movw	r18, r26
    2a0a:	2e 5f       	subi	r18, 0xFE	; 254
    2a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0e:	82 0f       	add	r24, r18
    2a10:	93 1f       	adc	r25, r19
    2a12:	20 91 4b 04 	lds	r18, 0x044B	; 0x80044b <__brkval>
    2a16:	30 91 4c 04 	lds	r19, 0x044C	; 0x80044c <__brkval+0x1>
    2a1a:	28 17       	cp	r18, r24
    2a1c:	39 07       	cpc	r19, r25
    2a1e:	69 f4       	brne	.+26     	; 0x2a3a <free+0x10c>
    2a20:	30 97       	sbiw	r30, 0x00	; 0
    2a22:	29 f4       	brne	.+10     	; 0x2a2e <free+0x100>
    2a24:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <__flp+0x1>
    2a28:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <__flp>
    2a2c:	02 c0       	rjmp	.+4      	; 0x2a32 <free+0x104>
    2a2e:	13 82       	std	Z+3, r1	; 0x03
    2a30:	12 82       	std	Z+2, r1	; 0x02
    2a32:	b0 93 4c 04 	sts	0x044C, r27	; 0x80044c <__brkval+0x1>
    2a36:	a0 93 4b 04 	sts	0x044B, r26	; 0x80044b <__brkval>
    2a3a:	df 91       	pop	r29
    2a3c:	cf 91       	pop	r28
    2a3e:	08 95       	ret

00002a40 <snprintf>:
    2a40:	ae e0       	ldi	r26, 0x0E	; 14
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	e6 e2       	ldi	r30, 0x26	; 38
    2a46:	f5 e1       	ldi	r31, 0x15	; 21
    2a48:	0c 94 21 1a 	jmp	0x3442	; 0x3442 <__prologue_saves__+0x1c>
    2a4c:	0d 89       	ldd	r16, Y+21	; 0x15
    2a4e:	1e 89       	ldd	r17, Y+22	; 0x16
    2a50:	8f 89       	ldd	r24, Y+23	; 0x17
    2a52:	98 8d       	ldd	r25, Y+24	; 0x18
    2a54:	26 e0       	ldi	r18, 0x06	; 6
    2a56:	2c 83       	std	Y+4, r18	; 0x04
    2a58:	1a 83       	std	Y+2, r17	; 0x02
    2a5a:	09 83       	std	Y+1, r16	; 0x01
    2a5c:	97 ff       	sbrs	r25, 7
    2a5e:	02 c0       	rjmp	.+4      	; 0x2a64 <snprintf+0x24>
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	90 e8       	ldi	r25, 0x80	; 128
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	9e 83       	std	Y+6, r25	; 0x06
    2a68:	8d 83       	std	Y+5, r24	; 0x05
    2a6a:	ae 01       	movw	r20, r28
    2a6c:	45 5e       	subi	r20, 0xE5	; 229
    2a6e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a70:	69 8d       	ldd	r22, Y+25	; 0x19
    2a72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a74:	ce 01       	movw	r24, r28
    2a76:	01 96       	adiw	r24, 0x01	; 1
    2a78:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <vfprintf>
    2a7c:	4d 81       	ldd	r20, Y+5	; 0x05
    2a7e:	5e 81       	ldd	r21, Y+6	; 0x06
    2a80:	57 fd       	sbrc	r21, 7
    2a82:	0a c0       	rjmp	.+20     	; 0x2a98 <snprintf+0x58>
    2a84:	2f 81       	ldd	r18, Y+7	; 0x07
    2a86:	38 85       	ldd	r19, Y+8	; 0x08
    2a88:	42 17       	cp	r20, r18
    2a8a:	53 07       	cpc	r21, r19
    2a8c:	0c f4       	brge	.+2      	; 0x2a90 <snprintf+0x50>
    2a8e:	9a 01       	movw	r18, r20
    2a90:	f8 01       	movw	r30, r16
    2a92:	e2 0f       	add	r30, r18
    2a94:	f3 1f       	adc	r31, r19
    2a96:	10 82       	st	Z, r1
    2a98:	2e 96       	adiw	r28, 0x0e	; 14
    2a9a:	e4 e0       	ldi	r30, 0x04	; 4
    2a9c:	0c 94 3d 1a 	jmp	0x347a	; 0x347a <__epilogue_restores__+0x1c>

00002aa0 <vfprintf>:
    2aa0:	ab e0       	ldi	r26, 0x0B	; 11
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	e6 e5       	ldi	r30, 0x56	; 86
    2aa6:	f5 e1       	ldi	r31, 0x15	; 21
    2aa8:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__>
    2aac:	6c 01       	movw	r12, r24
    2aae:	7b 01       	movw	r14, r22
    2ab0:	8a 01       	movw	r16, r20
    2ab2:	fc 01       	movw	r30, r24
    2ab4:	17 82       	std	Z+7, r1	; 0x07
    2ab6:	16 82       	std	Z+6, r1	; 0x06
    2ab8:	83 81       	ldd	r24, Z+3	; 0x03
    2aba:	81 ff       	sbrs	r24, 1
    2abc:	cc c1       	rjmp	.+920    	; 0x2e56 <vfprintf+0x3b6>
    2abe:	ce 01       	movw	r24, r28
    2ac0:	01 96       	adiw	r24, 0x01	; 1
    2ac2:	3c 01       	movw	r6, r24
    2ac4:	f6 01       	movw	r30, r12
    2ac6:	93 81       	ldd	r25, Z+3	; 0x03
    2ac8:	f7 01       	movw	r30, r14
    2aca:	93 fd       	sbrc	r25, 3
    2acc:	85 91       	lpm	r24, Z+
    2ace:	93 ff       	sbrs	r25, 3
    2ad0:	81 91       	ld	r24, Z+
    2ad2:	7f 01       	movw	r14, r30
    2ad4:	88 23       	and	r24, r24
    2ad6:	09 f4       	brne	.+2      	; 0x2ada <vfprintf+0x3a>
    2ad8:	ba c1       	rjmp	.+884    	; 0x2e4e <vfprintf+0x3ae>
    2ada:	85 32       	cpi	r24, 0x25	; 37
    2adc:	39 f4       	brne	.+14     	; 0x2aec <vfprintf+0x4c>
    2ade:	93 fd       	sbrc	r25, 3
    2ae0:	85 91       	lpm	r24, Z+
    2ae2:	93 ff       	sbrs	r25, 3
    2ae4:	81 91       	ld	r24, Z+
    2ae6:	7f 01       	movw	r14, r30
    2ae8:	85 32       	cpi	r24, 0x25	; 37
    2aea:	29 f4       	brne	.+10     	; 0x2af6 <vfprintf+0x56>
    2aec:	b6 01       	movw	r22, r12
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2af4:	e7 cf       	rjmp	.-50     	; 0x2ac4 <vfprintf+0x24>
    2af6:	91 2c       	mov	r9, r1
    2af8:	21 2c       	mov	r2, r1
    2afa:	31 2c       	mov	r3, r1
    2afc:	ff e1       	ldi	r31, 0x1F	; 31
    2afe:	f3 15       	cp	r31, r3
    2b00:	d8 f0       	brcs	.+54     	; 0x2b38 <vfprintf+0x98>
    2b02:	8b 32       	cpi	r24, 0x2B	; 43
    2b04:	79 f0       	breq	.+30     	; 0x2b24 <vfprintf+0x84>
    2b06:	38 f4       	brcc	.+14     	; 0x2b16 <vfprintf+0x76>
    2b08:	80 32       	cpi	r24, 0x20	; 32
    2b0a:	79 f0       	breq	.+30     	; 0x2b2a <vfprintf+0x8a>
    2b0c:	83 32       	cpi	r24, 0x23	; 35
    2b0e:	a1 f4       	brne	.+40     	; 0x2b38 <vfprintf+0x98>
    2b10:	23 2d       	mov	r18, r3
    2b12:	20 61       	ori	r18, 0x10	; 16
    2b14:	1d c0       	rjmp	.+58     	; 0x2b50 <vfprintf+0xb0>
    2b16:	8d 32       	cpi	r24, 0x2D	; 45
    2b18:	61 f0       	breq	.+24     	; 0x2b32 <vfprintf+0x92>
    2b1a:	80 33       	cpi	r24, 0x30	; 48
    2b1c:	69 f4       	brne	.+26     	; 0x2b38 <vfprintf+0x98>
    2b1e:	23 2d       	mov	r18, r3
    2b20:	21 60       	ori	r18, 0x01	; 1
    2b22:	16 c0       	rjmp	.+44     	; 0x2b50 <vfprintf+0xb0>
    2b24:	83 2d       	mov	r24, r3
    2b26:	82 60       	ori	r24, 0x02	; 2
    2b28:	38 2e       	mov	r3, r24
    2b2a:	e3 2d       	mov	r30, r3
    2b2c:	e4 60       	ori	r30, 0x04	; 4
    2b2e:	3e 2e       	mov	r3, r30
    2b30:	2a c0       	rjmp	.+84     	; 0x2b86 <vfprintf+0xe6>
    2b32:	f3 2d       	mov	r31, r3
    2b34:	f8 60       	ori	r31, 0x08	; 8
    2b36:	1d c0       	rjmp	.+58     	; 0x2b72 <vfprintf+0xd2>
    2b38:	37 fc       	sbrc	r3, 7
    2b3a:	2d c0       	rjmp	.+90     	; 0x2b96 <vfprintf+0xf6>
    2b3c:	20 ed       	ldi	r18, 0xD0	; 208
    2b3e:	28 0f       	add	r18, r24
    2b40:	2a 30       	cpi	r18, 0x0A	; 10
    2b42:	40 f0       	brcs	.+16     	; 0x2b54 <vfprintf+0xb4>
    2b44:	8e 32       	cpi	r24, 0x2E	; 46
    2b46:	b9 f4       	brne	.+46     	; 0x2b76 <vfprintf+0xd6>
    2b48:	36 fc       	sbrc	r3, 6
    2b4a:	81 c1       	rjmp	.+770    	; 0x2e4e <vfprintf+0x3ae>
    2b4c:	23 2d       	mov	r18, r3
    2b4e:	20 64       	ori	r18, 0x40	; 64
    2b50:	32 2e       	mov	r3, r18
    2b52:	19 c0       	rjmp	.+50     	; 0x2b86 <vfprintf+0xe6>
    2b54:	36 fe       	sbrs	r3, 6
    2b56:	06 c0       	rjmp	.+12     	; 0x2b64 <vfprintf+0xc4>
    2b58:	8a e0       	ldi	r24, 0x0A	; 10
    2b5a:	98 9e       	mul	r9, r24
    2b5c:	20 0d       	add	r18, r0
    2b5e:	11 24       	eor	r1, r1
    2b60:	92 2e       	mov	r9, r18
    2b62:	11 c0       	rjmp	.+34     	; 0x2b86 <vfprintf+0xe6>
    2b64:	ea e0       	ldi	r30, 0x0A	; 10
    2b66:	2e 9e       	mul	r2, r30
    2b68:	20 0d       	add	r18, r0
    2b6a:	11 24       	eor	r1, r1
    2b6c:	22 2e       	mov	r2, r18
    2b6e:	f3 2d       	mov	r31, r3
    2b70:	f0 62       	ori	r31, 0x20	; 32
    2b72:	3f 2e       	mov	r3, r31
    2b74:	08 c0       	rjmp	.+16     	; 0x2b86 <vfprintf+0xe6>
    2b76:	8c 36       	cpi	r24, 0x6C	; 108
    2b78:	21 f4       	brne	.+8      	; 0x2b82 <vfprintf+0xe2>
    2b7a:	83 2d       	mov	r24, r3
    2b7c:	80 68       	ori	r24, 0x80	; 128
    2b7e:	38 2e       	mov	r3, r24
    2b80:	02 c0       	rjmp	.+4      	; 0x2b86 <vfprintf+0xe6>
    2b82:	88 36       	cpi	r24, 0x68	; 104
    2b84:	41 f4       	brne	.+16     	; 0x2b96 <vfprintf+0xf6>
    2b86:	f7 01       	movw	r30, r14
    2b88:	93 fd       	sbrc	r25, 3
    2b8a:	85 91       	lpm	r24, Z+
    2b8c:	93 ff       	sbrs	r25, 3
    2b8e:	81 91       	ld	r24, Z+
    2b90:	7f 01       	movw	r14, r30
    2b92:	81 11       	cpse	r24, r1
    2b94:	b3 cf       	rjmp	.-154    	; 0x2afc <vfprintf+0x5c>
    2b96:	98 2f       	mov	r25, r24
    2b98:	9f 7d       	andi	r25, 0xDF	; 223
    2b9a:	95 54       	subi	r25, 0x45	; 69
    2b9c:	93 30       	cpi	r25, 0x03	; 3
    2b9e:	28 f4       	brcc	.+10     	; 0x2baa <vfprintf+0x10a>
    2ba0:	0c 5f       	subi	r16, 0xFC	; 252
    2ba2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba4:	9f e3       	ldi	r25, 0x3F	; 63
    2ba6:	99 83       	std	Y+1, r25	; 0x01
    2ba8:	0d c0       	rjmp	.+26     	; 0x2bc4 <vfprintf+0x124>
    2baa:	83 36       	cpi	r24, 0x63	; 99
    2bac:	31 f0       	breq	.+12     	; 0x2bba <vfprintf+0x11a>
    2bae:	83 37       	cpi	r24, 0x73	; 115
    2bb0:	71 f0       	breq	.+28     	; 0x2bce <vfprintf+0x12e>
    2bb2:	83 35       	cpi	r24, 0x53	; 83
    2bb4:	09 f0       	breq	.+2      	; 0x2bb8 <vfprintf+0x118>
    2bb6:	59 c0       	rjmp	.+178    	; 0x2c6a <vfprintf+0x1ca>
    2bb8:	21 c0       	rjmp	.+66     	; 0x2bfc <vfprintf+0x15c>
    2bba:	f8 01       	movw	r30, r16
    2bbc:	80 81       	ld	r24, Z
    2bbe:	89 83       	std	Y+1, r24	; 0x01
    2bc0:	0e 5f       	subi	r16, 0xFE	; 254
    2bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc4:	88 24       	eor	r8, r8
    2bc6:	83 94       	inc	r8
    2bc8:	91 2c       	mov	r9, r1
    2bca:	53 01       	movw	r10, r6
    2bcc:	13 c0       	rjmp	.+38     	; 0x2bf4 <vfprintf+0x154>
    2bce:	28 01       	movw	r4, r16
    2bd0:	f2 e0       	ldi	r31, 0x02	; 2
    2bd2:	4f 0e       	add	r4, r31
    2bd4:	51 1c       	adc	r5, r1
    2bd6:	f8 01       	movw	r30, r16
    2bd8:	a0 80       	ld	r10, Z
    2bda:	b1 80       	ldd	r11, Z+1	; 0x01
    2bdc:	36 fe       	sbrs	r3, 6
    2bde:	03 c0       	rjmp	.+6      	; 0x2be6 <vfprintf+0x146>
    2be0:	69 2d       	mov	r22, r9
    2be2:	70 e0       	ldi	r23, 0x00	; 0
    2be4:	02 c0       	rjmp	.+4      	; 0x2bea <vfprintf+0x14a>
    2be6:	6f ef       	ldi	r22, 0xFF	; 255
    2be8:	7f ef       	ldi	r23, 0xFF	; 255
    2bea:	c5 01       	movw	r24, r10
    2bec:	0e 94 6e 19 	call	0x32dc	; 0x32dc <strnlen>
    2bf0:	4c 01       	movw	r8, r24
    2bf2:	82 01       	movw	r16, r4
    2bf4:	f3 2d       	mov	r31, r3
    2bf6:	ff 77       	andi	r31, 0x7F	; 127
    2bf8:	3f 2e       	mov	r3, r31
    2bfa:	16 c0       	rjmp	.+44     	; 0x2c28 <vfprintf+0x188>
    2bfc:	28 01       	movw	r4, r16
    2bfe:	22 e0       	ldi	r18, 0x02	; 2
    2c00:	42 0e       	add	r4, r18
    2c02:	51 1c       	adc	r5, r1
    2c04:	f8 01       	movw	r30, r16
    2c06:	a0 80       	ld	r10, Z
    2c08:	b1 80       	ldd	r11, Z+1	; 0x01
    2c0a:	36 fe       	sbrs	r3, 6
    2c0c:	03 c0       	rjmp	.+6      	; 0x2c14 <vfprintf+0x174>
    2c0e:	69 2d       	mov	r22, r9
    2c10:	70 e0       	ldi	r23, 0x00	; 0
    2c12:	02 c0       	rjmp	.+4      	; 0x2c18 <vfprintf+0x178>
    2c14:	6f ef       	ldi	r22, 0xFF	; 255
    2c16:	7f ef       	ldi	r23, 0xFF	; 255
    2c18:	c5 01       	movw	r24, r10
    2c1a:	0e 94 63 19 	call	0x32c6	; 0x32c6 <strnlen_P>
    2c1e:	4c 01       	movw	r8, r24
    2c20:	f3 2d       	mov	r31, r3
    2c22:	f0 68       	ori	r31, 0x80	; 128
    2c24:	3f 2e       	mov	r3, r31
    2c26:	82 01       	movw	r16, r4
    2c28:	33 fc       	sbrc	r3, 3
    2c2a:	1b c0       	rjmp	.+54     	; 0x2c62 <vfprintf+0x1c2>
    2c2c:	82 2d       	mov	r24, r2
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	88 16       	cp	r8, r24
    2c32:	99 06       	cpc	r9, r25
    2c34:	b0 f4       	brcc	.+44     	; 0x2c62 <vfprintf+0x1c2>
    2c36:	b6 01       	movw	r22, r12
    2c38:	80 e2       	ldi	r24, 0x20	; 32
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2c40:	2a 94       	dec	r2
    2c42:	f4 cf       	rjmp	.-24     	; 0x2c2c <vfprintf+0x18c>
    2c44:	f5 01       	movw	r30, r10
    2c46:	37 fc       	sbrc	r3, 7
    2c48:	85 91       	lpm	r24, Z+
    2c4a:	37 fe       	sbrs	r3, 7
    2c4c:	81 91       	ld	r24, Z+
    2c4e:	5f 01       	movw	r10, r30
    2c50:	b6 01       	movw	r22, r12
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2c58:	21 10       	cpse	r2, r1
    2c5a:	2a 94       	dec	r2
    2c5c:	21 e0       	ldi	r18, 0x01	; 1
    2c5e:	82 1a       	sub	r8, r18
    2c60:	91 08       	sbc	r9, r1
    2c62:	81 14       	cp	r8, r1
    2c64:	91 04       	cpc	r9, r1
    2c66:	71 f7       	brne	.-36     	; 0x2c44 <vfprintf+0x1a4>
    2c68:	e8 c0       	rjmp	.+464    	; 0x2e3a <vfprintf+0x39a>
    2c6a:	84 36       	cpi	r24, 0x64	; 100
    2c6c:	11 f0       	breq	.+4      	; 0x2c72 <vfprintf+0x1d2>
    2c6e:	89 36       	cpi	r24, 0x69	; 105
    2c70:	41 f5       	brne	.+80     	; 0x2cc2 <vfprintf+0x222>
    2c72:	f8 01       	movw	r30, r16
    2c74:	37 fe       	sbrs	r3, 7
    2c76:	07 c0       	rjmp	.+14     	; 0x2c86 <vfprintf+0x1e6>
    2c78:	60 81       	ld	r22, Z
    2c7a:	71 81       	ldd	r23, Z+1	; 0x01
    2c7c:	82 81       	ldd	r24, Z+2	; 0x02
    2c7e:	93 81       	ldd	r25, Z+3	; 0x03
    2c80:	0c 5f       	subi	r16, 0xFC	; 252
    2c82:	1f 4f       	sbci	r17, 0xFF	; 255
    2c84:	08 c0       	rjmp	.+16     	; 0x2c96 <vfprintf+0x1f6>
    2c86:	60 81       	ld	r22, Z
    2c88:	71 81       	ldd	r23, Z+1	; 0x01
    2c8a:	07 2e       	mov	r0, r23
    2c8c:	00 0c       	add	r0, r0
    2c8e:	88 0b       	sbc	r24, r24
    2c90:	99 0b       	sbc	r25, r25
    2c92:	0e 5f       	subi	r16, 0xFE	; 254
    2c94:	1f 4f       	sbci	r17, 0xFF	; 255
    2c96:	f3 2d       	mov	r31, r3
    2c98:	ff 76       	andi	r31, 0x6F	; 111
    2c9a:	3f 2e       	mov	r3, r31
    2c9c:	97 ff       	sbrs	r25, 7
    2c9e:	09 c0       	rjmp	.+18     	; 0x2cb2 <vfprintf+0x212>
    2ca0:	90 95       	com	r25
    2ca2:	80 95       	com	r24
    2ca4:	70 95       	com	r23
    2ca6:	61 95       	neg	r22
    2ca8:	7f 4f       	sbci	r23, 0xFF	; 255
    2caa:	8f 4f       	sbci	r24, 0xFF	; 255
    2cac:	9f 4f       	sbci	r25, 0xFF	; 255
    2cae:	f0 68       	ori	r31, 0x80	; 128
    2cb0:	3f 2e       	mov	r3, r31
    2cb2:	2a e0       	ldi	r18, 0x0A	; 10
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	a3 01       	movw	r20, r6
    2cb8:	0e 94 b5 19 	call	0x336a	; 0x336a <__ultoa_invert>
    2cbc:	88 2e       	mov	r8, r24
    2cbe:	86 18       	sub	r8, r6
    2cc0:	45 c0       	rjmp	.+138    	; 0x2d4c <vfprintf+0x2ac>
    2cc2:	85 37       	cpi	r24, 0x75	; 117
    2cc4:	31 f4       	brne	.+12     	; 0x2cd2 <vfprintf+0x232>
    2cc6:	23 2d       	mov	r18, r3
    2cc8:	2f 7e       	andi	r18, 0xEF	; 239
    2cca:	b2 2e       	mov	r11, r18
    2ccc:	2a e0       	ldi	r18, 0x0A	; 10
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	25 c0       	rjmp	.+74     	; 0x2d1c <vfprintf+0x27c>
    2cd2:	93 2d       	mov	r25, r3
    2cd4:	99 7f       	andi	r25, 0xF9	; 249
    2cd6:	b9 2e       	mov	r11, r25
    2cd8:	8f 36       	cpi	r24, 0x6F	; 111
    2cda:	c1 f0       	breq	.+48     	; 0x2d0c <vfprintf+0x26c>
    2cdc:	18 f4       	brcc	.+6      	; 0x2ce4 <vfprintf+0x244>
    2cde:	88 35       	cpi	r24, 0x58	; 88
    2ce0:	79 f0       	breq	.+30     	; 0x2d00 <vfprintf+0x260>
    2ce2:	b5 c0       	rjmp	.+362    	; 0x2e4e <vfprintf+0x3ae>
    2ce4:	80 37       	cpi	r24, 0x70	; 112
    2ce6:	19 f0       	breq	.+6      	; 0x2cee <vfprintf+0x24e>
    2ce8:	88 37       	cpi	r24, 0x78	; 120
    2cea:	21 f0       	breq	.+8      	; 0x2cf4 <vfprintf+0x254>
    2cec:	b0 c0       	rjmp	.+352    	; 0x2e4e <vfprintf+0x3ae>
    2cee:	e9 2f       	mov	r30, r25
    2cf0:	e0 61       	ori	r30, 0x10	; 16
    2cf2:	be 2e       	mov	r11, r30
    2cf4:	b4 fe       	sbrs	r11, 4
    2cf6:	0d c0       	rjmp	.+26     	; 0x2d12 <vfprintf+0x272>
    2cf8:	fb 2d       	mov	r31, r11
    2cfa:	f4 60       	ori	r31, 0x04	; 4
    2cfc:	bf 2e       	mov	r11, r31
    2cfe:	09 c0       	rjmp	.+18     	; 0x2d12 <vfprintf+0x272>
    2d00:	34 fe       	sbrs	r3, 4
    2d02:	0a c0       	rjmp	.+20     	; 0x2d18 <vfprintf+0x278>
    2d04:	29 2f       	mov	r18, r25
    2d06:	26 60       	ori	r18, 0x06	; 6
    2d08:	b2 2e       	mov	r11, r18
    2d0a:	06 c0       	rjmp	.+12     	; 0x2d18 <vfprintf+0x278>
    2d0c:	28 e0       	ldi	r18, 0x08	; 8
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	05 c0       	rjmp	.+10     	; 0x2d1c <vfprintf+0x27c>
    2d12:	20 e1       	ldi	r18, 0x10	; 16
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	02 c0       	rjmp	.+4      	; 0x2d1c <vfprintf+0x27c>
    2d18:	20 e1       	ldi	r18, 0x10	; 16
    2d1a:	32 e0       	ldi	r19, 0x02	; 2
    2d1c:	f8 01       	movw	r30, r16
    2d1e:	b7 fe       	sbrs	r11, 7
    2d20:	07 c0       	rjmp	.+14     	; 0x2d30 <vfprintf+0x290>
    2d22:	60 81       	ld	r22, Z
    2d24:	71 81       	ldd	r23, Z+1	; 0x01
    2d26:	82 81       	ldd	r24, Z+2	; 0x02
    2d28:	93 81       	ldd	r25, Z+3	; 0x03
    2d2a:	0c 5f       	subi	r16, 0xFC	; 252
    2d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d2e:	06 c0       	rjmp	.+12     	; 0x2d3c <vfprintf+0x29c>
    2d30:	60 81       	ld	r22, Z
    2d32:	71 81       	ldd	r23, Z+1	; 0x01
    2d34:	80 e0       	ldi	r24, 0x00	; 0
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	0e 5f       	subi	r16, 0xFE	; 254
    2d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d3c:	a3 01       	movw	r20, r6
    2d3e:	0e 94 b5 19 	call	0x336a	; 0x336a <__ultoa_invert>
    2d42:	88 2e       	mov	r8, r24
    2d44:	86 18       	sub	r8, r6
    2d46:	fb 2d       	mov	r31, r11
    2d48:	ff 77       	andi	r31, 0x7F	; 127
    2d4a:	3f 2e       	mov	r3, r31
    2d4c:	36 fe       	sbrs	r3, 6
    2d4e:	0d c0       	rjmp	.+26     	; 0x2d6a <vfprintf+0x2ca>
    2d50:	23 2d       	mov	r18, r3
    2d52:	2e 7f       	andi	r18, 0xFE	; 254
    2d54:	a2 2e       	mov	r10, r18
    2d56:	89 14       	cp	r8, r9
    2d58:	58 f4       	brcc	.+22     	; 0x2d70 <vfprintf+0x2d0>
    2d5a:	34 fe       	sbrs	r3, 4
    2d5c:	0b c0       	rjmp	.+22     	; 0x2d74 <vfprintf+0x2d4>
    2d5e:	32 fc       	sbrc	r3, 2
    2d60:	09 c0       	rjmp	.+18     	; 0x2d74 <vfprintf+0x2d4>
    2d62:	83 2d       	mov	r24, r3
    2d64:	8e 7e       	andi	r24, 0xEE	; 238
    2d66:	a8 2e       	mov	r10, r24
    2d68:	05 c0       	rjmp	.+10     	; 0x2d74 <vfprintf+0x2d4>
    2d6a:	b8 2c       	mov	r11, r8
    2d6c:	a3 2c       	mov	r10, r3
    2d6e:	03 c0       	rjmp	.+6      	; 0x2d76 <vfprintf+0x2d6>
    2d70:	b8 2c       	mov	r11, r8
    2d72:	01 c0       	rjmp	.+2      	; 0x2d76 <vfprintf+0x2d6>
    2d74:	b9 2c       	mov	r11, r9
    2d76:	a4 fe       	sbrs	r10, 4
    2d78:	0f c0       	rjmp	.+30     	; 0x2d98 <vfprintf+0x2f8>
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	e8 0d       	add	r30, r8
    2d7e:	f1 1d       	adc	r31, r1
    2d80:	80 81       	ld	r24, Z
    2d82:	80 33       	cpi	r24, 0x30	; 48
    2d84:	21 f4       	brne	.+8      	; 0x2d8e <vfprintf+0x2ee>
    2d86:	9a 2d       	mov	r25, r10
    2d88:	99 7e       	andi	r25, 0xE9	; 233
    2d8a:	a9 2e       	mov	r10, r25
    2d8c:	09 c0       	rjmp	.+18     	; 0x2da0 <vfprintf+0x300>
    2d8e:	a2 fe       	sbrs	r10, 2
    2d90:	06 c0       	rjmp	.+12     	; 0x2d9e <vfprintf+0x2fe>
    2d92:	b3 94       	inc	r11
    2d94:	b3 94       	inc	r11
    2d96:	04 c0       	rjmp	.+8      	; 0x2da0 <vfprintf+0x300>
    2d98:	8a 2d       	mov	r24, r10
    2d9a:	86 78       	andi	r24, 0x86	; 134
    2d9c:	09 f0       	breq	.+2      	; 0x2da0 <vfprintf+0x300>
    2d9e:	b3 94       	inc	r11
    2da0:	a3 fc       	sbrc	r10, 3
    2da2:	11 c0       	rjmp	.+34     	; 0x2dc6 <vfprintf+0x326>
    2da4:	a0 fe       	sbrs	r10, 0
    2da6:	06 c0       	rjmp	.+12     	; 0x2db4 <vfprintf+0x314>
    2da8:	b2 14       	cp	r11, r2
    2daa:	88 f4       	brcc	.+34     	; 0x2dce <vfprintf+0x32e>
    2dac:	28 0c       	add	r2, r8
    2dae:	92 2c       	mov	r9, r2
    2db0:	9b 18       	sub	r9, r11
    2db2:	0e c0       	rjmp	.+28     	; 0x2dd0 <vfprintf+0x330>
    2db4:	b2 14       	cp	r11, r2
    2db6:	60 f4       	brcc	.+24     	; 0x2dd0 <vfprintf+0x330>
    2db8:	b6 01       	movw	r22, r12
    2dba:	80 e2       	ldi	r24, 0x20	; 32
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2dc2:	b3 94       	inc	r11
    2dc4:	f7 cf       	rjmp	.-18     	; 0x2db4 <vfprintf+0x314>
    2dc6:	b2 14       	cp	r11, r2
    2dc8:	18 f4       	brcc	.+6      	; 0x2dd0 <vfprintf+0x330>
    2dca:	2b 18       	sub	r2, r11
    2dcc:	02 c0       	rjmp	.+4      	; 0x2dd2 <vfprintf+0x332>
    2dce:	98 2c       	mov	r9, r8
    2dd0:	21 2c       	mov	r2, r1
    2dd2:	a4 fe       	sbrs	r10, 4
    2dd4:	10 c0       	rjmp	.+32     	; 0x2df6 <vfprintf+0x356>
    2dd6:	b6 01       	movw	r22, r12
    2dd8:	80 e3       	ldi	r24, 0x30	; 48
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2de0:	a2 fe       	sbrs	r10, 2
    2de2:	17 c0       	rjmp	.+46     	; 0x2e12 <vfprintf+0x372>
    2de4:	a1 fc       	sbrc	r10, 1
    2de6:	03 c0       	rjmp	.+6      	; 0x2dee <vfprintf+0x34e>
    2de8:	88 e7       	ldi	r24, 0x78	; 120
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	02 c0       	rjmp	.+4      	; 0x2df2 <vfprintf+0x352>
    2dee:	88 e5       	ldi	r24, 0x58	; 88
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	b6 01       	movw	r22, r12
    2df4:	0c c0       	rjmp	.+24     	; 0x2e0e <vfprintf+0x36e>
    2df6:	8a 2d       	mov	r24, r10
    2df8:	86 78       	andi	r24, 0x86	; 134
    2dfa:	59 f0       	breq	.+22     	; 0x2e12 <vfprintf+0x372>
    2dfc:	a1 fe       	sbrs	r10, 1
    2dfe:	02 c0       	rjmp	.+4      	; 0x2e04 <vfprintf+0x364>
    2e00:	8b e2       	ldi	r24, 0x2B	; 43
    2e02:	01 c0       	rjmp	.+2      	; 0x2e06 <vfprintf+0x366>
    2e04:	80 e2       	ldi	r24, 0x20	; 32
    2e06:	a7 fc       	sbrc	r10, 7
    2e08:	8d e2       	ldi	r24, 0x2D	; 45
    2e0a:	b6 01       	movw	r22, r12
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2e12:	89 14       	cp	r8, r9
    2e14:	38 f4       	brcc	.+14     	; 0x2e24 <vfprintf+0x384>
    2e16:	b6 01       	movw	r22, r12
    2e18:	80 e3       	ldi	r24, 0x30	; 48
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2e20:	9a 94       	dec	r9
    2e22:	f7 cf       	rjmp	.-18     	; 0x2e12 <vfprintf+0x372>
    2e24:	8a 94       	dec	r8
    2e26:	f3 01       	movw	r30, r6
    2e28:	e8 0d       	add	r30, r8
    2e2a:	f1 1d       	adc	r31, r1
    2e2c:	80 81       	ld	r24, Z
    2e2e:	b6 01       	movw	r22, r12
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2e36:	81 10       	cpse	r8, r1
    2e38:	f5 cf       	rjmp	.-22     	; 0x2e24 <vfprintf+0x384>
    2e3a:	22 20       	and	r2, r2
    2e3c:	09 f4       	brne	.+2      	; 0x2e40 <vfprintf+0x3a0>
    2e3e:	42 ce       	rjmp	.-892    	; 0x2ac4 <vfprintf+0x24>
    2e40:	b6 01       	movw	r22, r12
    2e42:	80 e2       	ldi	r24, 0x20	; 32
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	0e 94 79 19 	call	0x32f2	; 0x32f2 <fputc>
    2e4a:	2a 94       	dec	r2
    2e4c:	f6 cf       	rjmp	.-20     	; 0x2e3a <vfprintf+0x39a>
    2e4e:	f6 01       	movw	r30, r12
    2e50:	86 81       	ldd	r24, Z+6	; 0x06
    2e52:	97 81       	ldd	r25, Z+7	; 0x07
    2e54:	02 c0       	rjmp	.+4      	; 0x2e5a <vfprintf+0x3ba>
    2e56:	8f ef       	ldi	r24, 0xFF	; 255
    2e58:	9f ef       	ldi	r25, 0xFF	; 255
    2e5a:	2b 96       	adiw	r28, 0x0b	; 11
    2e5c:	e2 e1       	ldi	r30, 0x12	; 18
    2e5e:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__>

00002e62 <dtoa_prf>:
    2e62:	a9 e0       	ldi	r26, 0x09	; 9
    2e64:	b0 e0       	ldi	r27, 0x00	; 0
    2e66:	e7 e3       	ldi	r30, 0x37	; 55
    2e68:	f7 e1       	ldi	r31, 0x17	; 23
    2e6a:	0c 94 19 1a 	jmp	0x3432	; 0x3432 <__prologue_saves__+0xc>
    2e6e:	6a 01       	movw	r12, r20
    2e70:	12 2f       	mov	r17, r18
    2e72:	b0 2e       	mov	r11, r16
    2e74:	2b e3       	ldi	r18, 0x3B	; 59
    2e76:	20 17       	cp	r18, r16
    2e78:	20 f0       	brcs	.+8      	; 0x2e82 <dtoa_prf+0x20>
    2e7a:	ff 24       	eor	r15, r15
    2e7c:	f3 94       	inc	r15
    2e7e:	f0 0e       	add	r15, r16
    2e80:	02 c0       	rjmp	.+4      	; 0x2e86 <dtoa_prf+0x24>
    2e82:	2c e3       	ldi	r18, 0x3C	; 60
    2e84:	f2 2e       	mov	r15, r18
    2e86:	0f 2d       	mov	r16, r15
    2e88:	27 e0       	ldi	r18, 0x07	; 7
    2e8a:	ae 01       	movw	r20, r28
    2e8c:	4f 5f       	subi	r20, 0xFF	; 255
    2e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e90:	0e 94 8b 18 	call	0x3116	; 0x3116 <__ftoa_engine>
    2e94:	bc 01       	movw	r22, r24
    2e96:	49 81       	ldd	r20, Y+1	; 0x01
    2e98:	84 2f       	mov	r24, r20
    2e9a:	89 70       	andi	r24, 0x09	; 9
    2e9c:	81 30       	cpi	r24, 0x01	; 1
    2e9e:	31 f0       	breq	.+12     	; 0x2eac <dtoa_prf+0x4a>
    2ea0:	e1 fc       	sbrc	r14, 1
    2ea2:	06 c0       	rjmp	.+12     	; 0x2eb0 <dtoa_prf+0x4e>
    2ea4:	e0 fe       	sbrs	r14, 0
    2ea6:	06 c0       	rjmp	.+12     	; 0x2eb4 <dtoa_prf+0x52>
    2ea8:	90 e2       	ldi	r25, 0x20	; 32
    2eaa:	05 c0       	rjmp	.+10     	; 0x2eb6 <dtoa_prf+0x54>
    2eac:	9d e2       	ldi	r25, 0x2D	; 45
    2eae:	03 c0       	rjmp	.+6      	; 0x2eb6 <dtoa_prf+0x54>
    2eb0:	9b e2       	ldi	r25, 0x2B	; 43
    2eb2:	01 c0       	rjmp	.+2      	; 0x2eb6 <dtoa_prf+0x54>
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	5e 2d       	mov	r21, r14
    2eb8:	50 71       	andi	r21, 0x10	; 16
    2eba:	43 ff       	sbrs	r20, 3
    2ebc:	3c c0       	rjmp	.+120    	; 0x2f36 <dtoa_prf+0xd4>
    2ebe:	91 11       	cpse	r25, r1
    2ec0:	02 c0       	rjmp	.+4      	; 0x2ec6 <dtoa_prf+0x64>
    2ec2:	83 e0       	ldi	r24, 0x03	; 3
    2ec4:	01 c0       	rjmp	.+2      	; 0x2ec8 <dtoa_prf+0x66>
    2ec6:	84 e0       	ldi	r24, 0x04	; 4
    2ec8:	81 17       	cp	r24, r17
    2eca:	18 f4       	brcc	.+6      	; 0x2ed2 <dtoa_prf+0x70>
    2ecc:	21 2f       	mov	r18, r17
    2ece:	28 1b       	sub	r18, r24
    2ed0:	01 c0       	rjmp	.+2      	; 0x2ed4 <dtoa_prf+0x72>
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	51 11       	cpse	r21, r1
    2ed6:	0b c0       	rjmp	.+22     	; 0x2eee <dtoa_prf+0x8c>
    2ed8:	f6 01       	movw	r30, r12
    2eda:	82 2f       	mov	r24, r18
    2edc:	30 e2       	ldi	r19, 0x20	; 32
    2ede:	88 23       	and	r24, r24
    2ee0:	19 f0       	breq	.+6      	; 0x2ee8 <dtoa_prf+0x86>
    2ee2:	31 93       	st	Z+, r19
    2ee4:	81 50       	subi	r24, 0x01	; 1
    2ee6:	fb cf       	rjmp	.-10     	; 0x2ede <dtoa_prf+0x7c>
    2ee8:	c2 0e       	add	r12, r18
    2eea:	d1 1c       	adc	r13, r1
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	99 23       	and	r25, r25
    2ef0:	29 f0       	breq	.+10     	; 0x2efc <dtoa_prf+0x9a>
    2ef2:	d6 01       	movw	r26, r12
    2ef4:	9c 93       	st	X, r25
    2ef6:	f6 01       	movw	r30, r12
    2ef8:	31 96       	adiw	r30, 0x01	; 1
    2efa:	6f 01       	movw	r12, r30
    2efc:	c6 01       	movw	r24, r12
    2efe:	03 96       	adiw	r24, 0x03	; 3
    2f00:	e2 fe       	sbrs	r14, 2
    2f02:	0a c0       	rjmp	.+20     	; 0x2f18 <dtoa_prf+0xb6>
    2f04:	3e e4       	ldi	r19, 0x4E	; 78
    2f06:	d6 01       	movw	r26, r12
    2f08:	3c 93       	st	X, r19
    2f0a:	41 e4       	ldi	r20, 0x41	; 65
    2f0c:	11 96       	adiw	r26, 0x01	; 1
    2f0e:	4c 93       	st	X, r20
    2f10:	11 97       	sbiw	r26, 0x01	; 1
    2f12:	12 96       	adiw	r26, 0x02	; 2
    2f14:	3c 93       	st	X, r19
    2f16:	06 c0       	rjmp	.+12     	; 0x2f24 <dtoa_prf+0xc2>
    2f18:	3e e6       	ldi	r19, 0x6E	; 110
    2f1a:	f6 01       	movw	r30, r12
    2f1c:	30 83       	st	Z, r19
    2f1e:	41 e6       	ldi	r20, 0x61	; 97
    2f20:	41 83       	std	Z+1, r20	; 0x01
    2f22:	32 83       	std	Z+2, r19	; 0x02
    2f24:	fc 01       	movw	r30, r24
    2f26:	32 2f       	mov	r19, r18
    2f28:	40 e2       	ldi	r20, 0x20	; 32
    2f2a:	33 23       	and	r19, r19
    2f2c:	09 f4       	brne	.+2      	; 0x2f30 <dtoa_prf+0xce>
    2f2e:	42 c0       	rjmp	.+132    	; 0x2fb4 <dtoa_prf+0x152>
    2f30:	41 93       	st	Z+, r20
    2f32:	31 50       	subi	r19, 0x01	; 1
    2f34:	fa cf       	rjmp	.-12     	; 0x2f2a <dtoa_prf+0xc8>
    2f36:	42 ff       	sbrs	r20, 2
    2f38:	44 c0       	rjmp	.+136    	; 0x2fc2 <dtoa_prf+0x160>
    2f3a:	91 11       	cpse	r25, r1
    2f3c:	02 c0       	rjmp	.+4      	; 0x2f42 <dtoa_prf+0xe0>
    2f3e:	83 e0       	ldi	r24, 0x03	; 3
    2f40:	01 c0       	rjmp	.+2      	; 0x2f44 <dtoa_prf+0xe2>
    2f42:	84 e0       	ldi	r24, 0x04	; 4
    2f44:	81 17       	cp	r24, r17
    2f46:	18 f4       	brcc	.+6      	; 0x2f4e <dtoa_prf+0xec>
    2f48:	21 2f       	mov	r18, r17
    2f4a:	28 1b       	sub	r18, r24
    2f4c:	01 c0       	rjmp	.+2      	; 0x2f50 <dtoa_prf+0xee>
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	51 11       	cpse	r21, r1
    2f52:	0b c0       	rjmp	.+22     	; 0x2f6a <dtoa_prf+0x108>
    2f54:	f6 01       	movw	r30, r12
    2f56:	82 2f       	mov	r24, r18
    2f58:	30 e2       	ldi	r19, 0x20	; 32
    2f5a:	88 23       	and	r24, r24
    2f5c:	19 f0       	breq	.+6      	; 0x2f64 <dtoa_prf+0x102>
    2f5e:	31 93       	st	Z+, r19
    2f60:	81 50       	subi	r24, 0x01	; 1
    2f62:	fb cf       	rjmp	.-10     	; 0x2f5a <dtoa_prf+0xf8>
    2f64:	c2 0e       	add	r12, r18
    2f66:	d1 1c       	adc	r13, r1
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	99 23       	and	r25, r25
    2f6c:	29 f0       	breq	.+10     	; 0x2f78 <dtoa_prf+0x116>
    2f6e:	d6 01       	movw	r26, r12
    2f70:	9c 93       	st	X, r25
    2f72:	f6 01       	movw	r30, r12
    2f74:	31 96       	adiw	r30, 0x01	; 1
    2f76:	6f 01       	movw	r12, r30
    2f78:	c6 01       	movw	r24, r12
    2f7a:	03 96       	adiw	r24, 0x03	; 3
    2f7c:	e2 fe       	sbrs	r14, 2
    2f7e:	0b c0       	rjmp	.+22     	; 0x2f96 <dtoa_prf+0x134>
    2f80:	39 e4       	ldi	r19, 0x49	; 73
    2f82:	d6 01       	movw	r26, r12
    2f84:	3c 93       	st	X, r19
    2f86:	3e e4       	ldi	r19, 0x4E	; 78
    2f88:	11 96       	adiw	r26, 0x01	; 1
    2f8a:	3c 93       	st	X, r19
    2f8c:	11 97       	sbiw	r26, 0x01	; 1
    2f8e:	36 e4       	ldi	r19, 0x46	; 70
    2f90:	12 96       	adiw	r26, 0x02	; 2
    2f92:	3c 93       	st	X, r19
    2f94:	07 c0       	rjmp	.+14     	; 0x2fa4 <dtoa_prf+0x142>
    2f96:	39 e6       	ldi	r19, 0x69	; 105
    2f98:	f6 01       	movw	r30, r12
    2f9a:	30 83       	st	Z, r19
    2f9c:	3e e6       	ldi	r19, 0x6E	; 110
    2f9e:	31 83       	std	Z+1, r19	; 0x01
    2fa0:	36 e6       	ldi	r19, 0x66	; 102
    2fa2:	32 83       	std	Z+2, r19	; 0x02
    2fa4:	fc 01       	movw	r30, r24
    2fa6:	32 2f       	mov	r19, r18
    2fa8:	40 e2       	ldi	r20, 0x20	; 32
    2faa:	33 23       	and	r19, r19
    2fac:	19 f0       	breq	.+6      	; 0x2fb4 <dtoa_prf+0x152>
    2fae:	41 93       	st	Z+, r20
    2fb0:	31 50       	subi	r19, 0x01	; 1
    2fb2:	fb cf       	rjmp	.-10     	; 0x2faa <dtoa_prf+0x148>
    2fb4:	fc 01       	movw	r30, r24
    2fb6:	e2 0f       	add	r30, r18
    2fb8:	f1 1d       	adc	r31, r1
    2fba:	10 82       	st	Z, r1
    2fbc:	8e ef       	ldi	r24, 0xFE	; 254
    2fbe:	9f ef       	ldi	r25, 0xFF	; 255
    2fc0:	a6 c0       	rjmp	.+332    	; 0x310e <dtoa_prf+0x2ac>
    2fc2:	21 e0       	ldi	r18, 0x01	; 1
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	91 11       	cpse	r25, r1
    2fc8:	02 c0       	rjmp	.+4      	; 0x2fce <dtoa_prf+0x16c>
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	16 16       	cp	r1, r22
    2fd0:	17 06       	cpc	r1, r23
    2fd2:	1c f4       	brge	.+6      	; 0x2fda <dtoa_prf+0x178>
    2fd4:	fb 01       	movw	r30, r22
    2fd6:	31 96       	adiw	r30, 0x01	; 1
    2fd8:	02 c0       	rjmp	.+4      	; 0x2fde <dtoa_prf+0x17c>
    2fda:	e1 e0       	ldi	r30, 0x01	; 1
    2fdc:	f0 e0       	ldi	r31, 0x00	; 0
    2fde:	2e 0f       	add	r18, r30
    2fe0:	3f 1f       	adc	r19, r31
    2fe2:	bb 20       	and	r11, r11
    2fe4:	21 f0       	breq	.+8      	; 0x2fee <dtoa_prf+0x18c>
    2fe6:	eb 2d       	mov	r30, r11
    2fe8:	f0 e0       	ldi	r31, 0x00	; 0
    2fea:	31 96       	adiw	r30, 0x01	; 1
    2fec:	02 c0       	rjmp	.+4      	; 0x2ff2 <dtoa_prf+0x190>
    2fee:	e0 e0       	ldi	r30, 0x00	; 0
    2ff0:	f0 e0       	ldi	r31, 0x00	; 0
    2ff2:	2e 0f       	add	r18, r30
    2ff4:	3f 1f       	adc	r19, r31
    2ff6:	e1 2f       	mov	r30, r17
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	2e 17       	cp	r18, r30
    2ffc:	3f 07       	cpc	r19, r31
    2ffe:	1c f4       	brge	.+6      	; 0x3006 <dtoa_prf+0x1a4>
    3000:	12 1b       	sub	r17, r18
    3002:	21 2f       	mov	r18, r17
    3004:	01 c0       	rjmp	.+2      	; 0x3008 <dtoa_prf+0x1a6>
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	8e 2d       	mov	r24, r14
    300a:	88 71       	andi	r24, 0x18	; 24
    300c:	59 f4       	brne	.+22     	; 0x3024 <dtoa_prf+0x1c2>
    300e:	f6 01       	movw	r30, r12
    3010:	82 2f       	mov	r24, r18
    3012:	30 e2       	ldi	r19, 0x20	; 32
    3014:	88 23       	and	r24, r24
    3016:	19 f0       	breq	.+6      	; 0x301e <dtoa_prf+0x1bc>
    3018:	31 93       	st	Z+, r19
    301a:	81 50       	subi	r24, 0x01	; 1
    301c:	fb cf       	rjmp	.-10     	; 0x3014 <dtoa_prf+0x1b2>
    301e:	c2 0e       	add	r12, r18
    3020:	d1 1c       	adc	r13, r1
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	99 23       	and	r25, r25
    3026:	29 f0       	breq	.+10     	; 0x3032 <dtoa_prf+0x1d0>
    3028:	d6 01       	movw	r26, r12
    302a:	9c 93       	st	X, r25
    302c:	f6 01       	movw	r30, r12
    302e:	31 96       	adiw	r30, 0x01	; 1
    3030:	6f 01       	movw	r12, r30
    3032:	51 11       	cpse	r21, r1
    3034:	0b c0       	rjmp	.+22     	; 0x304c <dtoa_prf+0x1ea>
    3036:	f6 01       	movw	r30, r12
    3038:	82 2f       	mov	r24, r18
    303a:	90 e3       	ldi	r25, 0x30	; 48
    303c:	88 23       	and	r24, r24
    303e:	19 f0       	breq	.+6      	; 0x3046 <dtoa_prf+0x1e4>
    3040:	91 93       	st	Z+, r25
    3042:	81 50       	subi	r24, 0x01	; 1
    3044:	fb cf       	rjmp	.-10     	; 0x303c <dtoa_prf+0x1da>
    3046:	c2 0e       	add	r12, r18
    3048:	d1 1c       	adc	r13, r1
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	0f 2d       	mov	r16, r15
    304e:	06 0f       	add	r16, r22
    3050:	9a 81       	ldd	r25, Y+2	; 0x02
    3052:	34 2f       	mov	r19, r20
    3054:	30 71       	andi	r19, 0x10	; 16
    3056:	44 ff       	sbrs	r20, 4
    3058:	03 c0       	rjmp	.+6      	; 0x3060 <dtoa_prf+0x1fe>
    305a:	91 33       	cpi	r25, 0x31	; 49
    305c:	09 f4       	brne	.+2      	; 0x3060 <dtoa_prf+0x1fe>
    305e:	01 50       	subi	r16, 0x01	; 1
    3060:	10 16       	cp	r1, r16
    3062:	24 f4       	brge	.+8      	; 0x306c <dtoa_prf+0x20a>
    3064:	09 30       	cpi	r16, 0x09	; 9
    3066:	18 f0       	brcs	.+6      	; 0x306e <dtoa_prf+0x20c>
    3068:	08 e0       	ldi	r16, 0x08	; 8
    306a:	01 c0       	rjmp	.+2      	; 0x306e <dtoa_prf+0x20c>
    306c:	01 e0       	ldi	r16, 0x01	; 1
    306e:	ab 01       	movw	r20, r22
    3070:	77 ff       	sbrs	r23, 7
    3072:	02 c0       	rjmp	.+4      	; 0x3078 <dtoa_prf+0x216>
    3074:	40 e0       	ldi	r20, 0x00	; 0
    3076:	50 e0       	ldi	r21, 0x00	; 0
    3078:	fb 01       	movw	r30, r22
    307a:	e4 1b       	sub	r30, r20
    307c:	f5 0b       	sbc	r31, r21
    307e:	a1 e0       	ldi	r26, 0x01	; 1
    3080:	b0 e0       	ldi	r27, 0x00	; 0
    3082:	ac 0f       	add	r26, r28
    3084:	bd 1f       	adc	r27, r29
    3086:	ea 0f       	add	r30, r26
    3088:	fb 1f       	adc	r31, r27
    308a:	8e e2       	ldi	r24, 0x2E	; 46
    308c:	a8 2e       	mov	r10, r24
    308e:	4b 01       	movw	r8, r22
    3090:	80 1a       	sub	r8, r16
    3092:	91 08       	sbc	r9, r1
    3094:	0b 2d       	mov	r16, r11
    3096:	10 e0       	ldi	r17, 0x00	; 0
    3098:	11 95       	neg	r17
    309a:	01 95       	neg	r16
    309c:	11 09       	sbc	r17, r1
    309e:	4f 3f       	cpi	r20, 0xFF	; 255
    30a0:	bf ef       	ldi	r27, 0xFF	; 255
    30a2:	5b 07       	cpc	r21, r27
    30a4:	21 f4       	brne	.+8      	; 0x30ae <dtoa_prf+0x24c>
    30a6:	d6 01       	movw	r26, r12
    30a8:	ac 92       	st	X, r10
    30aa:	11 96       	adiw	r26, 0x01	; 1
    30ac:	6d 01       	movw	r12, r26
    30ae:	64 17       	cp	r22, r20
    30b0:	75 07       	cpc	r23, r21
    30b2:	2c f0       	brlt	.+10     	; 0x30be <dtoa_prf+0x25c>
    30b4:	84 16       	cp	r8, r20
    30b6:	95 06       	cpc	r9, r21
    30b8:	14 f4       	brge	.+4      	; 0x30be <dtoa_prf+0x25c>
    30ba:	81 81       	ldd	r24, Z+1	; 0x01
    30bc:	01 c0       	rjmp	.+2      	; 0x30c0 <dtoa_prf+0x25e>
    30be:	80 e3       	ldi	r24, 0x30	; 48
    30c0:	41 50       	subi	r20, 0x01	; 1
    30c2:	51 09       	sbc	r21, r1
    30c4:	31 96       	adiw	r30, 0x01	; 1
    30c6:	d6 01       	movw	r26, r12
    30c8:	11 96       	adiw	r26, 0x01	; 1
    30ca:	7d 01       	movw	r14, r26
    30cc:	40 17       	cp	r20, r16
    30ce:	51 07       	cpc	r21, r17
    30d0:	24 f0       	brlt	.+8      	; 0x30da <dtoa_prf+0x278>
    30d2:	d6 01       	movw	r26, r12
    30d4:	8c 93       	st	X, r24
    30d6:	67 01       	movw	r12, r14
    30d8:	e2 cf       	rjmp	.-60     	; 0x309e <dtoa_prf+0x23c>
    30da:	64 17       	cp	r22, r20
    30dc:	75 07       	cpc	r23, r21
    30de:	39 f4       	brne	.+14     	; 0x30ee <dtoa_prf+0x28c>
    30e0:	96 33       	cpi	r25, 0x36	; 54
    30e2:	20 f4       	brcc	.+8      	; 0x30ec <dtoa_prf+0x28a>
    30e4:	95 33       	cpi	r25, 0x35	; 53
    30e6:	19 f4       	brne	.+6      	; 0x30ee <dtoa_prf+0x28c>
    30e8:	31 11       	cpse	r19, r1
    30ea:	01 c0       	rjmp	.+2      	; 0x30ee <dtoa_prf+0x28c>
    30ec:	81 e3       	ldi	r24, 0x31	; 49
    30ee:	f6 01       	movw	r30, r12
    30f0:	80 83       	st	Z, r24
    30f2:	f7 01       	movw	r30, r14
    30f4:	82 2f       	mov	r24, r18
    30f6:	90 e2       	ldi	r25, 0x20	; 32
    30f8:	88 23       	and	r24, r24
    30fa:	19 f0       	breq	.+6      	; 0x3102 <dtoa_prf+0x2a0>
    30fc:	91 93       	st	Z+, r25
    30fe:	81 50       	subi	r24, 0x01	; 1
    3100:	fb cf       	rjmp	.-10     	; 0x30f8 <dtoa_prf+0x296>
    3102:	f7 01       	movw	r30, r14
    3104:	e2 0f       	add	r30, r18
    3106:	f1 1d       	adc	r31, r1
    3108:	10 82       	st	Z, r1
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	29 96       	adiw	r28, 0x09	; 9
    3110:	ec e0       	ldi	r30, 0x0C	; 12
    3112:	0c 94 35 1a 	jmp	0x346a	; 0x346a <__epilogue_restores__+0xc>

00003116 <__ftoa_engine>:
    3116:	28 30       	cpi	r18, 0x08	; 8
    3118:	08 f0       	brcs	.+2      	; 0x311c <__ftoa_engine+0x6>
    311a:	27 e0       	ldi	r18, 0x07	; 7
    311c:	33 27       	eor	r19, r19
    311e:	da 01       	movw	r26, r20
    3120:	99 0f       	add	r25, r25
    3122:	31 1d       	adc	r19, r1
    3124:	87 fd       	sbrc	r24, 7
    3126:	91 60       	ori	r25, 0x01	; 1
    3128:	00 96       	adiw	r24, 0x00	; 0
    312a:	61 05       	cpc	r22, r1
    312c:	71 05       	cpc	r23, r1
    312e:	39 f4       	brne	.+14     	; 0x313e <__ftoa_engine+0x28>
    3130:	32 60       	ori	r19, 0x02	; 2
    3132:	2e 5f       	subi	r18, 0xFE	; 254
    3134:	3d 93       	st	X+, r19
    3136:	30 e3       	ldi	r19, 0x30	; 48
    3138:	2a 95       	dec	r18
    313a:	e1 f7       	brne	.-8      	; 0x3134 <__ftoa_engine+0x1e>
    313c:	08 95       	ret
    313e:	9f 3f       	cpi	r25, 0xFF	; 255
    3140:	30 f0       	brcs	.+12     	; 0x314e <__ftoa_engine+0x38>
    3142:	80 38       	cpi	r24, 0x80	; 128
    3144:	71 05       	cpc	r23, r1
    3146:	61 05       	cpc	r22, r1
    3148:	09 f0       	breq	.+2      	; 0x314c <__ftoa_engine+0x36>
    314a:	3c 5f       	subi	r19, 0xFC	; 252
    314c:	3c 5f       	subi	r19, 0xFC	; 252
    314e:	3d 93       	st	X+, r19
    3150:	91 30       	cpi	r25, 0x01	; 1
    3152:	08 f0       	brcs	.+2      	; 0x3156 <__ftoa_engine+0x40>
    3154:	80 68       	ori	r24, 0x80	; 128
    3156:	91 1d       	adc	r25, r1
    3158:	df 93       	push	r29
    315a:	cf 93       	push	r28
    315c:	1f 93       	push	r17
    315e:	0f 93       	push	r16
    3160:	ff 92       	push	r15
    3162:	ef 92       	push	r14
    3164:	19 2f       	mov	r17, r25
    3166:	98 7f       	andi	r25, 0xF8	; 248
    3168:	96 95       	lsr	r25
    316a:	e9 2f       	mov	r30, r25
    316c:	96 95       	lsr	r25
    316e:	96 95       	lsr	r25
    3170:	e9 0f       	add	r30, r25
    3172:	ff 27       	eor	r31, r31
    3174:	e0 53       	subi	r30, 0x30	; 48
    3176:	ff 4f       	sbci	r31, 0xFF	; 255
    3178:	99 27       	eor	r25, r25
    317a:	33 27       	eor	r19, r19
    317c:	ee 24       	eor	r14, r14
    317e:	ff 24       	eor	r15, r15
    3180:	a7 01       	movw	r20, r14
    3182:	e7 01       	movw	r28, r14
    3184:	05 90       	lpm	r0, Z+
    3186:	08 94       	sec
    3188:	07 94       	ror	r0
    318a:	28 f4       	brcc	.+10     	; 0x3196 <__ftoa_engine+0x80>
    318c:	36 0f       	add	r19, r22
    318e:	e7 1e       	adc	r14, r23
    3190:	f8 1e       	adc	r15, r24
    3192:	49 1f       	adc	r20, r25
    3194:	51 1d       	adc	r21, r1
    3196:	66 0f       	add	r22, r22
    3198:	77 1f       	adc	r23, r23
    319a:	88 1f       	adc	r24, r24
    319c:	99 1f       	adc	r25, r25
    319e:	06 94       	lsr	r0
    31a0:	a1 f7       	brne	.-24     	; 0x318a <__ftoa_engine+0x74>
    31a2:	05 90       	lpm	r0, Z+
    31a4:	07 94       	ror	r0
    31a6:	28 f4       	brcc	.+10     	; 0x31b2 <__ftoa_engine+0x9c>
    31a8:	e7 0e       	add	r14, r23
    31aa:	f8 1e       	adc	r15, r24
    31ac:	49 1f       	adc	r20, r25
    31ae:	56 1f       	adc	r21, r22
    31b0:	c1 1d       	adc	r28, r1
    31b2:	77 0f       	add	r23, r23
    31b4:	88 1f       	adc	r24, r24
    31b6:	99 1f       	adc	r25, r25
    31b8:	66 1f       	adc	r22, r22
    31ba:	06 94       	lsr	r0
    31bc:	a1 f7       	brne	.-24     	; 0x31a6 <__ftoa_engine+0x90>
    31be:	05 90       	lpm	r0, Z+
    31c0:	07 94       	ror	r0
    31c2:	28 f4       	brcc	.+10     	; 0x31ce <__ftoa_engine+0xb8>
    31c4:	f8 0e       	add	r15, r24
    31c6:	49 1f       	adc	r20, r25
    31c8:	56 1f       	adc	r21, r22
    31ca:	c7 1f       	adc	r28, r23
    31cc:	d1 1d       	adc	r29, r1
    31ce:	88 0f       	add	r24, r24
    31d0:	99 1f       	adc	r25, r25
    31d2:	66 1f       	adc	r22, r22
    31d4:	77 1f       	adc	r23, r23
    31d6:	06 94       	lsr	r0
    31d8:	a1 f7       	brne	.-24     	; 0x31c2 <__ftoa_engine+0xac>
    31da:	05 90       	lpm	r0, Z+
    31dc:	07 94       	ror	r0
    31de:	20 f4       	brcc	.+8      	; 0x31e8 <__ftoa_engine+0xd2>
    31e0:	49 0f       	add	r20, r25
    31e2:	56 1f       	adc	r21, r22
    31e4:	c7 1f       	adc	r28, r23
    31e6:	d8 1f       	adc	r29, r24
    31e8:	99 0f       	add	r25, r25
    31ea:	66 1f       	adc	r22, r22
    31ec:	77 1f       	adc	r23, r23
    31ee:	88 1f       	adc	r24, r24
    31f0:	06 94       	lsr	r0
    31f2:	a9 f7       	brne	.-22     	; 0x31de <__ftoa_engine+0xc8>
    31f4:	84 91       	lpm	r24, Z
    31f6:	10 95       	com	r17
    31f8:	17 70       	andi	r17, 0x07	; 7
    31fa:	41 f0       	breq	.+16     	; 0x320c <__ftoa_engine+0xf6>
    31fc:	d6 95       	lsr	r29
    31fe:	c7 95       	ror	r28
    3200:	57 95       	ror	r21
    3202:	47 95       	ror	r20
    3204:	f7 94       	ror	r15
    3206:	e7 94       	ror	r14
    3208:	1a 95       	dec	r17
    320a:	c1 f7       	brne	.-16     	; 0x31fc <__ftoa_engine+0xe6>
    320c:	e6 e7       	ldi	r30, 0x76	; 118
    320e:	f0 e0       	ldi	r31, 0x00	; 0
    3210:	68 94       	set
    3212:	15 90       	lpm	r1, Z+
    3214:	15 91       	lpm	r17, Z+
    3216:	35 91       	lpm	r19, Z+
    3218:	65 91       	lpm	r22, Z+
    321a:	95 91       	lpm	r25, Z+
    321c:	05 90       	lpm	r0, Z+
    321e:	7f e2       	ldi	r23, 0x2F	; 47
    3220:	73 95       	inc	r23
    3222:	e1 18       	sub	r14, r1
    3224:	f1 0a       	sbc	r15, r17
    3226:	43 0b       	sbc	r20, r19
    3228:	56 0b       	sbc	r21, r22
    322a:	c9 0b       	sbc	r28, r25
    322c:	d0 09       	sbc	r29, r0
    322e:	c0 f7       	brcc	.-16     	; 0x3220 <__ftoa_engine+0x10a>
    3230:	e1 0c       	add	r14, r1
    3232:	f1 1e       	adc	r15, r17
    3234:	43 1f       	adc	r20, r19
    3236:	56 1f       	adc	r21, r22
    3238:	c9 1f       	adc	r28, r25
    323a:	d0 1d       	adc	r29, r0
    323c:	7e f4       	brtc	.+30     	; 0x325c <__ftoa_engine+0x146>
    323e:	70 33       	cpi	r23, 0x30	; 48
    3240:	11 f4       	brne	.+4      	; 0x3246 <__ftoa_engine+0x130>
    3242:	8a 95       	dec	r24
    3244:	e6 cf       	rjmp	.-52     	; 0x3212 <__ftoa_engine+0xfc>
    3246:	e8 94       	clt
    3248:	01 50       	subi	r16, 0x01	; 1
    324a:	30 f0       	brcs	.+12     	; 0x3258 <__ftoa_engine+0x142>
    324c:	08 0f       	add	r16, r24
    324e:	0a f4       	brpl	.+2      	; 0x3252 <__ftoa_engine+0x13c>
    3250:	00 27       	eor	r16, r16
    3252:	02 17       	cp	r16, r18
    3254:	08 f4       	brcc	.+2      	; 0x3258 <__ftoa_engine+0x142>
    3256:	20 2f       	mov	r18, r16
    3258:	23 95       	inc	r18
    325a:	02 2f       	mov	r16, r18
    325c:	7a 33       	cpi	r23, 0x3A	; 58
    325e:	28 f0       	brcs	.+10     	; 0x326a <__ftoa_engine+0x154>
    3260:	79 e3       	ldi	r23, 0x39	; 57
    3262:	7d 93       	st	X+, r23
    3264:	2a 95       	dec	r18
    3266:	e9 f7       	brne	.-6      	; 0x3262 <__ftoa_engine+0x14c>
    3268:	10 c0       	rjmp	.+32     	; 0x328a <__ftoa_engine+0x174>
    326a:	7d 93       	st	X+, r23
    326c:	2a 95       	dec	r18
    326e:	89 f6       	brne	.-94     	; 0x3212 <__ftoa_engine+0xfc>
    3270:	06 94       	lsr	r0
    3272:	97 95       	ror	r25
    3274:	67 95       	ror	r22
    3276:	37 95       	ror	r19
    3278:	17 95       	ror	r17
    327a:	17 94       	ror	r1
    327c:	e1 18       	sub	r14, r1
    327e:	f1 0a       	sbc	r15, r17
    3280:	43 0b       	sbc	r20, r19
    3282:	56 0b       	sbc	r21, r22
    3284:	c9 0b       	sbc	r28, r25
    3286:	d0 09       	sbc	r29, r0
    3288:	98 f0       	brcs	.+38     	; 0x32b0 <__ftoa_engine+0x19a>
    328a:	23 95       	inc	r18
    328c:	7e 91       	ld	r23, -X
    328e:	73 95       	inc	r23
    3290:	7a 33       	cpi	r23, 0x3A	; 58
    3292:	08 f0       	brcs	.+2      	; 0x3296 <__ftoa_engine+0x180>
    3294:	70 e3       	ldi	r23, 0x30	; 48
    3296:	7c 93       	st	X, r23
    3298:	20 13       	cpse	r18, r16
    329a:	b8 f7       	brcc	.-18     	; 0x328a <__ftoa_engine+0x174>
    329c:	7e 91       	ld	r23, -X
    329e:	70 61       	ori	r23, 0x10	; 16
    32a0:	7d 93       	st	X+, r23
    32a2:	30 f0       	brcs	.+12     	; 0x32b0 <__ftoa_engine+0x19a>
    32a4:	83 95       	inc	r24
    32a6:	71 e3       	ldi	r23, 0x31	; 49
    32a8:	7d 93       	st	X+, r23
    32aa:	70 e3       	ldi	r23, 0x30	; 48
    32ac:	2a 95       	dec	r18
    32ae:	e1 f7       	brne	.-8      	; 0x32a8 <__ftoa_engine+0x192>
    32b0:	11 24       	eor	r1, r1
    32b2:	ef 90       	pop	r14
    32b4:	ff 90       	pop	r15
    32b6:	0f 91       	pop	r16
    32b8:	1f 91       	pop	r17
    32ba:	cf 91       	pop	r28
    32bc:	df 91       	pop	r29
    32be:	99 27       	eor	r25, r25
    32c0:	87 fd       	sbrc	r24, 7
    32c2:	90 95       	com	r25
    32c4:	08 95       	ret

000032c6 <strnlen_P>:
    32c6:	fc 01       	movw	r30, r24
    32c8:	05 90       	lpm	r0, Z+
    32ca:	61 50       	subi	r22, 0x01	; 1
    32cc:	70 40       	sbci	r23, 0x00	; 0
    32ce:	01 10       	cpse	r0, r1
    32d0:	d8 f7       	brcc	.-10     	; 0x32c8 <strnlen_P+0x2>
    32d2:	80 95       	com	r24
    32d4:	90 95       	com	r25
    32d6:	8e 0f       	add	r24, r30
    32d8:	9f 1f       	adc	r25, r31
    32da:	08 95       	ret

000032dc <strnlen>:
    32dc:	fc 01       	movw	r30, r24
    32de:	61 50       	subi	r22, 0x01	; 1
    32e0:	70 40       	sbci	r23, 0x00	; 0
    32e2:	01 90       	ld	r0, Z+
    32e4:	01 10       	cpse	r0, r1
    32e6:	d8 f7       	brcc	.-10     	; 0x32de <strnlen+0x2>
    32e8:	80 95       	com	r24
    32ea:	90 95       	com	r25
    32ec:	8e 0f       	add	r24, r30
    32ee:	9f 1f       	adc	r25, r31
    32f0:	08 95       	ret

000032f2 <fputc>:
    32f2:	0f 93       	push	r16
    32f4:	1f 93       	push	r17
    32f6:	cf 93       	push	r28
    32f8:	df 93       	push	r29
    32fa:	fb 01       	movw	r30, r22
    32fc:	23 81       	ldd	r18, Z+3	; 0x03
    32fe:	21 fd       	sbrc	r18, 1
    3300:	03 c0       	rjmp	.+6      	; 0x3308 <fputc+0x16>
    3302:	8f ef       	ldi	r24, 0xFF	; 255
    3304:	9f ef       	ldi	r25, 0xFF	; 255
    3306:	2c c0       	rjmp	.+88     	; 0x3360 <fputc+0x6e>
    3308:	22 ff       	sbrs	r18, 2
    330a:	16 c0       	rjmp	.+44     	; 0x3338 <fputc+0x46>
    330c:	46 81       	ldd	r20, Z+6	; 0x06
    330e:	57 81       	ldd	r21, Z+7	; 0x07
    3310:	24 81       	ldd	r18, Z+4	; 0x04
    3312:	35 81       	ldd	r19, Z+5	; 0x05
    3314:	42 17       	cp	r20, r18
    3316:	53 07       	cpc	r21, r19
    3318:	44 f4       	brge	.+16     	; 0x332a <fputc+0x38>
    331a:	a0 81       	ld	r26, Z
    331c:	b1 81       	ldd	r27, Z+1	; 0x01
    331e:	9d 01       	movw	r18, r26
    3320:	2f 5f       	subi	r18, 0xFF	; 255
    3322:	3f 4f       	sbci	r19, 0xFF	; 255
    3324:	31 83       	std	Z+1, r19	; 0x01
    3326:	20 83       	st	Z, r18
    3328:	8c 93       	st	X, r24
    332a:	26 81       	ldd	r18, Z+6	; 0x06
    332c:	37 81       	ldd	r19, Z+7	; 0x07
    332e:	2f 5f       	subi	r18, 0xFF	; 255
    3330:	3f 4f       	sbci	r19, 0xFF	; 255
    3332:	37 83       	std	Z+7, r19	; 0x07
    3334:	26 83       	std	Z+6, r18	; 0x06
    3336:	14 c0       	rjmp	.+40     	; 0x3360 <fputc+0x6e>
    3338:	8b 01       	movw	r16, r22
    333a:	ec 01       	movw	r28, r24
    333c:	fb 01       	movw	r30, r22
    333e:	00 84       	ldd	r0, Z+8	; 0x08
    3340:	f1 85       	ldd	r31, Z+9	; 0x09
    3342:	e0 2d       	mov	r30, r0
    3344:	09 95       	icall
    3346:	89 2b       	or	r24, r25
    3348:	e1 f6       	brne	.-72     	; 0x3302 <fputc+0x10>
    334a:	d8 01       	movw	r26, r16
    334c:	16 96       	adiw	r26, 0x06	; 6
    334e:	8d 91       	ld	r24, X+
    3350:	9c 91       	ld	r25, X
    3352:	17 97       	sbiw	r26, 0x07	; 7
    3354:	01 96       	adiw	r24, 0x01	; 1
    3356:	17 96       	adiw	r26, 0x07	; 7
    3358:	9c 93       	st	X, r25
    335a:	8e 93       	st	-X, r24
    335c:	16 97       	sbiw	r26, 0x06	; 6
    335e:	ce 01       	movw	r24, r28
    3360:	df 91       	pop	r29
    3362:	cf 91       	pop	r28
    3364:	1f 91       	pop	r17
    3366:	0f 91       	pop	r16
    3368:	08 95       	ret

0000336a <__ultoa_invert>:
    336a:	fa 01       	movw	r30, r20
    336c:	aa 27       	eor	r26, r26
    336e:	28 30       	cpi	r18, 0x08	; 8
    3370:	51 f1       	breq	.+84     	; 0x33c6 <__ultoa_invert+0x5c>
    3372:	20 31       	cpi	r18, 0x10	; 16
    3374:	81 f1       	breq	.+96     	; 0x33d6 <__ultoa_invert+0x6c>
    3376:	e8 94       	clt
    3378:	6f 93       	push	r22
    337a:	6e 7f       	andi	r22, 0xFE	; 254
    337c:	6e 5f       	subi	r22, 0xFE	; 254
    337e:	7f 4f       	sbci	r23, 0xFF	; 255
    3380:	8f 4f       	sbci	r24, 0xFF	; 255
    3382:	9f 4f       	sbci	r25, 0xFF	; 255
    3384:	af 4f       	sbci	r26, 0xFF	; 255
    3386:	b1 e0       	ldi	r27, 0x01	; 1
    3388:	3e d0       	rcall	.+124    	; 0x3406 <__ultoa_invert+0x9c>
    338a:	b4 e0       	ldi	r27, 0x04	; 4
    338c:	3c d0       	rcall	.+120    	; 0x3406 <__ultoa_invert+0x9c>
    338e:	67 0f       	add	r22, r23
    3390:	78 1f       	adc	r23, r24
    3392:	89 1f       	adc	r24, r25
    3394:	9a 1f       	adc	r25, r26
    3396:	a1 1d       	adc	r26, r1
    3398:	68 0f       	add	r22, r24
    339a:	79 1f       	adc	r23, r25
    339c:	8a 1f       	adc	r24, r26
    339e:	91 1d       	adc	r25, r1
    33a0:	a1 1d       	adc	r26, r1
    33a2:	6a 0f       	add	r22, r26
    33a4:	71 1d       	adc	r23, r1
    33a6:	81 1d       	adc	r24, r1
    33a8:	91 1d       	adc	r25, r1
    33aa:	a1 1d       	adc	r26, r1
    33ac:	20 d0       	rcall	.+64     	; 0x33ee <__ultoa_invert+0x84>
    33ae:	09 f4       	brne	.+2      	; 0x33b2 <__ultoa_invert+0x48>
    33b0:	68 94       	set
    33b2:	3f 91       	pop	r19
    33b4:	2a e0       	ldi	r18, 0x0A	; 10
    33b6:	26 9f       	mul	r18, r22
    33b8:	11 24       	eor	r1, r1
    33ba:	30 19       	sub	r19, r0
    33bc:	30 5d       	subi	r19, 0xD0	; 208
    33be:	31 93       	st	Z+, r19
    33c0:	de f6       	brtc	.-74     	; 0x3378 <__ultoa_invert+0xe>
    33c2:	cf 01       	movw	r24, r30
    33c4:	08 95       	ret
    33c6:	46 2f       	mov	r20, r22
    33c8:	47 70       	andi	r20, 0x07	; 7
    33ca:	40 5d       	subi	r20, 0xD0	; 208
    33cc:	41 93       	st	Z+, r20
    33ce:	b3 e0       	ldi	r27, 0x03	; 3
    33d0:	0f d0       	rcall	.+30     	; 0x33f0 <__ultoa_invert+0x86>
    33d2:	c9 f7       	brne	.-14     	; 0x33c6 <__ultoa_invert+0x5c>
    33d4:	f6 cf       	rjmp	.-20     	; 0x33c2 <__ultoa_invert+0x58>
    33d6:	46 2f       	mov	r20, r22
    33d8:	4f 70       	andi	r20, 0x0F	; 15
    33da:	40 5d       	subi	r20, 0xD0	; 208
    33dc:	4a 33       	cpi	r20, 0x3A	; 58
    33de:	18 f0       	brcs	.+6      	; 0x33e6 <__ultoa_invert+0x7c>
    33e0:	49 5d       	subi	r20, 0xD9	; 217
    33e2:	31 fd       	sbrc	r19, 1
    33e4:	40 52       	subi	r20, 0x20	; 32
    33e6:	41 93       	st	Z+, r20
    33e8:	02 d0       	rcall	.+4      	; 0x33ee <__ultoa_invert+0x84>
    33ea:	a9 f7       	brne	.-22     	; 0x33d6 <__ultoa_invert+0x6c>
    33ec:	ea cf       	rjmp	.-44     	; 0x33c2 <__ultoa_invert+0x58>
    33ee:	b4 e0       	ldi	r27, 0x04	; 4
    33f0:	a6 95       	lsr	r26
    33f2:	97 95       	ror	r25
    33f4:	87 95       	ror	r24
    33f6:	77 95       	ror	r23
    33f8:	67 95       	ror	r22
    33fa:	ba 95       	dec	r27
    33fc:	c9 f7       	brne	.-14     	; 0x33f0 <__ultoa_invert+0x86>
    33fe:	00 97       	sbiw	r24, 0x00	; 0
    3400:	61 05       	cpc	r22, r1
    3402:	71 05       	cpc	r23, r1
    3404:	08 95       	ret
    3406:	9b 01       	movw	r18, r22
    3408:	ac 01       	movw	r20, r24
    340a:	0a 2e       	mov	r0, r26
    340c:	06 94       	lsr	r0
    340e:	57 95       	ror	r21
    3410:	47 95       	ror	r20
    3412:	37 95       	ror	r19
    3414:	27 95       	ror	r18
    3416:	ba 95       	dec	r27
    3418:	c9 f7       	brne	.-14     	; 0x340c <__ultoa_invert+0xa2>
    341a:	62 0f       	add	r22, r18
    341c:	73 1f       	adc	r23, r19
    341e:	84 1f       	adc	r24, r20
    3420:	95 1f       	adc	r25, r21
    3422:	a0 1d       	adc	r26, r0
    3424:	08 95       	ret

00003426 <__prologue_saves__>:
    3426:	2f 92       	push	r2
    3428:	3f 92       	push	r3
    342a:	4f 92       	push	r4
    342c:	5f 92       	push	r5
    342e:	6f 92       	push	r6
    3430:	7f 92       	push	r7
    3432:	8f 92       	push	r8
    3434:	9f 92       	push	r9
    3436:	af 92       	push	r10
    3438:	bf 92       	push	r11
    343a:	cf 92       	push	r12
    343c:	df 92       	push	r13
    343e:	ef 92       	push	r14
    3440:	ff 92       	push	r15
    3442:	0f 93       	push	r16
    3444:	1f 93       	push	r17
    3446:	cf 93       	push	r28
    3448:	df 93       	push	r29
    344a:	cd b7       	in	r28, 0x3d	; 61
    344c:	de b7       	in	r29, 0x3e	; 62
    344e:	ca 1b       	sub	r28, r26
    3450:	db 0b       	sbc	r29, r27
    3452:	0f b6       	in	r0, 0x3f	; 63
    3454:	f8 94       	cli
    3456:	de bf       	out	0x3e, r29	; 62
    3458:	0f be       	out	0x3f, r0	; 63
    345a:	cd bf       	out	0x3d, r28	; 61
    345c:	09 94       	ijmp

0000345e <__epilogue_restores__>:
    345e:	2a 88       	ldd	r2, Y+18	; 0x12
    3460:	39 88       	ldd	r3, Y+17	; 0x11
    3462:	48 88       	ldd	r4, Y+16	; 0x10
    3464:	5f 84       	ldd	r5, Y+15	; 0x0f
    3466:	6e 84       	ldd	r6, Y+14	; 0x0e
    3468:	7d 84       	ldd	r7, Y+13	; 0x0d
    346a:	8c 84       	ldd	r8, Y+12	; 0x0c
    346c:	9b 84       	ldd	r9, Y+11	; 0x0b
    346e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3470:	b9 84       	ldd	r11, Y+9	; 0x09
    3472:	c8 84       	ldd	r12, Y+8	; 0x08
    3474:	df 80       	ldd	r13, Y+7	; 0x07
    3476:	ee 80       	ldd	r14, Y+6	; 0x06
    3478:	fd 80       	ldd	r15, Y+5	; 0x05
    347a:	0c 81       	ldd	r16, Y+4	; 0x04
    347c:	1b 81       	ldd	r17, Y+3	; 0x03
    347e:	aa 81       	ldd	r26, Y+2	; 0x02
    3480:	b9 81       	ldd	r27, Y+1	; 0x01
    3482:	ce 0f       	add	r28, r30
    3484:	d1 1d       	adc	r29, r1
    3486:	0f b6       	in	r0, 0x3f	; 63
    3488:	f8 94       	cli
    348a:	de bf       	out	0x3e, r29	; 62
    348c:	0f be       	out	0x3f, r0	; 63
    348e:	cd bf       	out	0x3d, r28	; 61
    3490:	ed 01       	movw	r28, r26
    3492:	08 95       	ret

00003494 <_exit>:
    3494:	f8 94       	cli

00003496 <__stop_program>:
    3496:	ff cf       	rjmp	.-2      	; 0x3496 <__stop_program>
